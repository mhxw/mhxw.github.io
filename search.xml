<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>区块链中常用共识算法总结（持续更新）</title>
    <url>/2018-10-01-consensus-algorithm/</url>
    <content><![CDATA[<h2 id="1-POW（Proof-Of-Work）"><a href="#1-POW（Proof-Of-Work）" class="headerlink" title="1. POW（Proof Of Work）"></a>1. POW（Proof Of Work）</h2><hr>
<ul>
<li>一句话介绍：劳动致富，多劳者多得！</li>
<li>描述：POW中文翻译是工作量证明。采用此共识的数字货币有比特币、莱特币等。工作量证明系统（或者说协议、函数），是一种应对拒绝服务攻击和其他服务滥用的经济对策。它要求发起者进行一定量的运算，也就意味着需要消耗计算机一定的时间。这种系统要求得到证明的过程是低效且漫长的，可是校验则是高效且迅速，概括起来就是求解难，验证容易。<br>比特币是第一个区块链应用，同时也是最著名的应用之一，它所使用的共识机制就是POW。那么具体是怎么实现的呢？<br>在比特币中，使用了SHA256这种哈希函数作为求解手段。SHA256有以下特征：<blockquote>
<ol>
<li>是一种散列函数，即相邻的x1和x2，求得的f(x1)和f（x2）差别极大。</li>
<li>不可逆推，给定了f(x)的值，推断不出输入值。</li>
<li>不存在比穷举更好的方法，可以使f(x)落在特定的范围。</li>
</ol>
</blockquote>
<span id="more"></span>
实际使用过程中，每个节点需要打包的交易数据相同，再从尾部加一个随机数（节点自己选）作为整体输入来求输出值，把结果和当前的挖矿难度对比（要求输出值前x位为0），满足条件则向附近节点广播；不满足则更换随机数继续求解。最快求得解的节点，则可以视为挖矿胜出，取得其他节点的共识。</li>
</ul>
<h2 id="目前比特币已经吸引了全球大部分的运算能力，其他再使用PoW共识机制的区块链应用很难获得相同的计算能力来保障自身的安全，从而无法复制比特币的辉煌；同时由于挖矿造成大量的资源被浪费，共识达成的周期很长，导致了比特币的TPS（transaction-per-second，每秒执行事务数量）极低，只有个位数。-优点：算法简单，容易实现；节点间无需交换额外的信息即可达成共识；破坏系统需要投入极大的成本；-缺点：浪费能源；区块的确认时间难以缩短；新的区块链必须找到一种不同的散列算法，否则就会面临算力攻击；容易产生分叉，需要等待多个确认；永远没有最终性，需要检查点机制来弥补最终性；-2-POS-Proof-of-Stake）"><a href="#目前比特币已经吸引了全球大部分的运算能力，其他再使用PoW共识机制的区块链应用很难获得相同的计算能力来保障自身的安全，从而无法复制比特币的辉煌；同时由于挖矿造成大量的资源被浪费，共识达成的周期很长，导致了比特币的TPS（transaction-per-second，每秒执行事务数量）极低，只有个位数。-优点：算法简单，容易实现；节点间无需交换额外的信息即可达成共识；破坏系统需要投入极大的成本；-缺点：浪费能源；区块的确认时间难以缩短；新的区块链必须找到一种不同的散列算法，否则就会面临算力攻击；容易产生分叉，需要等待多个确认；永远没有最终性，需要检查点机制来弥补最终性；-2-POS-Proof-of-Stake）" class="headerlink" title="目前比特币已经吸引了全球大部分的运算能力，其他再使用PoW共识机制的区块链应用很难获得相同的计算能力来保障自身的安全，从而无法复制比特币的辉煌；同时由于挖矿造成大量的资源被浪费，共识达成的周期很长，导致了比特币的TPS（transaction per second，每秒执行事务数量）极低，只有个位数。- 优点：算法简单，容易实现；节点间无需交换额外的信息即可达成共识；破坏系统需要投入极大的成本；- 缺点：浪费能源；区块的确认时间难以缩短；新的区块链必须找到一种不同的散列算法，否则就会面临算力攻击；容易产生分叉，需要等待多个确认；永远没有最终性，需要检查点机制来弥补最终性；## 2. POS( Proof of Stake）"></a>目前比特币已经吸引了全球大部分的运算能力，其他再使用PoW共识机制的区块链应用很难获得相同的计算能力来保障自身的安全，从而无法复制比特币的辉煌；同时由于挖矿造成大量的资源被浪费，共识达成的周期很长，导致了比特币的TPS（transaction per second，每秒执行事务数量）极低，只有个位数。<br>- 优点：<br>算法简单，容易实现；<br>节点间无需交换额外的信息即可达成共识；<br>破坏系统需要投入极大的成本；<br>- 缺点：<br>浪费能源；<br>区块的确认时间难以缩短；<br>新的区块链必须找到一种不同的散列算法，否则就会面临算力攻击；<br>容易产生分叉，需要等待多个确认；<br>永远没有最终性，需要检查点机制来弥补最终性；<br>## 2. POS( Proof of Stake）</h2><ul>
<li>一句话介绍：持有越多，获得越多。</li>
<li>提出目的：解决POW51%攻击</li>
<li>描述：<blockquote>
<p>不同的旷工计算不同的数学难题，这个数学难题和你的拥有币的时间&#x2F;币的多少持反比例。拥有币时间越长，难度越低。持有币数量越多，难度越低。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>POS通过区块链系统内部的虚拟资产来管理安全性，根据节点持有的通证数量或者时长来决定节点享有的权利大小。区块链系统的参与者锁定他们在该区块链上持有的虚拟资产（Coin或Token），他们会签署消息以达成一致意见。只有那些已经成为系统一部分的参与者才能够决定下一个区块的内容。</p>
</blockquote>
<blockquote>
<p>PoW共识算法从经济角度，可以自然做到防止区块链分叉（区块链分叉的本质就是网络各节点对区块链的生成产生分歧，无法达成共识）。但是PoS则需要精心设计好相应的规则来防止分叉，例如PoS可以设定惩罚机制，参与挖矿的矿工被要求锁定一定数量的虚拟资产。如果他们被侦测到了存在不当的行为，则系统会没收全部或部分被锁定的虚拟资产。</p>
</blockquote>
<ul>
<li>优点：<br>在一定程度上缩短了共识达成的时间；<br>不再需要大量消耗能源挖矿。</li>
<li>缺点：<br>还是需要挖矿，本质上没有解决商业应用的痛点；<br>所有的确认都只是一个概率上的表达，而不是一个确定性的事情，理论上有可能存在其他攻击影响。例如，以太坊的DAO攻击事件造成以太坊硬分叉，而ETC由此事件出现，事实上证明了此次硬分叉的失败。</li>
</ul>
<h2 id="3-DPOS（Delegated-Proof-of-Stake）"><a href="#3-DPOS（Delegated-Proof-of-Stake）" class="headerlink" title="3. DPOS（Delegated Proof of Stake）"></a>3. DPOS（Delegated Proof of Stake）</h2><hr>
<ul>
<li>一句话介绍：POS的升级版</li>
<li>提出目的：POW&#x2F;POS浪费巨量算力。</li>
<li>描述：<br>DPoS机制，中文名叫做股份授权证明机制（又称受托人机制），代表数字货币是EOS。它的原理是让每一个通证的节点进行投票，选出集中多数票的节点，例如100个，然后这些节点会行使类似POS的权力。<br>DPOS利用利益相关方批准投票的权力以公平和民主的方式解决共识问题，所有网络参数，从费用估算到块间隔和交易规模，都可以通过选定的代表进行调整。从某种角度来看，DPOS有点像是议会制度或人民代表大会制度。如果代表不能履行他们的职责（当轮到他们时，没能生成区块），他们会被除名，网络会选出新的超级节点来取代他们。</li>
<li>优点：<br>大幅缩小参与验证和记账节点的数量，可以达到秒级的共识验证；<br>更加去中心化的机制；<br>拥有更高的处理效率</li>
<li>缺点：<br>整个共识机制还是依赖于token，很多商业应用是不需要token存在的。</li>
</ul>
<h2 id="4-PBFT（Practical-Byzantine-Fault-Tolerance）"><a href="#4-PBFT（Practical-Byzantine-Fault-Tolerance）" class="headerlink" title="4. PBFT（Practical Byzantine Fault Tolerance）"></a>4. PBFT（Practical Byzantine Fault Tolerance）</h2><hr>
<ul>
<li>一句话介绍：解决一切出现的故障</li>
<li>描述：拜占庭假设是对现实世界的模型化，由于硬件错误、网络拥塞或断开以及遭到恶意攻击，计算机和网络可能出现不可预料的行为。拜占庭容错协议必须处理这些失效，并且这些协议还要满足所要解决的问题要求的规范。</li>
</ul>
<blockquote>
<p>PBFT算法的核心理论是n&gt;&#x3D;3f+1<br>n是系统中的总节点数，f是允许出现故障的节点数。换句话说，如果这个系统允许出现f个故障，那么这个系统必须包括n个节点，才能解决故障。</p>
</blockquote>
<ul>
<li>优点：PBFT在很多场景都有应用，在区块链场景中，一般适合于对强一致性有要求的私有链和联盟链场景。（Hyperledger Fabric 在 0.6 版中应用了 PBFT，而在 1.0 版中放弃了 PBFT，转而采用效率更高的 Kafka，支持单点和集群两种方式，由 Kafka 直接给交易排序和出块）</li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><hr>
<pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;www.huoxing24.com&#x2F;newsdetail&#x2F;20190129104157764083.html
https:&#x2F;&#x2F;blog.csdn.net&#x2F;yuanfangyuan_block&#x2F;article&#x2F;details&#x2F;84593786<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>More info: <a href="https://www.jianshu.com/p/b56ab577222d">Description</a></p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
      </tags>
  </entry>
  <entry>
    <title>Goland远程连接Linux开发调试</title>
    <url>/2018-10-21-goland-linux-debug/</url>
    <content><![CDATA[<p>打开Goland，选择File&#x3D;》Plugins&#x3D;》Install JetBrains plugins</p>
<p><img src="http://p1.pstatp.com/large/pgc-image/df65cae30df44e248627f8f694a37e0f" alt="image"></p>
<p>搜索Remote Hosts Access，点击Install</p>
<span id="more"></span>
<p><img src="http://p1.pstatp.com/large/pgc-image/62f54c080e25416197d4f39ea3cff34a" alt="image"></p>
<p>安装好之后，重启GoLand</p>
<p>配置</p>
<p>Settings&#x3D;》build, execution, deployment&#x3D;》deployment</p>
<p>Add Server：命名和选择SFTP</p>
<p><img src="http://p1.pstatp.com/large/pgc-image/e7ea20e838b048f486d393fd827de93a" alt="image"></p>
<p>Connection里面的设置：</p>
<p>SFTP host：填写服务器ip</p>
<p>Root path：服务器的go项目存放路径，例如我配置的是&#x2F;home&#x2F;Go&#x2F;go-project</p>
<p>User name：服务器账号</p>
<p>Password：服务器密码</p>
<p><img src="http://p1.pstatp.com/large/pgc-image/479f25e17f0248de9bb1a06bff1f8adb" alt="image"></p>
<p>Mappings里面的设置：</p>
<p>Local path：本地电脑的项目路径</p>
<p>Deployment path on server：具体某个项目的路径</p>
<p><img src="http://p1.pstatp.com/large/pgc-image/0c45927233ec4ce1817c3e110bd906bd" alt="image"></p>
<p>配置完成！</p>
<p>把服务器项目下载到本地的项目文件中（2种情况：项目未下载过本地或已下载过本地）：</p>
<p>1、之前未把项目下载到本地：</p>
<p>（1）、Tools&#x3D;》Deployment&#x3D;》Browse Remote Host</p>
<p><img src="http://p1.pstatp.com/large/pgc-image/ad416c9ea7264cb0a0b3df07a9bbf3c3" alt="image"></p>
<p>（2）弹出Remote Host之后，右键选择项目&#x3D;》Download from here</p>
<p><img src="http://p1.pstatp.com/large/pgc-image/912500691cef4e2da1d5e803e5f2a135" alt="image"></p>
<p>2、项目已下载的本地</p>
<p>Tools&#x3D;》Deployment&#x3D;》Download from xxx</p>
<p><img src="http://p1.pstatp.com/large/pgc-image/0c45927233ec4ce1817c3e110bd906bd" alt="image"></p>
<p>本地代码修改完成之后，上传到服务器更新：</p>
<p>Tools&#x3D;》Deployment&#x3D;》Upload to xxx</p>
<p><img src="http://p1.pstatp.com/large/pgc-image/6ac5ba9dfebf4d82bb9a36442c588e95" alt="image"></p>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>golang</tag>
        <tag>goland</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7安装部署Nginx、Php7.2、MySQL5.7、WordPress</title>
    <url>/2018-10-24-centos7-install-wordpress/</url>
    <content><![CDATA[<h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><hr>
<h2 id="WordPress基于PHP开发的，本文采用Centos7-3、Nginx、MySQL5-7、PHP7-2部署。-设置阿里云镜像"><a href="#WordPress基于PHP开发的，本文采用Centos7-3、Nginx、MySQL5-7、PHP7-2部署。-设置阿里云镜像" class="headerlink" title="WordPress基于PHP开发的，本文采用Centos7.3、Nginx、MySQL5.7、PHP7.2部署。### 设置阿里云镜像"></a>WordPress基于PHP开发的，本文采用Centos7.3、Nginx、MySQL5.7、PHP7.2部署。<br>### 设置阿里云镜像</h2><ol>
<li>备份原来的yum源<pre class="line-numbers language-none"><code class="language-none">sudo cp &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo.backup <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<span id="more"></span></li>
<li>设置阿里云的yum源<pre class="line-numbers language-none"><code class="language-none">sudo wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>添加epel源<pre class="line-numbers language-none"><code class="language-none">sudo wget -P &#x2F;etc&#x2F;yum.repos.d&#x2F; http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>清理缓存并生成新的缓存<pre class="line-numbers language-none"><code class="language-none">sudo yum clean all  
sudo yum makecache  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ol>
<h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><hr>
<ol>
<li>安装nginx源<br>执行以下命令，安装该rpm后，在<code>/etc/yum.repos.d/ </code>目录中看到一个名为<code>nginx.repo</code> 的文件<pre class="line-numbers language-none"><code class="language-none">rpm -ivh http:&#x2F;&#x2F;nginx.org&#x2F;packages&#x2F;centos&#x2F;7&#x2F;noarch&#x2F;RPMS&#x2F;nginx-release-centos-7-0.el7.ngx.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>安装nginx<pre class="line-numbers language-none"><code class="language-none">yum install -y nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>nginx的默认目录<blockquote>
<p>nginx配置路径：&#x2F;etc&#x2F;nginx&#x2F;<br>pid目录：&#x2F;var&#x2F;run&#x2F;nginx.pid<br>错误日志：&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error<br>访问日志：&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log<br>默认站点目录：&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</p>
</blockquote>
</li>
</ol>
<p>只需知道nginx配置路径即可，一会儿仅需修改&#x2F;etc&#x2F;nginx&#x2F;nginx.conf 以及&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf </p>
<ul>
<li>修改配置文件<br>修改&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf中下面两段内容：<pre class="line-numbers language-none"><code class="language-none">vi &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
更改前：<pre class="line-numbers language-none"><code class="language-none">location &#x2F; &#123;
    root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;
    index  index.html index.htm;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
更改后：<pre class="line-numbers language-none"><code class="language-none"> root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;
 index  index.html index.htm index.php;
 location &#x2F; &#123;
   try_files $uri $uri&#x2F; &#x2F;index.php$is_args$args;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
更改前：<pre class="line-numbers language-none"><code class="language-none">#location ~ \.php$ &#123;
#    root           html;
#    fastcgi_pass   127.0.0.1:9000;
#    fastcgi_index  index.php;
#    fastcgi_param  SCRIPT_FILENAME  &#x2F;scripts$fastcgi_script_name;
#    include        fastcgi_params;
#&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
更改后：<pre class="line-numbers language-none"><code class="language-none">location ~ \.php$ &#123;
    fastcgi_pass   127.0.0.1:9000;
    fastcgi_index  index.php;
    fastcgi_param  SCRIPT_FILENAME  $request_filename;
    include        fastcgi_params;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
修改 <code>/etc/php-fpm.d/www.conf</code>配置：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">vi &#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>将<code>user = apache</code>改为<code>user = nginx</code>，将<code>group = apache</code>改为<code>group = nginx</code>。</p>
<ol start="4">
<li>nginx的常用命令</li>
</ol>
<ul>
<li>启动<pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;sbin&#x2F;nginx –s start
&#x2F;&#x2F;或者
systemctl start nginx.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>重启<pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;sbin&#x2F;nginx –s reload
&#x2F;&#x2F;或者
systemctl restart nginx.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>关闭<pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;sbin&#x2F;nginx –s stop
&#x2F;&#x2F;或者
systemctl stop nginx.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>查看进程<pre class="line-numbers language-none"><code class="language-none">ps -ef |grep nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><ol>
<li>安装MySQL5.7</li>
</ol>
<ul>
<li>下载并安装MySQL官方的 Yum Repository<pre class="line-numbers language-none"><code class="language-none">wget -i -c http:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-10.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>yum安装<pre class="line-numbers language-none"><code class="language-none">yum -y install mysql57-community-release-el7-10.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>安装MySQL Sever<pre class="line-numbers language-none"><code class="language-none">yum -y install mysql-community-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<ol start="2">
<li>MySQL数据库设置</li>
</ol>
<ul>
<li>首先启动MySQL<pre class="line-numbers language-none"><code class="language-none">systemctl start  mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>查看MySQL运行状态<br>出现<code>Active: active(runing)</code>则表示启动成功<pre class="line-numbers language-none"><code class="language-none">systemctl status mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>此时已运行成功并进入MySQL，执行以下命令找到密码<pre class="line-numbers language-none"><code class="language-none">grep &quot;password&quot; &#x2F;var&#x2F;log&#x2F;mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>进入数据库<pre class="line-numbers language-none"><code class="language-none">mysql -uroot -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>在数据库中修改密码，下面的<code>new password</code>填写新密码（密码设置格式为大小写、字符等）<pre class="line-numbers language-none"><code class="language-none">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;new password&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>由于安装了yum repository，以后每次yum操作都会自动更新，需要把这个卸载掉<pre class="line-numbers language-none"><code class="language-none">yum -y remove mysql57-community-release-el7-10.noarch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<h3 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h3><hr>
<ol>
<li>如果之前已经安装先卸载之前的<pre class="line-numbers language-none"><code class="language-none">yum -y remove php*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>由于linux的yum源不存在php7.x，所以我们要更改yum源<pre class="line-numbers language-none"><code class="language-none">rpm -Uvh https:&#x2F;&#x2F;dl.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;epel-release-latest-7.noarch.rpm   
rpm -Uvh https:&#x2F;&#x2F;mirror.webtatic.com&#x2F;yum&#x2F;el7&#x2F;webtatic-release.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>安装php扩展，选择自己需要的<pre class="line-numbers language-none"><code class="language-none">yum -y install php72w php72w-cli php72w-common php72w-devel php72w-embedded php72w-fpm php72w-gd php72w-mbstring php72w-mysqlnd php72w-opcache php72w-pdo php72w-xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>检验是否安装成功<pre class="line-numbers language-none"><code class="language-none">php -V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>开启服务<pre class="line-numbers language-none"><code class="language-none">systemctl start nginx.service
systemctl start mysqlb.service
systemctl start php-fpm.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h3 id="安装WordPress"><a href="#安装WordPress" class="headerlink" title="安装WordPress"></a>安装WordPress</h3><ol>
<li>移除&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html内所有文件<pre class="line-numbers language-none"><code class="language-none">cd &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html
rm 50x.html index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>下载并解压wordpress安装包<pre class="line-numbers language-none"><code class="language-none">wget https:&#x2F;&#x2F;cn.wordpress.org&#x2F;wordpress-5.0.2-zh_CN.zip
tar -zxvf wordpress-5.0.2-zh_CN.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ol>
<h3 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h3><hr>
<ol>
<li>远程连接MySQL出现1130错误，无法远程连接：error 1130: host ‘192.168.1.3’ is not allowed to connect to this MySQL<pre class="line-numbers language-none"><code class="language-none">mysql&gt; use mysql
mysql&gt; select host, user from user;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ol>
<ul>
<li>将相应用户数据表中的host字段改成’%’;<pre class="line-numbers language-none"><code class="language-none">update user set host&#x3D;&#39;%&#39; where user&#x3D;&#39;root&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>刷新保存，重新连接即可 <pre class="line-numbers language-none"><code class="language-none">flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>centos</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7.5安装部署Golang、Beego框架</title>
    <url>/2018-10-25-centos7-install-beego/</url>
    <content><![CDATA[<h3 id="安装Golang"><a href="#安装Golang" class="headerlink" title="安装Golang"></a>安装Golang</h3><hr>
<ol>
<li>进入home目录下<pre class="line-numbers language-none"><code class="language-none">cd &#x2F;home <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>mkdir Go 创建一个Golang的目录<pre class="line-numbers language-none"><code class="language-none">mkdir Go
cd Go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<img src="http://p1.pstatp.com/large/pgc-image/1539564410823d00ecea058" alt="image"><span id="more"></span></li>
<li>在 <a href="http://www.studygolang.com/dl">http://www.studygolang.com/dl</a> 找到go对应的安装包</li>
</ol>
<p><img src="http://p1.pstatp.com/large/pgc-image/15395644106433baa6d69d9" alt="image"></p>
<p><img src="http://p3.pstatp.com/large/pgc-image/15395644106481993cbc43b" alt="image"></p>
<ol start="4">
<li><p>复制下载文件链接，在命令行执行代码：</p>
<pre class="line-numbers language-none"><code class="language-none">wget https:&#x2F;&#x2F;dl.google.com&#x2F;go&#x2F;go1.11.linux-amd64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="http://p3.pstatp.com/large/pgc-image/15395644106608d343392ab" alt="image"></p>
</li>
<li><p>解压缩</p>
<pre class="line-numbers language-none"><code class="language-none">tar xzvf  go1.11.linux-amd64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="http://p1.pstatp.com/large/pgc-image/15395644106673de1d27576" alt="image"></p>
</li>
<li><p>设置环境变量：</p>
<pre class="line-numbers language-none"><code class="language-none">vi ~&#x2F;.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="http://p1.pstatp.com/large/pgc-image/15395644106498fc0558985" alt="image"></p>
</li>
<li><p>添加：</p>
<pre class="line-numbers language-none"><code class="language-none">export GOROOT&#x3D;&#x2F;home&#x2F;Go&#x2F;go
export PATH&#x3D;$GOROOT&#x2F;bin:$PATH
export GOPATH&#x3D;&#x2F;home&#x2F;Go&#x2F;go-project
export PATH&#x3D;$PATH:$GOPATH&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="http://p1.pstatp.com/large/pgc-image/153956441077191b826e8e8" alt="image"></p>
</li>
</ol>
<p>8、填完执行：</p>
<pre class="line-numbers language-none"><code class="language-none">source ~&#x2F;.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="http://p1.pstatp.com/large/pgc-image/15395644107748da33f31d2" alt="image"></p>
<h3 id="安装Beego"><a href="#安装Beego" class="headerlink" title="安装Beego"></a>安装Beego</h3><hr>
<ol>
<li>安装git<pre class="line-numbers language-none"><code class="language-none">yum install git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="http://p1.pstatp.com/large/pgc-image/1539564410765a5e5c9732a" alt="image"></li>
</ol>
<p><img src="http://p9.pstatp.com/large/pgc-image/1539564410775577057f8d8" alt="image"></p>
<ol start="2">
<li><p>git下载beego和bee</p>
<pre class="line-numbers language-none"><code class="language-none">go get -u -v [http:&#x2F;&#x2F;github.com&#x2F;astaxie&#x2F;beego](http:&#x2F;&#x2F;github.com&#x2F;astaxie&#x2F;beego)
go get -u -v githubcom&#x2F;beego&#x2F;bee<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>下载时等待一会儿，直到结束为止<br><img src="http://p1.pstatp.com/large/pgc-image/1539564410793a1c96192bd" alt="image"><br>此时，Go和beego就安装好了</p>
</li>
<li><p>测试：</p>
<pre class="line-numbers language-none"><code class="language-none">cd $GOPATH&#x2F;src
bee new class<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>successfully，测试ok~<br><img src="http://p3.pstatp.com/large/pgc-image/15395644108936aead8c176" alt="image"></p>
</li>
<li><p>进入class目录</p>
<pre class="line-numbers language-none"><code class="language-none">cd class<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>运行mian.go文件</p>
<pre class="line-numbers language-none"><code class="language-none">go run main.go <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="http://p1.pstatp.com/large/pgc-image/1539564410911f3deafd434" alt="image"></p>
</li>
<li><p>打开8080访问，显示欢迎页面，ok~<br><img src="http://p3.pstatp.com/large/pgc-image/153956441089129f32e7bba" alt="image"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>centos</tag>
        <tag>beego</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 相关命令</title>
    <url>/2018-11-07-linux/</url>
    <content><![CDATA[<h2 id="查看CPU信息（型号）"><a href="#查看CPU信息（型号）" class="headerlink" title="查看CPU信息（型号）"></a>查看CPU信息（型号）</h2><pre class="line-numbers language-none"><code class="language-none">cat &#x2F;proc&#x2F;cpuinfo | grep name | cut -f2 -d: | uniq -c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<span id="more"></span>]]></content>
      <categories>
        <category>Linux相关</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hyperledger第一讲】HyperLedger Fabric基础介绍和架构原理</title>
    <url>/2018-12-01-fabric-basic-intro1/</url>
    <content><![CDATA[<h2 id="简单概述"><a href="#简单概述" class="headerlink" title="简单概述"></a><strong>简单概述</strong></h2><hr>
<h2 id="Hyperledger-Fabric是由IBM公司主导开发的一个面向企业级客户的开源项目。与比特币和以太坊这类公有链不同，Hyperledger-Fabric网络中的节点必须经过授权认证后才能加入，从而避免了POW资源开销，大幅提高了交易处理效率，满足企业级应用对处理性能的诉求。同时，为了满足灵活多变的应用场景，Hyperledger-Fabric采用了高度模块化的系统设计理念，将权限认证模块（MSP）、共识服务模块（Ordering-Service）、背书模块（Endorsing-peers）、区块提交模块（committing-peers）等进行分离部署，使开发者可以根据具体的业务场景替换模块，实现了模块的插件式管理（plug-in-plug-out）。所以，Hyperledger-Fabric是一个私有链／联盟链的开发框架，而且系统的运行不需要token支持。-关键组件"><a href="#Hyperledger-Fabric是由IBM公司主导开发的一个面向企业级客户的开源项目。与比特币和以太坊这类公有链不同，Hyperledger-Fabric网络中的节点必须经过授权认证后才能加入，从而避免了POW资源开销，大幅提高了交易处理效率，满足企业级应用对处理性能的诉求。同时，为了满足灵活多变的应用场景，Hyperledger-Fabric采用了高度模块化的系统设计理念，将权限认证模块（MSP）、共识服务模块（Ordering-Service）、背书模块（Endorsing-peers）、区块提交模块（committing-peers）等进行分离部署，使开发者可以根据具体的业务场景替换模块，实现了模块的插件式管理（plug-in-plug-out）。所以，Hyperledger-Fabric是一个私有链／联盟链的开发框架，而且系统的运行不需要token支持。-关键组件" class="headerlink" title="Hyperledger Fabric是由IBM公司主导开发的一个面向企业级客户的开源项目。与比特币和以太坊这类公有链不同，Hyperledger Fabric网络中的节点必须经过授权认证后才能加入，从而避免了POW资源开销，大幅提高了交易处理效率，满足企业级应用对处理性能的诉求。同时，为了满足灵活多变的应用场景，Hyperledger Fabric采用了高度模块化的系统设计理念，将权限认证模块（MSP）、共识服务模块（Ordering Service）、背书模块（Endorsing peers）、区块提交模块（committing peers）等进行分离部署，使开发者可以根据具体的业务场景替换模块，实现了模块的插件式管理（plug-in&#x2F;plug-out）。所以，Hyperledger Fabric是一个私有链／联盟链的开发框架，而且系统的运行不需要token支持。## 关键组件"></a>Hyperledger Fabric是由IBM公司主导开发的一个面向企业级客户的开源项目。与比特币和以太坊这类公有链不同，Hyperledger Fabric网络中的节点必须经过授权认证后才能加入，从而避免了POW资源开销，大幅提高了交易处理效率，满足企业级应用对处理性能的诉求。同时，为了满足灵活多变的应用场景，Hyperledger Fabric采用了高度模块化的系统设计理念，将权限认证模块（MSP）、共识服务模块（Ordering Service）、背书模块（Endorsing peers）、区块提交模块（committing peers）等进行分离部署，使开发者可以根据具体的业务场景替换模块，实现了模块的插件式管理（plug-in&#x2F;plug-out）。所以，Hyperledger Fabric是一个私有链／联盟链的开发框架，而且系统的运行不需要token支持。<br><span id="more"></span><br>## <strong>关键组件</strong></h2><ol>
<li><p>Ledger：账本，节点维护的区块链和状态数据库</p>
</li>
<li><p>World state：世界状态，经过数次交易后最新的键值对</p>
</li>
<li><p>Channel: 通道，私有的子网络，通道中的节点共同维护账本，实现数据的隔离和保密。 每个channel对应一个账本，由加入该channel的peer维护，一个peer可以加入多个channel，维护多个账本。</p>
</li>
<li><p>Network：交易处理节点之间的P2P网络，用于维持区块链账本的一致性。</p>
</li>
<li><p>Org：Orginazation，管理一系列成员的组织。一个channel内可以有多个组织。</p>
</li>
<li><p>Chainnode：链码，运行在节点内的程序，目前支持Go、Nodejs、Java，运行在隔离的容器中，提供业务逻辑接口，对账本进行查询或更新</p>
</li>
<li><p>Endorse：背书阶段，指一个节点执行了一个交易并对结果进行签名后返回响应的过程（负责校验某个交易是否合法）。</p>
</li>
<li><p>Ordering Service：排序服务，将交易排序后放入区块中，并广播给网络各节点</p>
</li>
<li><p>PKI：Public Key Infrastructure，一种遵循标准的利用公钥加密技术为电子商务的开展提供一套安全基础平台的技术和规范</p>
</li>
<li><p>MSP：Membership Service Provider，成员管理服务，基于PKI实现，为网络成员生成证书，并管理身份</p>
</li>
</ol>
<h2 id="共识算法"><a href="#共识算法" class="headerlink" title="共识算法"></a><strong>共识算法</strong></h2><hr>
<p>在所有peers中，交易信息必须按照一致的顺序写入账本（区块链的基本原则）。例如，比特币通过POW机制，由最先完成数学难题的节点决定本次区块中的信息顺序，并广播给全网所有节点，以此来达成账本的共识。而Hyperledger Fabric采用了更加灵活、高效的共识算法，以适应企业场景下，对高TPS的要求。目前，Hyperledger Fabric有三种交易排序算法可以选择。</p>
<p>Solo：只有一个order服务节点负责接收交易信息并排序，这是最简单的一种排序算法，一般用在实验室测试环境中。Sole属于中心化的处理方式。</p>
<p>Kafka：是Apache的一个开源项目，主要提供分布式的消息处理／分发服务，每个kafka集群由多个服务节点组成。Hyperledger Fabric利用kafka对交易信息进行排序处理，提供高吞吐、低延时的处理能力，并且在集群内部支持节点故障容错。</p>
<p>SBFT：简单拜占庭算法，相比于kafka，提供更加可靠的排序算法，包括容忍节点故障以及一定数量的恶意节点。目前，Hyperledger Fabric社区正在开发该算法。</p>
<h2 id="节点架构"><a href="#节点架构" class="headerlink" title="节点架构"></a><strong>节点架构</strong></h2><hr>
<p>Fabric的节点具有不同身份并提供不同职能，下面是网络节点的示意图。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5946072-b4688b29c507f2dc.png" alt="网络节点的示意图"></p>
<p>一、Peer节点</p>
<ol>
<li><p>记账节点（Committing peer）：所有的Peer节点都是记账 (committer) 节点，负责验证从排序服务接收到区块中的交易，维护账本的副本。</p>
</li>
<li><p>背书节点（Endoring peer）：部分Peer节点会执行交易并对结果签名背书，充当背书 (Endorsement) 节点。背书节点是动态的角色，只有在应用<br>程序向它发起背书请求的时候才是背书节点，其他时候只是普通的记账节点，只负责验证交易并记账。Peers节点是一个逻辑的概念，endorser和committer可以同时部署在一台物理机上。</p>
</li>
<li><p>主节点(Leader Peer)：代表的是与排序节点通信的节点，负责从排序服务节点处获取最新的区块并在组织内部同步。</p>
</li>
</ol>
<p>二、Orderer节点</p>
<ol>
<li><p>排序服务节点接收包含背书签名的交易，并进行排序、打包生成区块，广播给Peer节点，保证同一个链上的节点接收到相同的消息，并且有相同的逻辑顺序。</p>
</li>
<li><p>排序服务可以支持多链的交易处理，实现了多通道的数据隔离，保证只有同一个链的peer才能访问链上的数据。</p>
</li>
<li><p>排序服务可选择集中式（Solo）或分布式（Kafka）协议，其中Kafka集群可以实现崩溃故障容错（CFT）。</p>
</li>
</ol>
<p>三、CA节点</p>
<ol>
<li><p>CA节点是Fabric的证书颁发机构（Certificate Authority）。</p>
</li>
<li><p>CA节点接收客户端的注册申请，返回注册密码用于用户登陆，以便获取身份证书。</p>
</li>
<li><p>在区块链网络上所有的操作都会验证用户的身份。</p>
</li>
</ol>
<p>四、Client节点</p>
<ol>
<li><p>客户端节点代表最终用户操作的实体，它必须连接到某一个Peer节点或者排序服务节点上与区块链网络进行通信。</p>
</li>
<li><p>客户端节点向背书节点提交交易提案，收集到足够背书后，向排序服务广播交易，进行排序，生成区块。</p>
</li>
</ol>
<h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a><strong>数据存储</strong></h2><hr>
<p>Fabric区块链系统的数据存储主要由一项文件存储（区块数据）和三项数据库组成，结构如下图。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5946072-4634a6f72e40172a.png" alt="数据存储结构"></p>
<p>一、区块数据</p>
<ol>
<li><p>区块（block）数据时以二进制文件的形式存储的，每个账本数据存储在节点文件系统的不同目录下</p>
</li>
<li><p>区块数据存储是通过区块文件管理器（blockfileMgr）实现的，它来决定区块存储于哪个目录下的哪个文件</p>
</li>
<li><p>区块文件管理器创建的文件名以“blockifle_”为前缀，6位数字位后缀，比如blockfile_000000，默认的区块文件大小为64MB，如果当前文件大小超过该值，则区块写入下一个文件中。</p>
</li>
</ol>
<p>二、区块索引</p>
<ol>
<li>Fabric提供多种索引方式，以方便能快速找到所需要区块数据。每次提交区块后都会更新索引数据库。索引方式（键）有：</li>
</ol>
<ul>
<li>区块编号 （Block Number）</li>
<li>区块哈希 （Block Hash）</li>
<li>交易编号 （Tx ID）</li>
</ul>
<ol start="2">
<li>索引的内容（值）是文件位置指针（File Location Pointer），结构如下：</li>
</ol>
<ul>
<li>fileSuffixNum：所在文件的编号</li>
<li>offset：文件内的偏移量</li>
<li>bytesLength：内容占用的字节数</li>
</ul>
<p>三、状态数据库</p>
<ol>
<li><p>状态数据（State Database）记录的是交易执行的结果，最新的状态代表了通道上所有键的最新值，所以又称为“世界状态”。</p>
</li>
<li><p>交易或查询操作调用链码会根据当前状态数据库来完成。</p>
</li>
<li><p>状态数据库支持查询单个键的数据，多个键的数据以及一个范围内的数据，如果使用的是CouchDB，还可以支持复杂的条件查询。</p>
</li>
</ol>
<p>四、历史数据</p>
<p>历史数据（History Database）：记录的是每个状态数据的历史信息，每个历史信息以一个四元祖表示：</p>
<ul>
<li>namespace: 代表不同的chaincodeID</li>
<li>writeKey：要写入数据的键</li>
<li>blockNo：要写入数据所在的区块编号</li>
<li>tranNo：要写入数据所在区块内的交易编号</li>
</ul>
<h2 id="交易流程"><a href="#交易流程" class="headerlink" title="交易流程"></a><strong>交易流程</strong></h2><hr>
<p>以下是Fabric的经典交易流程，所有涉及到对账本数据更新的操作都是基于这个交易流程来完成的。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5946072-02de9417949c25e3.png" alt="交易流程图"></p>
<ol>
<li>发送交易提案<br>客户端通过SDK接口，向背书节点（endorsing peer）发送交易提案（Proposal），提案中包含交易所需参数。</li>
</ol>
<p><img src="https://upload-images.jianshu.io/upload_images/5946072-10e5adf2246f4b38.png" alt="发送交易提案"></p>
<ol start="2">
<li>模拟执行交易提案<br>每个endorsing peer节点模拟处理交易，此时并不会将交易信息写入账本。然后，endorser peer会验证交易信息的合法性，并对交易信息签名后，返回给client。此时的交易信息只是在client和单个endorser peer之间达成共识，并没有完成全网共识，各个client的交易顺序没有确定，可能存在双花问题，所以还不能算是一个“有效的交易”。同时，client需要收到“大多数”endorser peer的验证回复后，才算验证成功，具体的背书策略由智能合约代码控制，可以由开发者自由配置。</li>
</ol>
<p>每个执行都会产生对状态数据读出和写入的数据集合，叫做读写集（RWsets），读写集是交易中记录的主要内容</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5946072-25369980dbb83ddf.png" alt="模拟执行交易提案"></p>
<ol start="3">
<li><p>返回提案响应<br>背书节点会对读写集进行背书(Endorse)签名，生成提案响应(Proposal response)并返回给应用程序</p>
</li>
<li><p>交易排序<br>client将签名后的交易信息发送给order service集群进行交易排序和打包。Order service集群通过共识算法，对所有交易信息进行排序，然后打包成区块。Order service的共识算法是以组件化形态插入Hyperledger系统的，也就是说开发者可以自由选择合适的共识算法。</p>
</li>
</ol>
<p>背书节点会对读写集进行背书(Endorse)签名，生成提案响应(Proposal response)并返回给应用程序</p>
<ol start="5">
<li>交易验证并提交<br>ordering service将排序打包后的区块广播发送给committing peers，由其做最后的交易验证，并写入区块链。ordering service只是决定交易处理的顺序，并不对交易的合法性进行校验，也不负责维护账本信息。只有committing peers才有账本写入权限。<br>应用程序根据接收到的提案响应生成交易，并发送给排序服务节点。排序服务打包一组交易到一个区块后，分发给各记账节点。</li>
</ol>
<p>每个节点会对区块中的所有交易进行验证，包括验证背书策略以及版本冲突验证（防止双花），验证不通过的交易会被标记会无效（Invalid）</p>
<p>账本更新：节点将读写集更新到状态数据库 ，将区块提交到区块链上</p>
<ol start="6">
<li>通知交易结果给客户端<br>各记账节点通知应用程序交易的成功与否，交易完成。</li>
</ol>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><strong>参考文档</strong></h2><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;www.hulupan.com&#x2F;qukuailian&#x2F;blockchain2183.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <categories>
        <category>Hyperledger</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
        <tag>hyperledger</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hyperledger第二讲】Ubuntu 16.04部署HyperLedger Fabric1.0并成功运行e2e-cli</title>
    <url>/2018-12-02-fabric-ubuntu-deploy2/</url>
    <content><![CDATA[<h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a><strong>准备环境</strong></h2><blockquote>
<p>操作系统：阿里云Ubuntu16.04<br>Git、Golang<br>Docker环境支持：docker、docker-compose<br>Fabric组件Docker镜像<br>Fabric源码库</p>
</blockquote>
<span id="more"></span>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a><strong>安装步骤</strong></h2><p><strong>更新系统源</strong></p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-get update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a><strong>安装Git</strong></h3><pre class="line-numbers language-none"><code class="language-none">sudo apt install git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>查看git版本信息</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">git version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a><strong>安装Docker</strong></h3><pre class="line-numbers language-none"><code class="language-none">参考文档：
https:&#x2F;&#x2F;docs.docker.com&#x2F;install&#x2F;linux&#x2F;docker-ce&#x2F;ubuntu&#x2F;
https:&#x2F;&#x2F;yq.aliyun.com&#x2F;articles&#x2F;110806<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>自动安装</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">curl -fsSL https:&#x2F;&#x2F;get.docker.com | bash -s docker --mirror Aliyun<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>查看docker版本</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">docker version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="http://upload-images.jianshu.io/upload_images/5946072-cca35bb656ec72b2.jpg" alt="image"></p>
<ul>
<li>设置阿里云docker镜像加速器</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">网址：https:&#x2F;&#x2F;cr.console.aliyun.com&#x2F;mirrors<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="安装Docker-compose"><a href="#安装Docker-compose" class="headerlink" title="安装Docker-compose"></a><strong>安装Docker-compose</strong></h3><pre class="line-numbers language-none"><code class="language-none">参考文档：
https:&#x2F;&#x2F;docs.docker.com&#x2F;compose&#x2F;install&#x2F;
最新版地址：
https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>(官方途径)下载docker-compose，也可访问：<a href="http://link.zhihu.com/?target=https://get.daocloud.io/">https://get.daocloud.io</a>国内高速下载</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">sudo curl -L &quot;https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.23.2&#x2F;docker-compose-$(uname -s)-$(uname -m)&quot; -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>授权</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">sudo chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>查看版本信息</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">docker-compose --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="http://upload-images.jianshu.io/upload_images/5946072-596232dbcc9460e9.jpg" alt="image"></p>
<ul>
<li><p>创建docker用户组</p>
<pre class="line-numbers language-none"><code class="language-none">sudo groupadd docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>将当前用户添加到用户组（${USER}为自己当前的用户名）</p>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">sudo usermod -aG docker $&#123;USER&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>重启docker</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">sudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>切换或者退出当前账户再重新登入</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">su root             #切换到root用户
su $&#123;USER&#125;          #再切换到原来的应用用户以上配置才生效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="安装Golang"><a href="#安装Golang" class="headerlink" title="安装Golang"></a><strong>安装Golang</strong></h3><ul>
<li>访问国内此网站下载最新Linux稳定版的golang</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">中文社区网址：https:&#x2F;&#x2F;studygolang.com&#x2F;dl
获取安装包：wget https:&#x2F;&#x2F;dl.google.com&#x2F;go&#x2F;go1.11.linux-amd64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li><p>使用tar命令把安装包解压缩&#x2F;usr&#x2F;local文件夹下面</p>
<pre class="line-numbers language-none"><code class="language-none">tar -zxvf go1.11.linux-amd64.tar.gz -C &#x2F;usr&#x2F;local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>设置环境变量</p>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">sudo vim &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>添加内容，其中go的安装目录是&#x2F;usr&#x2F;local&#x2F;go，go的工作目录是&#x2F;home&#x2F;go</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">export GOPATH&#x3D;&#x2F;home&#x2F;go
export GOROOT&#x3D;&#x2F;usr&#x2F;local&#x2F;go
export PATH&#x3D;$GOROOT&#x2F;bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>使用source命令，使其配置信息生效</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>查看go的版本信息</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">go version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>查看go的具体配置信息</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">go env<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>在GOPATH目录下创建go目录</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">mkdir go<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>进入go项目路径</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">cd &#x2F;home&#x2F;go<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="Fabric部署"><a href="#Fabric部署" class="headerlink" title="Fabric部署"></a><strong>Fabric部署</strong></h2><ul>
<li>在&#x2F;home&#x2F;go下创建目录</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">mkdir -p src&#x2F;github.com&#x2F;hyperledger
cd src&#x2F;github.com&#x2F;hyperledger
git clone https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>进入 fabric 目录查看版本分支并切换分支</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">cd fabric
git branch
此处选择对应版本或公开发行版，我选择v1.0.0
git checkout v1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>下载fabric示例</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">git clone -b master https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-samples.git
cd fabric-samples<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>进入 fabric-samples 目录查看版本分支并切换分支</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">cd fabric-samples
git branch
此处选择对应版本或公开发行版，我选择v1.0.0
git checkout v1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>Fabric的Docker镜像下载</strong></p>
<ul>
<li>进入<code>fabrci/examples/e2e_cli/</code>目录，完成镜像下载，执行命令：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">cd &#x2F;home&#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabrci&#x2F;examples&#x2F;e2e_cli&#x2F;
ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>ls之后显示，在官网找对应的docker镜像版本号（<a href="http://link.zhihu.com/?target=https://hub.docker.com/u/hyperledger">https://hub.docker.com/u/hyperledger</a>），因为安装的fabric1.0.0，故我找的是1.0.0，这一步十分重要</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/5946072-0a2ba8815895b61e.jpg" alt="image"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5946072-c575cb530dd7752e.jpg" alt="image"></p>
<pre class="line-numbers language-none"><code class="language-none">source download-dockerimages.sh -c &#123;tags：输版本号&#125; -f &#123;tags：输版本号&#125;
source download-dockerimages.sh -c x86_64-1.0.0 -f x86_64-1.0.0
docker images<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img src="http://upload-images.jianshu.io/upload_images/5946072-434668a920ccc3e5.jpg" alt="image"></p>
<p><strong>启动Fabric并自动完成chaincode测试</strong></p>
<ul>
<li>进入刚刚的e2e_cli文件目录，执行</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">.&#x2F;network_setup.sh up<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="http://upload-images.jianshu.io/upload_images/5946072-299d82437a79b55a.jpg" alt="image"></p>
<p>显示END-E2E表示测试成功</p>
<p><strong>官方通过chaincode手动测试Fabric案例</strong></p>
<ul>
<li>重新打开一个窗口，在fabric目录下输入</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">docker exec -it cli bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="http://upload-images.jianshu.io/upload_images/5946072-57cf73dc7ec190f9.jpg" alt="image"></p>
<ul>
<li>再输入</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">peer chaincode query -C mychannel -n mycc -c &#39;&#123;&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>图例显示a结果90</li>
<li>a给b转账50</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">peer chaincode invoke -o orderer.example.com:7050 --tls true --cafile &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem -C mychannel -n mycc -c &#39;&#123;&quot;Args&quot;:[&quot;invoke&quot;,&quot;a&quot;,&quot;b&quot;,&quot;50&quot;]&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>再执行查询语句，此时结果为40</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">peer chaincode query -C mychannel -n mycc -c &#39;&#123;&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>最后，如果打算退出网络，先执行</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">exit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>在刚才fabric&#x2F;examples&#x2F;e2e_cli目录下执行</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">.&#x2F;network_setup.sh down<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="安装Fabric-SDK-Go"><a href="#安装Fabric-SDK-Go" class="headerlink" title="安装Fabric SDK Go"></a><strong>安装Fabric SDK Go</strong></h2><blockquote>
<p>安装SDK</p>
</blockquote>
<ul>
<li>下载软件包</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">go get -u github.com&#x2F;hyperledger&#x2F;fabric-sdk-go<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>安装依赖包</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">cd $GOPATH&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go&#x2F;
chmod +x test&#x2F;scripts&#x2F;*.sh  # make depend-install操作会调用dependencies.sh脚本
make depend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<hr>
<p><strong>FAQ</strong></p>
<p>1、阿里云服务器，Ubuntu 报错 sudo: unable to resolve host</p>
<pre class="line-numbers language-none"><code class="language-none">解决方案：https:&#x2F;&#x2F;blog.csdn.net&#x2F;hhtnan&#x2F;article&#x2F;details&#x2F;79551969<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">参考文档
https:&#x2F;&#x2F;blog.csdn.net&#x2F;cao0507&#x2F;article&#x2F;details&#x2F;82080924
https:&#x2F;&#x2F;docs.docker.com&#x2F;install&#x2F;linux&#x2F;docker-ce&#x2F;ubuntu&#x2F;
https:&#x2F;&#x2F;yq.aliyun.com&#x2F;articles&#x2F;110806
https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;
https:&#x2F;&#x2F;docs.docker.com&#x2F;compose&#x2F;install&#x2F;
https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-sdk-go
https:&#x2F;&#x2F;hub.docker.com&#x2F;u&#x2F;hyperledger<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Hyperledger</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
        <tag>hyperledger</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hyperledger第三讲】Hyperledger Fabric1.x运行first-network和fabcar以及常见问题解决（持续更新）</title>
    <url>/2018-12-03-fabric-firstnetwork-fabcar3/</url>
    <content><![CDATA[<h2 id="基础环境搭建"><a href="#基础环境搭建" class="headerlink" title="基础环境搭建"></a>基础环境搭建</h2><hr>
<blockquote>
<p>操作系统：阿里云Ubuntu16.04<br>Git、Golang、Nodejs<br>Docker环境支持：docker、docker-compose<br>Fabric组件Docker镜像<br>fabric-samples源码库<br>Nodejs： 8.9.4</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">#先看这个搭建Hyperledger Fabric基础环境
https:&#x2F;&#x2F;blog.csdn.net&#x2F;holechain&#x2F;article&#x2F;details&#x2F;88795776
#（看到安装docker-compose完成即可，接下来看此篇）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><hr>
<h3 id="1-首先，使用下面的命令来安装-nvm（第一种方式，两种选其一即可）"><a href="#1-首先，使用下面的命令来安装-nvm（第一种方式，两种选其一即可）" class="headerlink" title="1. 首先，使用下面的命令来安装 nvm（第一种方式，两种选其一即可）"></a>1. 首先，使用下面的命令来安装 nvm（第一种方式，两种选其一即可）</h3><pre class="line-numbers language-none"><code class="language-none">curl -o- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;creationix&#x2F;nvm&#x2F;v0.33.2&#x2F;install.sh | bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>下载并安装完成后用户退出重新登录或者重新 source 一下环境变量<pre class="line-numbers language-none"><code class="language-none">source ~&#x2F;.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>查看当前的版本<pre class="line-numbers language-none"><code class="language-none">nvm ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>首次安装没有版本，使用<code>nvm install </code>安装指定版本的 node<pre class="line-numbers language-none"><code class="language-none">nvm install v8.9.4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>再次查看 node 版本信息<pre class="line-numbers language-none"><code class="language-none">nvm list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>博主之前已经安装<code>v6.9.5</code>，目前<code>-&gt;</code>所指是<code>v6.9.5</code>版本，需要切换成<code>v8.9.4</code>版本<pre class="line-numbers language-none"><code class="language-none">nvm use v8.9.4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="http://p1.pstatp.com/large/pgc-image/0a2c89f2bc8346e083b63fb2ea2bb227" alt="查看 node 版本信息和切换node版本"></li>
</ul>
<h3 id="2-手动安装Node-js（第二种方式）"><a href="#2-手动安装Node-js（第二种方式）" class="headerlink" title="2. 手动安装Node.js（第二种方式）"></a>2. 手动安装Node.js（第二种方式）</h3><pre class="line-numbers language-none"><code class="language-none">wget wget https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v8.9.4&#x2F;node-v8.9.4-linux-x64.tar.gz
tar -zxvf node-v8.9.4-linux-x64.tar.gz
sudo mv node-v8.9.4-linux-x64 &#x2F;usr&#x2F;local&#x2F;node
sudo ln -s &#x2F;usr&#x2F;local&#x2F;node&#x2F;bin&#x2F;node &#x2F;usr&#x2F;local&#x2F;bin&#x2F;node
sudo ln -s &#x2F;usr&#x2F;local&#x2F;node&#x2F;lib&#x2F;node_modules&#x2F;npm&#x2F;bin&#x2F;npm-cli.js &#x2F;usr&#x2F;local&#x2F;bin&#x2F;npm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="3-测试是否安装成功，以及Node-js并设置镜像加速"><a href="#3-测试是否安装成功，以及Node-js并设置镜像加速" class="headerlink" title="3. 测试是否安装成功，以及Node.js并设置镜像加速"></a>3. 测试是否安装成功，以及<code>Node.js</code>并设置镜像加速</h3><pre class="line-numbers language-none"><code class="language-none">node -v
npm -v
npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="构建网络"><a href="#构建网络" class="headerlink" title="构建网络"></a>构建网络</h2><hr>
<ul>
<li><p>创建<code>fabric-samples</code>目录</p>
<pre class="line-numbers language-none"><code class="language-none">mkdir -p github.com&#x2F;hyperledger&#x2F;fabric-samples<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>进入<code>fabric-samples</code>下</p>
<pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-samples.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>查看版本分支</p>
<pre class="line-numbers language-none"><code class="language-none">git tag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="http://p1.pstatp.com/large/pgc-image/1331a19f7d804e62910fd2ca5ade9662" alt="查看版本分支"></p>
</li>
<li><p>切换项目版本</p>
<pre class="line-numbers language-none"><code class="language-none">git checkout  release1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>查看当前项目的版本</p>
<pre class="line-numbers language-none"><code class="language-none">git branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>如果你要删除已命名的分支，执行下方代码</p>
<pre class="line-numbers language-none"><code class="language-none">git branch -d release1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>打开下方网址（下载<code>fabric-samples</code>目录下<code>bin</code>目录中所需要的文件）</p>
<pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;nexus.hyperledger.org&#x2F;content&#x2F;repositories&#x2F;releases&#x2F;org&#x2F;hyperledger&#x2F;fabric&#x2F;hyperledger-fabric<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>下载<code>hyperledger-fabric-linux-amd64-1.0.5.tar.gz</code>压缩包<br><img src="http://p1.pstatp.com/large/pgc-image/6214f3d1303b4ac8a09ef770175ecbeb" alt="下载Linux对应压缩包"></p>
<pre class="line-numbers language-none"><code class="language-none">wget https:&#x2F;&#x2F;nexus.hyperledger.org&#x2F;content&#x2F;repositories&#x2F;releases&#x2F;org&#x2F;hyperledger&#x2F;fabric&#x2F;hyperledger-fabric&#x2F;linux-amd64-1.0.5&#x2F;hyperledger-fabric-linux-amd64-1.0.5.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>解压到<code>fabric-samples</code>目录下</p>
<pre class="line-numbers language-none"><code class="language-none">tar -zxvf hyperledger-fabric-linux-amd64-1.0.5.tar.gz -C &#x2F;home&#x2F;go&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-samples<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><em><strong>第一种方式：</strong></em><br>start</p>
</li>
<li><p>下载<code>dockerimages</code>执行文件复制并在<code>fabric-samples</code>中创建bootstrap.sh<br><img src="http://p1.pstatp.com/large/pgc-image/212977dd9df94b388ce606c5757f8737" alt="执行init.sh文件"></p>
</li>
<li><p>在浏览器打开下方网站，复制该文件的内容到init.sh中（目的是下载fabric所需要的docker镜像）</p>
<pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;hyperledger&#x2F;fabric&#x2F;v1.0.5&#x2F;scripts&#x2F;bootstrap.sh <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>复制好之后，bootstrap.sh保存</p>
<pre class="line-numbers language-none"><code class="language-none">vim bootstrap.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>赋予权限</p>
<pre class="line-numbers language-none"><code class="language-none">chmod -R 777 bootstrap.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>运行文件（<code>1.0.5</code>是指定fabric的docker镜像版本）</p>
<pre class="line-numbers language-none"><code class="language-none">.&#x2F;bootstrap.sh 1.0.5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><em><strong>第二种方式：</strong></em></p>
<pre class="line-numbers language-none"><code class="language-none">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;hyperledger&#x2F;fabric&#x2F;master&#x2F;scripts&#x2F;bootstrap.sh
cat bootstrap.sh | bash -s 1.0.5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><em><strong>第三种方式：（需要kx上网）</strong></em></p>
<pre class="line-numbers language-none"><code class="language-none">curl -sSL https:&#x2F;&#x2F;goo.gl&#x2F;6wtTN5 | sudo bash -s 1.0.5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>end</p>
</li>
<li><p>进入<code>first-network</code>目录中</p>
<pre class="line-numbers language-none"><code class="language-none">cd first-network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="http://p1.pstatp.com/large/pgc-image/212977dd9df94b388ce606c5757f8737" alt="是否已经构建，如果构建关闭重新构建"></p>
</li>
<li><p>目录分析</p>
<blockquote>
<ul>
<li>.env：存储一些环境变量</li>
<li>base：存储docker-compose的一些公共服务</li>
<li>byfn.sh：执行脚本</li>
<li>configtx.yaml和crypto-config.yaml：根据之前生成的2个工具，生成相应的配置文件，用来启动网络，放到当前目录的channel-artifacts和crypto-config里面</li>
<li>dockper-compose：用于启动网络</li>
<li>scripts：存放测试脚本，做的事：创建通道、加入通道，安装链码，实例化链码，链码交互</li>
</ul>
</blockquote>
</li>
<li><p>关闭网络，自动清除配置和docker进程</p>
<pre class="line-numbers language-none"><code class="language-none">.&#x2F;byfn.sh -m down<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>执行以下命令构建网络</p>
<pre class="line-numbers language-none"><code class="language-none">.&#x2F;byfn.sh -m generate
#.&#x2F;byfn.sh -m generate -i 1.1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="1-生成创世区块"><a href="#1-生成创世区块" class="headerlink" title="1.  生成创世区块"></a>1.  生成创世区块</h3><ul>
<li>指定按照yaml文件生成配置（<code>crypto-config.yaml</code>：用于配置组织节点的个数）<pre class="line-numbers language-none"><code class="language-none">..&#x2F;bin&#x2F;cryptogen generate --config&#x3D;.&#x2F;crypto-config.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>在<code>first-network</code>目录下设置变量：（设置工作目录）<pre class="line-numbers language-none"><code class="language-none">export FABRIC_CFG_PATH&#x3D;$PWD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="http://p1.pstatp.com/large/pgc-image/564f2bd840c7446ab83270f033d1385f" alt="设置变量并创建初始区块"></li>
<li>生成系统链的创世区块：（<code>-profile</code>指定联盟配置，<code>outputBlock</code>指定存放的位置，<code>genesis.block</code>指整个网络的创世区块）<pre class="line-numbers language-none"><code class="language-none">..&#x2F;bin&#x2F;configtxgen -profile TwoOrgsOrdererGenesis -outputBlock .&#x2F;channel-artifacts&#x2F;genesis.block<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<h3 id="2-生成应用通道的配置信息"><a href="#2-生成应用通道的配置信息" class="headerlink" title="2.  生成应用通道的配置信息"></a>2.  生成应用通道的配置信息</h3><ul>
<li>生成通道的创世交易：<code>-profile</code>指定业务联盟，<code>-outputCreateChannelTx</code>指存放的路径，创建的名字叫<code>mychannel</code></li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">export CHANNEL_NAME&#x3D;mychannel
..&#x2F;bin&#x2F;configtxgen -profile TwoOrgsChannel -outputCreateChannelTx .&#x2F;channel-artifacts&#x2F;channelID $CHANNEL_NAME<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img src="http://p1.pstatp.com/large/pgc-image/68d104a6e300406589e14d373dbf7a39" alt="生成应用通道的配置信息"></p>
<h3 id="3-生成锚节点配置更新文件"><a href="#3-生成锚节点配置更新文件" class="headerlink" title="3. 生成锚节点配置更新文件"></a>3. 生成锚节点配置更新文件</h3><ul>
<li>生成两个组织锚节点的交易信息<pre class="line-numbers language-none"><code class="language-none">..&#x2F;bin&#x2F;configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate .&#x2F;channel-artifacts&#x2F;Org1MSPanchors.tx -channelID $CHANNEL_NAME -asOrg Org1MSP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">..&#x2F;bin&#x2F;configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate .&#x2F;channel-artifacts&#x2F;Org2MSPanchors.tx -channelID $CHANNEL_NAME -asOrg Org2MSP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<h2 id="操作网络"><a href="#操作网络" class="headerlink" title="操作网络"></a>操作网络</h2><hr>
<p>编辑<code>docker-compose-cli.yaml</code>，注释<code>command</code>命令</p>
<pre class="line-numbers language-none"><code class="language-none">vim docker-compose-cli.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>运行<code>docker-compose-cli.yaml</code><br><img src="http://p1.pstatp.com/large/pgc-image/cd82e418313647eb844ba63de6dca17a" alt="image.png"></p>
<pre class="line-numbers language-none"><code class="language-none">CHANNEL_NAME&#x3D;$CHANNEL_NAME TIMEOUT&#x3D;600 docker-compose -f docker-compose-cli.yaml up -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="1-创建和加入通道"><a href="#1-创建和加入通道" class="headerlink" title="1. 创建和加入通道"></a>1. 创建和加入通道</h3><ul>
<li><p>与客户端交互操作</p>
<pre class="line-numbers language-none"><code class="language-none">docker exec -it cli bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>创建通道（<code>-o</code>指定与哪个orderer节点通信，<code>-c</code>指定创建的通道名称，<code>-f</code>指定使用的文件）</p>
<pre class="line-numbers language-none"><code class="language-none">export CHANNEL_NAME&#x3D;mychannel
peer channel create -o orderer.example.com:7050 -c $CHANNEL_NAME -f .&#x2F;channel-artifacts&#x2F;channel.tx --tls $CORE_PEER_TLS_ENABLED --cafile &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img src="http://p1.pstatp.com/large/pgc-image/7bdfed4ff04c4def82c18291c8b818dd" alt="image.png"></p>
</li>
<li><p>查看orderer节点的运行日志</p>
<pre class="line-numbers language-none"><code class="language-none">docker logs orderer.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>加入通道</p>
<pre class="line-numbers language-none"><code class="language-none">peer channel join -b mychannel.block<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>查看peer加入的通道列表</p>
<pre class="line-numbers language-none"><code class="language-none">peer channel list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<h3 id="2-安装并实例化链码"><a href="#2-安装并实例化链码" class="headerlink" title="2.  安装并实例化链码"></a>2.  安装并实例化链码</h3><hr>
<ul>
<li>安装链码（<code>-n</code>指定链码安装的名字，<code>-v</code>指定version，<code>-l</code>指定使用语言，<code>-p</code>指定安装链码的所在路径）<pre class="line-numbers language-none"><code class="language-none">peer chaincode install -n mycc -v 1.0 -p github.com&#x2F;hyperledger&#x2F;fabric&#x2F;examples&#x2F;chaincode&#x2F;go&#x2F;chaincode_example02<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>实例化链码<pre class="line-numbers language-none"><code class="language-none">peer chaincode instantiate \
-o orderer.example.com:7050 \
--tls $CORE_PEER_TLS_ENABLED \
--cafile &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem \
-C $CHANNEL_NAME \
-n mycc \
-v 1.0 \
-c  &#39;&#123;&quot;Args&quot;:[&quot;init&quot;,&quot;a&quot;,&quot;100&quot;,&quot;b&quot;,&quot;200&quot;]&#125;&#39; \
-P &quot;OR    (&#39;Org1MSP.member&#39;,&#39;Org2MSP.member&#39;)&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>查询<pre class="line-numbers language-none"><code class="language-none">peer chaincode query -C $CHANNEL_NAME -n mycc -c &#39;&#123;&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="http://p1.pstatp.com/large/pgc-image/558236b06391421aae54e49fe9d7acac" alt="查询结果"></li>
<li>转账<pre class="line-numbers language-none"><code class="language-none">peer chaincode invoke \
-o orderer.example.com:7050 \
--tls $CORE_PEER_TLS_ENABLED \
--cafile &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem \
-C $CHANNEL_NAME \
-n mycc \
-c &#39;&#123;&quot;Args&quot;:[&quot;invoke&quot;,&quot;a&quot;,&quot;b&quot;,&quot;10&quot;]&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
点击<code>exit</code>退出<code>docker</code>容器<pre class="line-numbers language-none"><code class="language-none">.&#x2F;byfn.sh -m down<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<h2 id="参数说明：-o：指定order服务节点地址-–tls：是否开启TLS验证-–cafile：指定TLS-CA证书的所在路径-C：指定通道名称-n：指定链码名称-c：指定调用链码的所需参数-p：指定安装链码的所在路径-P：指定背书策略-Node-js和fabcar交互"><a href="#参数说明：-o：指定order服务节点地址-–tls：是否开启TLS验证-–cafile：指定TLS-CA证书的所在路径-C：指定通道名称-n：指定链码名称-c：指定调用链码的所需参数-p：指定安装链码的所在路径-P：指定背书策略-Node-js和fabcar交互" class="headerlink" title="###参数说明：- -o：指定order服务节点地址- –tls：是否开启TLS验证- –cafile：指定TLS_CA证书的所在路径- -C：指定通道名称- -n：指定链码名称- -c：指定调用链码的所需参数- -p：指定安装链码的所在路径- -P：指定背书策略#Node.js和fabcar交互"></a>###参数说明：<br>- -o：指定order服务节点地址<br>- –tls：是否开启TLS验证<br>- –cafile：指定TLS_CA证书的所在路径<br>- -C：指定通道名称<br>- -n：指定链码名称<br>- -c：指定调用链码的所需参数<br>- -p：指定安装链码的所在路径<br>- -P：指定背书策略<br>#Node.js和fabcar交互</h2><h2 id="进入fabric-samples目录下的fabcar目录中查看package-json文件-Fabcar启动"><a href="#进入fabric-samples目录下的fabcar目录中查看package-json文件-Fabcar启动" class="headerlink" title="进入fabric-samples目录下的fabcar目录中查看package.json文件## Fabcar启动"></a>进入<code>fabric-samples</code>目录下的<code>fabcar</code>目录中<br><pre class="line-numbers language-none"><code class="language-none">cd fabric-samples&#x2F;fabcar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>查看<code>package.json</code>文件<br><img src="http://p1.pstatp.com/large/pgc-image/6b61b325d2c043b19ee736be236324bc" alt="查看`package.json`文件"><br><pre class="line-numbers language-none"><code class="language-none">cat package.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>## Fabcar启动</h2><ul>
<li>进入first-network中执行<pre class="line-numbers language-none"><code class="language-none">.&#x2F;byfn.sh -m down<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>关闭活跃容器<pre class="line-numbers language-none"><code class="language-none">docker rm -f  $(docker ps -a)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>清理缓存的网络<pre class="line-numbers language-none"><code class="language-none">docker network prune<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>删除fabcar智能合约的底层链码图像，如果是第一次运行这个项目可以不执行（可以通过 docker  images来查询需要删除的镜像）<pre class="line-numbers language-none"><code class="language-none">docker rmi dev-peer0.org1.example.com-fabcar-1.0-5c906e402ed29f20260ae42283216aa75549c571e2e380f3615826365d8269ba<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>在<code>fabcar</code>目录中安装客户端<pre class="line-numbers language-none"><code class="language-none">npm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="http://p1.pstatp.com/large/pgc-image/54542927eb3c4ca8ae8e809a018a86e2" alt="npm install 中1"><br><img src="http://p1.pstatp.com/large/pgc-image/54542927eb3c4ca8ae8e809a018a86e2" alt="npm install 中2"></li>
<li>启动网络<pre class="line-numbers language-none"><code class="language-none">.&#x2F;startFabric.sh  node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="http://p1.pstatp.com/large/pgc-image/9559029fbff84d028fea1cf95e2dbd7a" alt="./startFabric.sh  node"></li>
<li>执行完成后，注册管理用户（首先应用的admin用户应该向ca-server发送一个证书登记请求，接受一个对于这个user的登记证书（eCert），后续我们会根据使用这个admin注册和认证一个新的user）<pre class="line-numbers language-none"><code class="language-none">node enrollAdmin.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="http://p1.pstatp.com/large/pgc-image/9559029fbff84d028fea1cf95e2dbd7a" alt="node encrollAdmin.js运行成功"></li>
<li>实现registerUser.js，生成用户账户（创建一个普通用户user1，这个用户用来查询和更新账本。admin用户身份用来创建user1用户）<pre class="line-numbers language-none"><code class="language-none">node registerUser.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="http://p1.pstatp.com/large/pgc-image/8e7e27a0b538467aa85ca6a1f71a2f29" alt="node registerUser.js运行成功"></li>
<li>现在我们可以运行JavaScript程序。首先，运行query.js 程序，返回账本上所有汽车列表。应用程序中预先加载了一个queryAllCars函数，用于查询所有车辆，因此我们可以简单地运行程序：<pre class="line-numbers language-none"><code class="language-none">node query.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="http://p1.pstatp.com/large/pgc-image/8279337eed6e41238d6a8020541825a3" alt="node query.js运行成功"></li>
<li>如果想返回某个车辆信息，编辑query.js，我们将函数<code>queryAllCars</code>更改为<code>queryCar</code>并将特定的“Key” 传递给args参数。在这里，我们使用<code>CAR4</code>。 所以我们编辑后的query.js程序现在应该包含以下内容：</li>
</ul>
<p><img src="http://p1.pstatp.com/large/pgc-image/8279337eed6e41238d6a8020541825a3" alt="编辑query.js"></p>
<ul>
<li>重新运行query.js<pre class="line-numbers language-none"><code class="language-none">node query.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="http://p1.pstatp.com/large/pgc-image/4a072657521b4eba9272c1497fdc9875" alt="image.png"></li>
</ul>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><hr>
<ol>
<li>运行<code>./byfn.sh -m down</code>出现错误的解决方法：<pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;segmentfault.com&#x2F;a&#x2F;1190000014221967<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>执行<code>node registerUser.js </code>出现错误：<code>Failed to register: Error: fabric-ca request register failed with errors [[&#123;&quot;code&quot;:0,&quot;message&quot;:&quot;No identity type provided. Please provide identity type&quot;&#125;]]</code><br><img src="http://p1.pstatp.com/large/pgc-image/3edeefe1819e48c29622f83a027829c8" alt="执行`node registerUser.js `出现错误"></li>
</ol>
<ul>
<li>大概的意思是需要我们提供一个可验证的type。 只需编辑 <code>node registerUser.js </code>文件<pre class="line-numbers language-none"><code class="language-none">vim registerUser.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>把<code>returnfabric_ca_client.register(&#123;enrollmentID: &#39;user1&#39;, affiliation:&#39;org1.department1&#39;&#125;, admin_user);</code>替换为下方代码<pre class="line-numbers language-none"><code class="language-none">returnfabric_ca_client.register(&#123;enrollmentID: &#39;user1&#39;, affiliation:&#39;org1.department1&#39;,role: &#39;client&#39;&#125;, admin_user);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="http://p1.pstatp.com/large/pgc-image/615e91e3eb134b6fadeea55a5e49a1e6" alt=" node registerUser.js替换"></li>
<li>点击保存重新运行即可</li>
</ul>
<ol start="3">
<li>设置<code>marbles . step 4 error error: Caught exception: TypeError: Cannot read property &#39;getConnectivityState&#39; of undefined</code>出错<pre class="line-numbers language-none"><code class="language-none">npm uninstall grpc
rm -rf node_modules&#x2F;
npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><img src="http://p1.pstatp.com/large/pgc-image/430c83ad81004198bce8ef787e12d74d" alt="node registerUser.js"><br><img src="http://p1.pstatp.com/large/pgc-image/38c4162040b24bbbaeb398ac5be46c0a" alt="image.png"></li>
</ol>
<p><img src="http://p1.pstatp.com/large/pgc-image/dbf34b18c1a744a18b4df1fa8f57b500" alt="image.png"></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><hr>
<pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;github.com&#x2F;IBM-Blockchain&#x2F;marbles&#x2F;blob&#x2F;master&#x2F;docs&#x2F;use_local_hyperledger.md
https:&#x2F;&#x2F;hyperledger-fabric.readthedocs.io&#x2F;en&#x2F;release-1.0&#x2F;chaincode4noah.html
https:&#x2F;&#x2F;hyperledger-fabric.readthedocs.io&#x2F;en&#x2F;release-1.0&#x2F;write_first_app.html
https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_27348837&#x2F;article&#x2F;details&#x2F;87362268<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>Hyperledger</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
        <tag>hyperledger</tag>
      </tags>
  </entry>
  <entry>
    <title>PBFT，Raft，PoW，PoS，DPoS，Ripple共识讲解</title>
    <url>/2018-12-15-consensus-algorithm2/</url>
    <content><![CDATA[<h2 id="BFT：Byzantine-Fault-Tolerance，拜占庭容错技术"><a href="#BFT：Byzantine-Fault-Tolerance，拜占庭容错技术" class="headerlink" title="BFT：Byzantine Fault Tolerance，拜占庭容错技术"></a>BFT：Byzantine Fault Tolerance，拜占庭容错技术</h2><hr>
<p>拜占庭容错技术（Byzantine Fault Tolerance，BFT）是一类分布式计算领域的容错技术。拜占庭假设是对现实世界的模型化，由于硬件错误、网络拥塞或中断以及遭到恶意攻击等原因，计算机和网络可能出现不可预料的行为。拜占庭容错技术被设计用来处理这些异常行为，并满足所要解决的问题的规范要求。</p>
<p>在分布式系统中，特别是在区块链网络环境中，也和拜占庭将军的环境类似，有运行正常的服务器（类似忠诚的拜占庭将军），有故障的服务器，还有破坏者的服务器（类似叛变的拜占庭将军）。共识算法的核心是在正常的节点间形成对网络状态的共识。</p>
<p>通常，这些发生故障节点被称为<strong>拜占庭节点</strong>，而正常的节点即为<strong>非拜占庭节点</strong>。</p>
<span id="more"></span>
<p>拜占庭容错系统是一个拥有n台节点的系统，整个系统对于每一个请求，满足以下条件：</p>
<ol>
<li>所有非拜占庭节点使用相同的输入信息，产生同样的结果；</li>
<li>如果输入的信息正确，那么所有非拜占庭节点必须接收这个信息，并计算相应的结果。</li>
</ol>
<p>拜占庭系统普遍采用的假设条件包括：</p>
<ol>
<li>拜占庭节点的行为可以是任意的，拜占庭节点之间可以共谋；</li>
<li>节点之间的错误是不相关的；</li>
<li>节点之间通过异步网络连接，网络中的消息可能丢失、乱序并延时到达，但大部分协议假设消息在有限的时间里能传达到目的地；</li>
<li>服务器之间传递的信息，第三方可以嗅探到，但是不能篡改、伪造信息的内容和验证信息的完整性。</li>
</ol>
<h2 id="原始的拜占庭容错系统由于需要展示其理论上的可行性而缺乏实用性。另外，还需要额外的时钟同步机制支持，算法的复杂度也是随节点增加而指数级增加。-PBFT：Practical-Byzantine-Fault-Tolerance，实用拜占庭容错算法。"><a href="#原始的拜占庭容错系统由于需要展示其理论上的可行性而缺乏实用性。另外，还需要额外的时钟同步机制支持，算法的复杂度也是随节点增加而指数级增加。-PBFT：Practical-Byzantine-Fault-Tolerance，实用拜占庭容错算法。" class="headerlink" title="原始的拜占庭容错系统由于需要展示其理论上的可行性而缺乏实用性。另外，还需要额外的时钟同步机制支持，算法的复杂度也是随节点增加而指数级增加。## PBFT：Practical Byzantine Fault Tolerance，实用拜占庭容错算法。"></a>原始的拜占庭容错系统由于需要展示其理论上的可行性而<strong>缺乏实用性</strong>。另外，还<strong>需要额外的时钟同步机制支持</strong>，<strong>算法的复杂度也是随节点增加而指数级增加</strong>。<br>## PBFT：Practical Byzantine Fault Tolerance，实用拜占庭容错算法。</h2><p>实用拜占庭容错系统（PBFT）降低了拜占庭协议的运行复杂度，从指数级别降低到多项式级别（Polynomial），使拜占庭协议在分布式系统中应用成为可能。</p>
<p>PBFT是一种状态机副本复制算法，即服务作为状态机进行建模，状态机在分布式系统的不同节点进行副本复制。每个状态机的副本都保存了服务的状态，同时也实现了服务的操作。将所有的副本组成的集合使用大写字母R表示，使用0到|R|-1的整数表示每一个副本。为了描述方便，通常假设故障节点数为m个，整个服务节点数为|R|&#x3D;3m+1个，这里m是有可能失效的副本的最大个数。尽管可以存在多于3m+1个副本，但是额外的副本除了降低性能之外不能提高可靠性。</p>
<p>PBFT要求共同维护一个状态，所有节点采取的行动一致。为此，需要运行三类基本协议，包括一致性协议、检查点协议和视图更换协议。我们主要关注支持系统日常运行的一致性协议。一致性协议至少包含若干个阶段：请求（request）、序号分配（pre-prepare）和响应（reply）。根据协议设计的不同，可能包含相互交互（prepare），序号确认（commit）等阶段。<br><img src="http://upload-images.jianshu.io/upload_images/5946072-d26d540dc5b5a63c.png" alt="PBFT协议通信模式"></p>
<p>上图为PBFT协议通信模式，每一个客户端的请求需要经过5个阶段，通过采用两次两两交互的方式在服务器达成一致之后再执行客户端的请求。由于客户端不能从服务器端获得任何服务器运行状态的信息，PBFT中主节点是否发生错误只能由服务器监测。如果服务器在一段时间内都不能完成客户端的请求，则会触发视图更换协议。其中C为客户端，N<sub>0</sub>~N<sub>3</sub>表示服务节点，特别的，N<sub>0</sub>为主节点，N<sub>3</sub>为故障节点。整个协议的基本过程如下：</p>
<ol>
<li>客户端发送请求，激活主节点的服务操作。</li>
<li>当主节点接收请求后，启动三阶段的协议以向各从节点广播请求。<blockquote>
<ul>
<li>序号分配阶段，主节点给请求赋值一个序列号n，广播序号分配消息和客户端的请求消息m，并将构造PRE-PREPARE消息给各从节点；</li>
<li>交互阶段，从节点接收PRE-PREPARE消息，向其他服务节点广播PREPARE消息；</li>
<li>序号确认阶段，各节点对视图内的请求和次序进行验证后，广播COMMIT消息，执行收到的客户端的请求并给客户端以响应。</li>
</ul>
</blockquote>
</li>
<li>客户端等待来自不同节点的响应，若有m+1个响应相同，则该响应即为运算的结果。<br>　　PBFT在很多场景都有应用，在区块链场景中，一般适合于对强一致性有要求的私有链和联盟链场景。例如，在IBM主导的区块链超级账本项目中，PBFT是一个可选的共识协议。在Hyperledger的Fabric项目中，共识模块被设计成可插拔的模块，支持像PBFT、Raft等共识算法。</li>
</ol>
<h2 id="Raft协议"><a href="#Raft协议" class="headerlink" title="Raft协议"></a>Raft协议</h2><hr>
<p>　　在某些分布式系统的实用场景下，其假设条件不需要考虑拜占庭故障，而只是处理一般的死机故障。在这种情况下，采用Paxos等协议会更加高效。Paxos是Lamport设计的保持分布式系统一致性的协议。但由于Paxos非常复杂，比较难以理解，因此后来出现了各种不同的实现和变种。Raft是由Stanford提出的一种更易理解的一致性算法，意在取代目前广为使用的Paxos算法。目前，在各种主流语言中都有了一些开源实现，比如本文中将使用的基于JGroups的Raft协议实现。</p>
<p>　　Raft最初是一个用于管理复制日志的共识算法，它是一个为真实世界应用建立的协议，主要注重协议的落地性和可理解性。Raft是在非拜占庭故障下达成共识的强一致协议。</p>
<p>　　在区块链系统中，使用Raft实现记账共识的过程可以描述如下：首先选举一个leader，接着赋予leader完全的权力管理记账。leader从客户端接收记账请求，完成记账操作，生成区块，并复制到其他记账节点。有了leader简化了记账操作的管理。例如，leader能够决定是否接受新的交易记录项而无需考虑其他的记账节点，leader可能失效或与其他节点失去联系，这时，系统就会选出新的leader。</p>
<h2 id="在Raft中，每个结点会处于下面三种状态中的一种：-follower：所有结点都以follower的状态开始。如果没收到leader消息则会变成candidate状态-candidate：会向其他结点“拉选票”，如果得到大部分的票则成为leader。这个过程就叫做Leader选举-Leader-Election-leader：所有对系统的修改都会先经过leader。每个修改都会写一条日志-log-entry-。leader收到修改请求后的过程如下，这个过程叫做日志复制-Log-Replication-：-复制日志到所有follower结点-replicate-entry-大部分结点响应时才提交日志-通知所有follower结点日志已提交-所有follower也提交日志-现在整个系统处于一致的状态Raft阶段主要分为两个，首先是leader选举过程，然后在选举出来的leader基础上进行正常操作，比如日志复制、记账等。-1-Leader-Election-当follower在选举超时时间内未收到leader的心跳消息，则转换为candidate状态。为了避免选举冲突，这个超时时间是一个150-300ms之间的随机数。-一般而言，在Raft系统中：-1）任何一个服务器都可以成为一个候选者candidate，它向其他服务器follower发出要求选举自己的请求。-2）其他服务器同意了，发出OK。注意，如果在这个过程中，有一个follower宕机，没有收到请求选举的要求，此时候选者可以自己选自己，只要达到N-2-1的大多数票，候选人还是可以成为leader的。-3）这样这个候选者就成为了leader领导人，它可以向选民也就是follower发出指令，比如进行记账。-4）以后通过心跳进行记账的通知。-5）一旦这个leader崩溃了，那么follower中有一个成为候选者，并发出邀票选举。-6）follower同意后，其成为leader，继续承担记账等指导工作。-2-Log-Replication-Raft的记账过程按以下步骤完成：-1）假设leader领导人已经选出，这时客户端发出增加一个日志的要求；-2）leader要求follower遵从他的指令，都将这个新的日志内容追加到他们各自日志中；-3）大多数follower服务器将交易记录写入账本后，确认追加成功，发出确认成功信息；-4）在下一个心跳中，leader会通知所有follower更新确认的项目。-对于每个新的交易记录，重复上述过程。-在这一过程中，若发生网络通信故障，使得leader不能访问大多数follower了，那么leader只能正常更新它能访问的那些follower服务器。而大多数的服务器follower因为没有了leader，他们将重新选举一个候选者作为leader，然后这个leader作为代表与外界打交道，如果外界要求其添加新的交易记录，这个新的leader就按上述步骤通知大多数follower。当网络通信恢复，原先的leader就变成follower，在失联阶段，这个老leader的任何更新都不能算确认，必须全部回滚，接收新的leader的新的更新。-POW：Proof-of-Work，工作证明。"><a href="#在Raft中，每个结点会处于下面三种状态中的一种：-follower：所有结点都以follower的状态开始。如果没收到leader消息则会变成candidate状态-candidate：会向其他结点“拉选票”，如果得到大部分的票则成为leader。这个过程就叫做Leader选举-Leader-Election-leader：所有对系统的修改都会先经过leader。每个修改都会写一条日志-log-entry-。leader收到修改请求后的过程如下，这个过程叫做日志复制-Log-Replication-：-复制日志到所有follower结点-replicate-entry-大部分结点响应时才提交日志-通知所有follower结点日志已提交-所有follower也提交日志-现在整个系统处于一致的状态Raft阶段主要分为两个，首先是leader选举过程，然后在选举出来的leader基础上进行正常操作，比如日志复制、记账等。-1-Leader-Election-当follower在选举超时时间内未收到leader的心跳消息，则转换为candidate状态。为了避免选举冲突，这个超时时间是一个150-300ms之间的随机数。-一般而言，在Raft系统中：-1）任何一个服务器都可以成为一个候选者candidate，它向其他服务器follower发出要求选举自己的请求。-2）其他服务器同意了，发出OK。注意，如果在这个过程中，有一个follower宕机，没有收到请求选举的要求，此时候选者可以自己选自己，只要达到N-2-1的大多数票，候选人还是可以成为leader的。-3）这样这个候选者就成为了leader领导人，它可以向选民也就是follower发出指令，比如进行记账。-4）以后通过心跳进行记账的通知。-5）一旦这个leader崩溃了，那么follower中有一个成为候选者，并发出邀票选举。-6）follower同意后，其成为leader，继续承担记账等指导工作。-2-Log-Replication-Raft的记账过程按以下步骤完成：-1）假设leader领导人已经选出，这时客户端发出增加一个日志的要求；-2）leader要求follower遵从他的指令，都将这个新的日志内容追加到他们各自日志中；-3）大多数follower服务器将交易记录写入账本后，确认追加成功，发出确认成功信息；-4）在下一个心跳中，leader会通知所有follower更新确认的项目。-对于每个新的交易记录，重复上述过程。-在这一过程中，若发生网络通信故障，使得leader不能访问大多数follower了，那么leader只能正常更新它能访问的那些follower服务器。而大多数的服务器follower因为没有了leader，他们将重新选举一个候选者作为leader，然后这个leader作为代表与外界打交道，如果外界要求其添加新的交易记录，这个新的leader就按上述步骤通知大多数follower。当网络通信恢复，原先的leader就变成follower，在失联阶段，这个老leader的任何更新都不能算确认，必须全部回滚，接收新的leader的新的更新。-POW：Proof-of-Work，工作证明。" class="headerlink" title="在Raft中，每个结点会处于下面三种状态中的一种：*   follower：所有结点都以follower的状态开始。如果没收到leader消息则会变成candidate状态*   candidate：会向其他结点“拉选票”，如果得到大部分的票则成为leader。这个过程就叫做Leader选举(Leader Election)*   leader：所有对系统的修改都会先经过leader。每个修改都会写一条日志(log entry)。leader收到修改请求后的过程如下，这个过程叫做日志复制(Log Replication)：     *   复制日志到所有follower结点(replicate entry)    *   大部分结点响应时才提交日志    *   通知所有follower结点日志已提交    *   所有follower也提交日志    *   现在整个系统处于一致的状态Raft阶段主要分为两个，首先是leader选举过程，然后在选举出来的leader基础上进行正常操作，比如日志复制、记账等。### 1.Leader Election　　　当follower在选举超时时间内未收到leader的心跳消息，则转换为candidate状态。为了避免选举冲突，这个超时时间是一个150~300ms之间的随机数。　　一般而言，在Raft系统中：　　1）任何一个服务器都可以成为一个候选者candidate，它向其他服务器follower发出要求选举自己的请求。　　2）其他服务器同意了，发出OK。注意，如果在这个过程中，有一个follower宕机，没有收到请求选举的要求，此时候选者可以自己选自己，只要达到N&#x2F;2+1的大多数票，候选人还是可以成为leader的。　　3）这样这个候选者就成为了leader领导人，它可以向选民也就是follower发出指令，比如进行记账。　　4）以后通过心跳进行记账的通知。　　5）一旦这个leader崩溃了，那么follower中有一个成为候选者，并发出邀票选举。　　6）follower同意后，其成为leader，继续承担记账等指导工作。### 2.Log Replication　　Raft的记账过程按以下步骤完成：　　1）假设leader领导人已经选出，这时客户端发出增加一个日志的要求；　　2）leader要求follower遵从他的指令，都将这个新的日志内容追加到他们各自日志中；　　3）大多数follower服务器将交易记录写入账本后，确认追加成功，发出确认成功信息；　　4）在下一个心跳中，leader会通知所有follower更新确认的项目。　　对于每个新的交易记录，重复上述过程。　　在这一过程中，若发生网络通信故障，使得leader不能访问大多数follower了，那么leader只能正常更新它能访问的那些follower服务器。而大多数的服务器follower因为没有了leader，他们将重新选举一个候选者作为leader，然后这个leader作为代表与外界打交道，如果外界要求其添加新的交易记录，这个新的leader就按上述步骤通知大多数follower。当网络通信恢复，原先的leader就变成follower，在失联阶段，这个老leader的任何更新都不能算确认，必须全部回滚，接收新的leader的新的更新。## POW：Proof of Work，工作证明。"></a>在Raft中，每个结点会处于下面三种状态中的一种：<br>*   follower：所有结点都以follower的状态开始。如果没收到leader消息则会变成candidate状态<br>*   candidate：会向其他结点“拉选票”，如果得到大部分的票则成为leader。这个过程就叫做Leader选举(Leader Election)<br>*   leader：所有对系统的修改都会先经过leader。每个修改都会写一条日志(log entry)。leader收到修改请求后的过程如下，这个过程叫做日志复制(Log Replication)： <br>    *   复制日志到所有follower结点(replicate entry)<br>    *   大部分结点响应时才提交日志<br>    *   通知所有follower结点日志已提交<br>    *   所有follower也提交日志<br>    *   现在整个系统处于一致的状态<br><strong>Raft阶段主要分为两个，首先是leader选举过程，然后在选举出来的leader基础上进行正常操作，比如日志复制、记账等。</strong><br>### 1.Leader Election　<br>　　当follower在选举超时时间内未收到leader的心跳消息，则转换为candidate状态。为了避免选举冲突，这个超时时间是一个150~300ms之间的随机数。<br>　　一般而言，在Raft系统中：<br>　　1）任何一个服务器都可以成为一个候选者candidate，它向其他服务器follower发出要求选举自己的请求。<br>　　2）其他服务器同意了，发出OK。注意，如果在这个过程中，有一个follower宕机，没有收到请求选举的要求，此时候选者可以自己选自己，只要达到N&#x2F;2+1的大多数票，候选人还是可以成为leader的。<br>　　3）这样这个候选者就成为了leader领导人，它可以向选民也就是follower发出指令，比如进行记账。<br>　　4）以后通过心跳进行记账的通知。<br>　　5）一旦这个leader崩溃了，那么follower中有一个成为候选者，并发出邀票选举。<br>　　6）follower同意后，其成为leader，继续承担记账等指导工作。<br>### 2.Log Replication<br>　　Raft的记账过程按以下步骤完成：<br>　　1）假设leader领导人已经选出，这时客户端发出增加一个日志的要求；<br>　　2）leader要求follower遵从他的指令，都将这个新的日志内容追加到他们各自日志中；<br>　　3）大多数follower服务器将交易记录写入账本后，确认追加成功，发出确认成功信息；<br>　　4）在下一个心跳中，leader会通知所有follower更新确认的项目。<br>　　对于每个新的交易记录，重复上述过程。<br>　　在这一过程中，若发生网络通信故障，使得leader不能访问大多数follower了，那么leader只能正常更新它能访问的那些follower服务器。而大多数的服务器follower因为没有了leader，他们将重新选举一个候选者作为leader，然后这个leader作为代表与外界打交道，如果外界要求其添加新的交易记录，这个新的leader就按上述步骤通知大多数follower。当网络通信恢复，原先的leader就变成follower，在失联阶段，这个老leader的任何更新都不能算确认，必须全部回滚，接收新的leader的新的更新。<br>## POW：Proof of Work，工作证明。</h2><p>　　从去中心化账本系统的角度看，每个加入这个系统的节点都要保存一份完整的账本，但每个节点却不能同时记账，因为节点处于不同的环境，接收到不同的信息，如果同时记账的话，必然会导致账本的不一致，造成混乱。因此，需要有共识来达成哪个节点有权记账。比特币区块链通过竞争记账的方式解决去中心化的记账系统的一致性问题, 即以每个节点的计算能力即“算力”来竞争记账权的机制。　<br>　　在比特币系统中，大约每10分钟进行一轮算力竞赛，竞赛的胜利者，就获得一次记账的权力，并向其他节点同步新增账本信息。然而，在一个去中心化的系统中，谁有权判定竞争的结果呢？比特币系统是通过一个称为“工作量证明”（Proof of Work，PoW）的机制完成的。<br>　　简单地说，PoW就是一份确认工作端做过一定量工作的证明。PoW系统的主要特征是计算的不对称性。工作端需要做一定难度的工作得出一个结果，验证方却很容易通过结果来检查工作端是不是做了相应的工作。<br>　　举个例子，给定字符串“blockchain”，我们给出的工作量要求是，可以在这个字符串后面连接一个称为nonce的整数值串，对连接后的字符串进行SHA256哈希运算，如果得到的哈希结果（以十六进制的形式表示）是以若干个0开头的，则验证通过。为了达到这个工作量证明的目标，我们需要不停地递增nonce值，对得到的新字符串进行SHA256哈希运算。按照这个规则，需要经过2688次计算才能找到前3位均为0的哈希值，而要找到前6位均为0的哈希值，则需进行620969次计算。</p>
<pre class="line-numbers language-none"><code class="language-none">1 blockchain1 → 4bfb943cba9fb9926df93f33c17d64b378d56714e8a29c6ba8bdc9690cea8e27  
2 blockchain2 → 01181212a283e760929f6b1628d903127c65e6fb5a9ad7fe94b790e699269221 ……
3 blockchain515 → 0074448bea8027bebd6333d3aa12fd11641e051911c5bab661a9b849b83958a7……
4 blockchain2688 → 0009b257eb8cf9eba179ab2be74d446fa1c59f0adfa8814260f52ae0016dd50f……
5 blockchain48851: 00000b3d96b4db1a976d3a69829aabef8bafa35ab5871e084211a16d3a4f385c……
6 blockchain6200969: 000000db7fa334aef754b51792cff6c880cd286c5f490d5cf73f658d9576d424<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>　　通过上面这个计算特定SHA256运算结果的示例，我们对PoW机制有了一个初步的理解。对于特定字符串后接随机nonce值所构成的串，要找到这样的nonce值，满足前n位均为0的SHA256值，需要多次进行哈希值的计算。一般来说，n值越大，需要完成的哈希计算量也越大。由于哈希值的伪随机特性，要寻找4个前导0的哈希值，预期大概要进行2<sup>16</sup>次尝试，这个数学期望的计算次数，就是所要求的“工作量”。<br>　　比特币网络中任何一个节点，如果想生成一个新的区块并写入区块链，必须解出比特币网络出的PoW问题。这道题关键的3个要素是工作量证明函数、区块及难度值。工作量证明函数是这道题的计算方法，区块决定了这道题的输入数据，难度值决定了这道题所需要的计算量。</p>
<p><strong>1. 工作量证明函数 及 区块数据计算过程</strong></p>
<p>　　比特币系统中使用的工作量证明函数就是<strong>SHA256</strong><br>　　比特币区块结构如下图所示：<br><img src="http://upload-images.jianshu.io/upload_images/5946072-7a1781344be7233a.png" alt="比特币区块结构"><br>　　比特币的区块由区块头及该区块所包含的交易列表组成。区块头的大小为80字节，由4字节的版本号、32字节的上一个区块的哈希值、32字节的Merkle根哈希值、4字节的时间戳（当前时间）、4字节的当前难度值、4字节的随机数组成。区块包含的交易列表则附加在区块头后面，其中的第一笔交易是coinbase交易，这是一笔为了让矿工获得奖励及手续费的特殊交易。<br>　　拥有80字节固定长度的区块头，就是用于比特币工作量证明的输入字符串。因此，为了使区块头能体现区块所包含的所有交易，在区块的构造过程中，需要将该区块要包含的交易列表，通过<strong>Merkle树算法</strong>生成Merkle根哈希值，并以此作为交易列表的哈希值存到区块头中。其中Merkle树的算法图解如下图所示。<br>　　<img src="http://upload-images.jianshu.io/upload_images/5946072-e40cffab41b1c41c.png" alt="Merkle树的算法图解"><br>　　上图展示了一个具有4个交易记录的Merkle树的根哈希值的计算过程。首先以这4个交易作为叶子结点构造一棵完全二叉树，然后通过哈希值的计算，将这棵二叉树转化为Merkle树。<br>首先对4个交易记录：Txa<del>Txc，分别计算各自的哈希值H<sub>A</sub></del>H<sub>C</sub>，然后计算两个中间节点的哈希值H<sub>AB</sub>&#x3D;Hash（H<sub>A</sub>+H<sub>B</sub>）和H<sub>CD</sub>&#x3D;Hash（H<sub>C</sub>+H<sub>D</sub>），最后计算出根节点的哈希值H<sub>ABCD</sub>&#x3D;Hash（H<sub>AB</sub>+H<sub>CD</sub>）。<br> <img src="http://upload-images.jianshu.io/upload_images/5946072-3b85d8b9bffcc006.png" alt="简化的区块链结构"><br>　　而构造出来的简化的区块链结构如上图所示。We find that: 所有在给定时间范围需要记录的交易信息被构造成一个Merkle树，区块中包含了指向这个Merkle树的哈希指针，关联了与该区块相关的交易数据，同时，区块中也包含了指向前一区块的哈希指针，使得记录了不同交易的单个区块被关联起来，形成区块链。<br><strong>2. 挖矿难度</strong><br>　　难度值是比特币系统中的节点在生成区块时的重要参考指标，它决定了节点大约需要经过多少次哈希运算才能产生一个合法的区块。比特币的区块大约每10分钟生成一个，如果要在不同的全网算力条件下，新区块的产生都基本保持这个速率，难度值必须根据全网算力的变化进行调整。简单地说，难度值被设定在无论节点计算能力如何，新区块产生速率都保持在每10分钟一个。<br>　　难度的调整是在每个完整节点中独立自动发生的。每2016个区块，所有节点都会按统一的公式自动调整难度，这个公式是由最新2016个区块的花费时长与期望时长（期望时长为20160分钟，即两周，是按每10分钟一个区块的产生速率计算出的总时长）比较得出的，根据实际时长与期望时长的比值，进行相应调整（或变难或变易）。也就是说，如果区块产生的速率比10分钟快则增加难度，比10分钟慢则降低难度。　<br>　　这个公式可以总结为：<strong>新难度值&#x3D;旧难度值×（过去2016个区块花费时长&#x2F;20160分钟）</strong><br>　　工作量证明需要有一个目标值。比特币工作量证明的目标值（Target）的计算公式：<strong>目标值&#x3D;最大目标值&#x2F;难度值</strong><br>　　其中最大目标值为一个恒定值：0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF<br>　　目标值的大小与难度值成反比。比特币工作量证明的达成就是矿工计算出来的区块哈希值必须小于目标值。</p>
<p><strong>3. PoW过程</strong></p>
<p>　　比特币PoW的过程，可以简单理解成就是将不同的nonce值作为输入，尝试进行SHA256哈希运算，找出满足给定数量前导0的哈希值的过程。而要求的前导0的个数越多，代表难度越大。比特币节点求解工作量证明问题的步骤大致归纳如下：<br>　　1）生成铸币交易，并与其他所有准备打包进区块的交易组成交易列表，通过Merkle树算法生成Merkle根哈希；<br>　　2）把Merkle根哈希及其他相关字段组装成区块头，将区块头的80字节数据作为工作量证明的输入；<br>　　3）不停地变更区块头中的随机数，即nonce的数值，并对每次变更后的区块头做双重SHA256运算（即SHA256（SHA256（Block_Header））），将结果值与当前网络的目标值做对比，如果小于目标值，则解题成功，工作量证明完成。<br>　　比特币的工作量证明，就是俗称“挖矿”所做的主要工作。</p>
<p><strong>4. PoW能否解决拜占庭将军问题</strong></p>
<h2 id="关于比特币PoW共识机制能否解决拜占庭将军问题一直在业界有争议。2015年，Juan-Garay对比特币的PoW共识算法进行了正式的分析，得出的结论是比特币的PoW共识算法是一种概率性的拜占庭协议（Probabilistic-BA）。Garay对比特币共识协议的两个重要属性分析如下。-1）一致性（Agreement）-在不诚实节点总算力小于50-的情况下，同时每轮同步区块生成的几率很少的情况下，诚实的节点具有相同的区块的概率很高。用数学的严格语言说应该是：当任意两个诚实节点的本地链条截取K个节点，两条剩下的链条的头区块不相同的概率随着K的增加呈指数型递减。-2）正确性（Validity）-大多数的区块必须由诚实节点提供。严格来说，当不诚实算力非常小的时候，才能使大多数区块由诚实节点提供。-因此可以看到，当不诚实的算力小于网络总算力的50-时，同时挖矿难度比较高，在大约10分钟出一个区块情况下，比特币网络达到一致性的概念会随确认区块的数目增多而呈指数型增加。但当不诚实算力具一定规模，甚至不用接近50-的时候，比特币的共识算法并不能保证正确性，也就是，不能保证大多数的区块由诚实节点来提供。-因此，我们可以看到，比特币的共识算法不适合于私有链和联盟链。其原因首先是它是一个最终一致性共识算法，不是一个强一致性共识算法。第二个原因是其共识效率低。提供共识效率又会牺牲共识协议的安全性。另外，比特币通过巧妙的矿工奖励机制来提升网络的安全性。矿工挖矿获得比特币奖励以及记账所得的交易费用使得矿工更希望维护网络的正常运行，而任何破坏网络的非诚信行为都会损害矿工自身的利益。因此，即使有些比特币矿池具备强大的算力，它们都没有作恶的动机，反而有动力维护比特币的正常运行，因为这和它们的切实利益相关。-PoW机制存在明显的弊端。一方面，PoW的前提是，节点和算力是均匀分布的，因为通过CPU的计算能力来进行投票，拥有钱包（节点）数和算力值应该是大致匹配的，然而随着人们将CPU挖矿逐渐升级到GPU、FPGA，直至ASIC矿机挖矿，节点数和算力值也渐渐失配。另一方面，PoW太浪费了。比特币网络每秒可完成数百万亿次SHA256计算，但这些计算除了使恶意攻击者不能轻易地伪装成几百万个节点和打垮比特币网络，并没有更多实际或科学价值。当然，相对于允许世界上任何一个人在瞬间就能通过去中心化和半匿名的全球货币网络，给其他人几乎没有手续费地转账所带来的巨大好处，它的浪费也许只算是很小的代价。-有鉴于此，人们提出了权益证明（Proof-of-Stake，PoS）。-POS：Proof-of-Stake，股权证明。"><a href="#关于比特币PoW共识机制能否解决拜占庭将军问题一直在业界有争议。2015年，Juan-Garay对比特币的PoW共识算法进行了正式的分析，得出的结论是比特币的PoW共识算法是一种概率性的拜占庭协议（Probabilistic-BA）。Garay对比特币共识协议的两个重要属性分析如下。-1）一致性（Agreement）-在不诚实节点总算力小于50-的情况下，同时每轮同步区块生成的几率很少的情况下，诚实的节点具有相同的区块的概率很高。用数学的严格语言说应该是：当任意两个诚实节点的本地链条截取K个节点，两条剩下的链条的头区块不相同的概率随着K的增加呈指数型递减。-2）正确性（Validity）-大多数的区块必须由诚实节点提供。严格来说，当不诚实算力非常小的时候，才能使大多数区块由诚实节点提供。-因此可以看到，当不诚实的算力小于网络总算力的50-时，同时挖矿难度比较高，在大约10分钟出一个区块情况下，比特币网络达到一致性的概念会随确认区块的数目增多而呈指数型增加。但当不诚实算力具一定规模，甚至不用接近50-的时候，比特币的共识算法并不能保证正确性，也就是，不能保证大多数的区块由诚实节点来提供。-因此，我们可以看到，比特币的共识算法不适合于私有链和联盟链。其原因首先是它是一个最终一致性共识算法，不是一个强一致性共识算法。第二个原因是其共识效率低。提供共识效率又会牺牲共识协议的安全性。另外，比特币通过巧妙的矿工奖励机制来提升网络的安全性。矿工挖矿获得比特币奖励以及记账所得的交易费用使得矿工更希望维护网络的正常运行，而任何破坏网络的非诚信行为都会损害矿工自身的利益。因此，即使有些比特币矿池具备强大的算力，它们都没有作恶的动机，反而有动力维护比特币的正常运行，因为这和它们的切实利益相关。-PoW机制存在明显的弊端。一方面，PoW的前提是，节点和算力是均匀分布的，因为通过CPU的计算能力来进行投票，拥有钱包（节点）数和算力值应该是大致匹配的，然而随着人们将CPU挖矿逐渐升级到GPU、FPGA，直至ASIC矿机挖矿，节点数和算力值也渐渐失配。另一方面，PoW太浪费了。比特币网络每秒可完成数百万亿次SHA256计算，但这些计算除了使恶意攻击者不能轻易地伪装成几百万个节点和打垮比特币网络，并没有更多实际或科学价值。当然，相对于允许世界上任何一个人在瞬间就能通过去中心化和半匿名的全球货币网络，给其他人几乎没有手续费地转账所带来的巨大好处，它的浪费也许只算是很小的代价。-有鉴于此，人们提出了权益证明（Proof-of-Stake，PoS）。-POS：Proof-of-Stake，股权证明。" class="headerlink" title="　　关于比特币PoW共识机制能否解决拜占庭将军问题一直在业界有争议。2015年，Juan Garay对比特币的PoW共识算法进行了正式的分析，得出的结论是比特币的PoW共识算法是一种概率性的拜占庭协议（Probabilistic BA）。Garay对比特币共识协议的两个重要属性分析如下。　　1）一致性（Agreement）　　在不诚实节点总算力小于50%的情况下，同时每轮同步区块生成的几率很少的情况下，诚实的节点具有相同的区块的概率很高。用数学的严格语言说应该是：当任意两个诚实节点的本地链条截取K个节点，两条剩下的链条的头区块不相同的概率随着K的增加呈指数型递减。　　2）正确性（Validity）　　大多数的区块必须由诚实节点提供。严格来说，当不诚实算力非常小的时候，才能使大多数区块由诚实节点提供。　　因此可以看到，当不诚实的算力小于网络总算力的50%时，同时挖矿难度比较高，在大约10分钟出一个区块情况下，比特币网络达到一致性的概念会随确认区块的数目增多而呈指数型增加。但当不诚实算力具一定规模，甚至不用接近50%的时候，比特币的共识算法并不能保证正确性，也就是，不能保证大多数的区块由诚实节点来提供。　　因此，我们可以看到，比特币的共识算法不适合于私有链和联盟链。其原因首先是它是一个最终一致性共识算法，不是一个强一致性共识算法。第二个原因是其共识效率低。提供共识效率又会牺牲共识协议的安全性。另外，比特币通过巧妙的矿工奖励机制来提升网络的安全性。矿工挖矿获得比特币奖励以及记账所得的交易费用使得矿工更希望维护网络的正常运行，而任何破坏网络的非诚信行为都会损害矿工自身的利益。因此，即使有些比特币矿池具备强大的算力，它们都没有作恶的动机，反而有动力维护比特币的正常运行，因为这和它们的切实利益相关。　　PoW机制存在明显的弊端。一方面，PoW的前提是，节点和算力是均匀分布的，因为通过CPU的计算能力来进行投票，拥有钱包（节点）数和算力值应该是大致匹配的，然而随着人们将CPU挖矿逐渐升级到GPU、FPGA，直至ASIC矿机挖矿，节点数和算力值也渐渐失配。另一方面，PoW太浪费了。比特币网络每秒可完成数百万亿次SHA256计算，但这些计算除了使恶意攻击者不能轻易地伪装成几百万个节点和打垮比特币网络，并没有更多实际或科学价值。当然，相对于允许世界上任何一个人在瞬间就能通过去中心化和半匿名的全球货币网络，给其他人几乎没有手续费地转账所带来的巨大好处，它的浪费也许只算是很小的代价。　　有鉴于此，人们提出了权益证明（Proof of Stake，PoS）。## POS：Proof of Stake，股权证明。"></a>　　关于比特币PoW共识机制能否解决拜占庭将军问题一直在业界有争议。2015年，Juan Garay对比特币的PoW共识算法进行了正式的分析，得出的结论是比特币的PoW共识算法是一种概率性的拜占庭协议（Probabilistic BA）。Garay对比特币共识协议的两个重要属性分析如下。<br>　　1）一致性（Agreement）<br>　　在不诚实节点总算力小于50%的情况下，同时每轮同步区块生成的几率很少的情况下，诚实的节点具有相同的区块的概率很高。用数学的严格语言说应该是：当任意两个诚实节点的本地链条截取K个节点，两条剩下的链条的头区块不相同的概率随着K的增加呈指数型递减。<br>　　2）正确性（Validity）<br>　　大多数的区块必须由诚实节点提供。严格来说，当不诚实算力非常小的时候，才能使大多数区块由诚实节点提供。<br>　　因此可以看到，当不诚实的算力小于网络总算力的50%时，同时挖矿难度比较高，在大约10分钟出一个区块情况下，比特币网络达到一致性的概念会随确认区块的数目增多而呈指数型增加。但当不诚实算力具一定规模，甚至不用接近50%的时候，比特币的共识算法并不能保证正确性，也就是，不能保证大多数的区块由诚实节点来提供。<br>　　因此，我们可以看到，比特币的共识算法不适合于私有链和联盟链。其原因首先是它是一个最终一致性共识算法，不是一个强一致性共识算法。第二个原因是其共识效率低。提供共识效率又会牺牲共识协议的安全性。另外，比特币通过巧妙的矿工奖励机制来提升网络的安全性。矿工挖矿获得比特币奖励以及记账所得的交易费用使得矿工更希望维护网络的正常运行，而任何破坏网络的非诚信行为都会损害矿工自身的利益。因此，即使有些比特币矿池具备强大的算力，它们都没有作恶的动机，反而有动力维护比特币的正常运行，因为这和它们的切实利益相关。<br>　　PoW机制存在明显的弊端。一方面，PoW的前提是，节点和算力是均匀分布的，因为通过CPU的计算能力来进行投票，拥有钱包（节点）数和算力值应该是大致匹配的，然而随着人们将CPU挖矿逐渐升级到GPU、FPGA，直至ASIC矿机挖矿，节点数和算力值也渐渐失配。另一方面，PoW太浪费了。比特币网络每秒可完成数百万亿次SHA256计算，但这些计算除了使恶意攻击者不能轻易地伪装成几百万个节点和打垮比特币网络，并没有更多实际或科学价值。当然，相对于允许世界上任何一个人在瞬间就能通过去中心化和半匿名的全球货币网络，给其他人几乎没有手续费地转账所带来的巨大好处，它的浪费也许只算是很小的代价。<br>　　有鉴于此，人们提出了权益证明（Proof of Stake，PoS）。<br>## POS：Proof of Stake，股权证明。</h2><h2 id="PoS类似于财产储存在银行，这种模式会根据你持有数字货币的量和时间，分配给你相应的利息。-简单来说，就是一个根据你持有货币的量和时间，给你发利息的一个制度，在股权证明PoS模式下，有一个名词叫币龄，每个币每天产生1币龄，比如你持有100个币，总共持有了30天，那么，此时你的币龄就为3000，这个时候，如果你发现了一个PoS区块，你的币龄就会被清空为0。你每被清空365币龄，你将会从区块中获得0-05个币的利息-假定利息可理解为年利率5-，那么在这个案例中，利息-3000-5-365-0-41个币，这下就很有意思了，持币有利息。-点点币（Peercoin）是首先采用权益证明的货币，点点币在SHA256的哈希运算的难度方面引入了币龄的概念，使得难度与交易输入的币龄成反比。在点点币中，币龄被定义为币的数量与币所拥有的天数的乘积，这使得币龄能够反映交易时刻用户所拥有的货币数量。实际上，点点币的权益证明机制结合了随机化与币龄的概念，未使用至少30天的币可以参与竞争下一区块，越久和越大的币集有更大的可能去签名下一区块。-然而，一旦币的权益被用于签名一个区块，则币龄将清为零，这样必须等待至少30日才能签署另一区块。同时，为防止非常老或非常大的权益控制区块链，寻找下一区块的最大概率在90天后达到最大值，这一过程保护了网络，并随着时间逐渐生成新的币而无需消耗大量的计算能力。点点币的开发者声称这将使得恶意攻击变得困难，因为没有中心化的挖矿池需求，而且购买半数以上的币的开销似乎超过获得51-的工作量证明的哈希计算能力。-权益证明必须采用某种方法定义任意区块链中的下一合法区块，依据账户结余来选择将导致中心化，例如单个首富成员可能会拥有长久的优势。为此，人们还设计了其他不同的方法来选择下一合法区块。-PoS机制虽然考虑到了PoW的不足，但依据权益结余来选择，会导致首富账户的权力更大，有可能支配记账权。股份授权证明机制（Delegated-Proof-of-Stake，DPoS）的出现正是基于解决PoW机制和PoS机制的这类不足。-DPOS：Delegated-Proof-of-Stake，委任权益证明"><a href="#PoS类似于财产储存在银行，这种模式会根据你持有数字货币的量和时间，分配给你相应的利息。-简单来说，就是一个根据你持有货币的量和时间，给你发利息的一个制度，在股权证明PoS模式下，有一个名词叫币龄，每个币每天产生1币龄，比如你持有100个币，总共持有了30天，那么，此时你的币龄就为3000，这个时候，如果你发现了一个PoS区块，你的币龄就会被清空为0。你每被清空365币龄，你将会从区块中获得0-05个币的利息-假定利息可理解为年利率5-，那么在这个案例中，利息-3000-5-365-0-41个币，这下就很有意思了，持币有利息。-点点币（Peercoin）是首先采用权益证明的货币，点点币在SHA256的哈希运算的难度方面引入了币龄的概念，使得难度与交易输入的币龄成反比。在点点币中，币龄被定义为币的数量与币所拥有的天数的乘积，这使得币龄能够反映交易时刻用户所拥有的货币数量。实际上，点点币的权益证明机制结合了随机化与币龄的概念，未使用至少30天的币可以参与竞争下一区块，越久和越大的币集有更大的可能去签名下一区块。-然而，一旦币的权益被用于签名一个区块，则币龄将清为零，这样必须等待至少30日才能签署另一区块。同时，为防止非常老或非常大的权益控制区块链，寻找下一区块的最大概率在90天后达到最大值，这一过程保护了网络，并随着时间逐渐生成新的币而无需消耗大量的计算能力。点点币的开发者声称这将使得恶意攻击变得困难，因为没有中心化的挖矿池需求，而且购买半数以上的币的开销似乎超过获得51-的工作量证明的哈希计算能力。-权益证明必须采用某种方法定义任意区块链中的下一合法区块，依据账户结余来选择将导致中心化，例如单个首富成员可能会拥有长久的优势。为此，人们还设计了其他不同的方法来选择下一合法区块。-PoS机制虽然考虑到了PoW的不足，但依据权益结余来选择，会导致首富账户的权力更大，有可能支配记账权。股份授权证明机制（Delegated-Proof-of-Stake，DPoS）的出现正是基于解决PoW机制和PoS机制的这类不足。-DPOS：Delegated-Proof-of-Stake，委任权益证明" class="headerlink" title="　　PoS类似于财产储存在银行，这种模式会根据你持有数字货币的量和时间，分配给你相应的利息。 　　简单来说，就是一个根据你持有货币的量和时间，给你发利息的一个制度，在股权证明PoS模式下，有一个名词叫币龄，每个币每天产生1币龄，比如你持有100个币，总共持有了30天，那么，此时你的币龄就为3000，这个时候，如果你发现了一个PoS区块，你的币龄就会被清空为0。你每被清空365币龄，你将会从区块中获得0.05个币的利息(假定利息可理解为年利率5%)，那么在这个案例中，利息 &#x3D; 3000 * 5% &#x2F; 365 &#x3D; 0.41个币，这下就很有意思了，持币有利息。　　点点币（Peercoin）是首先采用权益证明的货币，点点币在SHA256的哈希运算的难度方面引入了币龄的概念，使得难度与交易输入的币龄成反比。在点点币中，币龄被定义为币的数量与币所拥有的天数的乘积，这使得币龄能够反映交易时刻用户所拥有的货币数量。实际上，点点币的权益证明机制结合了随机化与币龄的概念，未使用至少30天的币可以参与竞争下一区块，越久和越大的币集有更大的可能去签名下一区块。　　然而，一旦币的权益被用于签名一个区块，则币龄将清为零，这样必须等待至少30日才能签署另一区块。同时，为防止非常老或非常大的权益控制区块链，寻找下一区块的最大概率在90天后达到最大值，这一过程保护了网络，并随着时间逐渐生成新的币而无需消耗大量的计算能力。点点币的开发者声称这将使得恶意攻击变得困难，因为没有中心化的挖矿池需求，而且购买半数以上的币的开销似乎超过获得51%的工作量证明的哈希计算能力。　　权益证明必须采用某种方法定义任意区块链中的下一合法区块，依据账户结余来选择将导致中心化，例如单个首富成员可能会拥有长久的优势。为此，人们还设计了其他不同的方法来选择下一合法区块。　　PoS机制虽然考虑到了PoW的不足，但依据权益结余来选择，会导致首富账户的权力更大，有可能支配记账权。股份授权证明机制（Delegated Proof of Stake，DPoS）的出现正是基于解决PoW机制和PoS机制的这类不足。## DPOS：Delegated Proof of Stake，委任权益证明"></a>　　PoS类似于财产储存在银行，这种模式会根据你持有数字货币的量和时间，分配给你相应的利息。 <br>　　简单来说，就是一个根据你持有货币的量和时间，给你发利息的一个制度，在股权证明PoS模式下，有一个名词叫币龄，每个币每天产生1币龄，比如你持有100个币，总共持有了30天，那么，此时你的币龄就为3000，这个时候，如果你发现了一个PoS区块，你的币龄就会被清空为0。你每被清空365币龄，你将会从区块中获得0.05个币的利息(假定利息可理解为年利率5%)，那么在这个案例中，利息 &#x3D; 3000 * 5% &#x2F; 365 &#x3D; 0.41个币，这下就很有意思了，持币有利息。<br>　　点点币（Peercoin）是首先采用权益证明的货币，点点币在SHA256的哈希运算的难度方面引入了币龄的概念，使得难度与交易输入的币龄成反比。在点点币中，币龄被定义为币的数量与币所拥有的天数的乘积，这使得币龄能够反映交易时刻用户所拥有的货币数量。实际上，点点币的权益证明机制结合了随机化与币龄的概念，未使用至少30天的币可以参与竞争下一区块，越久和越大的币集有更大的可能去签名下一区块。<br>　　然而，一旦币的权益被用于签名一个区块，则币龄将清为零，这样必须等待至少30日才能签署另一区块。同时，为防止非常老或非常大的权益控制区块链，寻找下一区块的最大概率在90天后达到最大值，这一过程保护了网络，并随着时间逐渐生成新的币而无需消耗大量的计算能力。点点币的开发者声称这将使得恶意攻击变得困难，因为没有中心化的挖矿池需求，而且购买半数以上的币的开销似乎超过获得51%的工作量证明的哈希计算能力。<br>　　权益证明必须采用某种方法定义任意区块链中的下一合法区块，依据账户结余来选择将导致中心化，例如单个首富成员可能会拥有长久的优势。为此，人们还设计了其他不同的方法来选择下一合法区块。<br>　　PoS机制虽然考虑到了PoW的不足，但依据权益结余来选择，会导致首富账户的权力更大，有可能支配记账权。股份授权证明机制（Delegated Proof of Stake，DPoS）的出现正是基于解决PoW机制和PoS机制的这类不足。<br>## DPOS：Delegated Proof of Stake，委任权益证明</h2><h2 id="比特股（Bitshare）是一类采用DPoS机制的密码货币，它期望通过引入一个技术民主层来减少中心化的负面影响。-比特股的DPoS机制，中文名叫做股份授权证明机制（又称受托人机制），它的原理是让每一个持有比特股的人进行投票，由此产生101位代表-我们可以将其理解为101个超级节点或者矿池，而这101个超级节点彼此的权利是完全相等的。从某种角度来看，DPOS有点像是议会制度或人民代表大会制度。如果代表不能履行他们的职责（当轮到他们时，没能生成区块），他们会被除名，网络会选出新的超级节点来取代他们。DPOS的出现最主要还是因为矿机的产生，大量的算力在不了解也不关心比特币的人身上，类似演唱会的黄牛，大量囤票而丝毫不关心演唱会的内容。-比特股引入了见证人这个概念，见证人可以生成区块，每一个持有比特股的人都可以投票选举见证人。得到总同意票数中的前N个（N通常定义为101）候选者可以当选为见证人，当选见证人的个数（N）需满足：至少一半的参与投票者相信N已经充分地去中心化。-见证人的候选名单每个维护周期（1天）更新一次。见证人然后随机排列，每个见证人按序有2秒的权限时间生成区块，若见证人在给定的时间片不能生成区块，区块生成权限交给下一个时间片对应的见证人。DPoS的这种设计使得区块的生成更为快速，也更加节能。-DPoS充分利用了持股人的投票，以公平民主的方式达成共识，他们投票选出的N个见证人，可以视为N个矿池，而这N个矿池彼此的权利是完全相等的。持股人可以随时通过投票更换这些见证人（矿池），只要他们提供的算力不稳定，计算机宕机，或者试图利用手中的权力作恶。-比特股还设计了另外一类竞选，代表竞选。选出的代表拥有提出改变网络参数的特权，包括交易费用、区块大小、见证人费用和区块区间。若大多数代表同意所提出的改变，持股人有两周的审查期，这期间可以罢免代表并废止所提出的改变。这一设计确保代表技术上没有直接修改参数的权利以及所有的网络参数的改变最终需得到持股人的同意。-Ripple共识算法"><a href="#比特股（Bitshare）是一类采用DPoS机制的密码货币，它期望通过引入一个技术民主层来减少中心化的负面影响。-比特股的DPoS机制，中文名叫做股份授权证明机制（又称受托人机制），它的原理是让每一个持有比特股的人进行投票，由此产生101位代表-我们可以将其理解为101个超级节点或者矿池，而这101个超级节点彼此的权利是完全相等的。从某种角度来看，DPOS有点像是议会制度或人民代表大会制度。如果代表不能履行他们的职责（当轮到他们时，没能生成区块），他们会被除名，网络会选出新的超级节点来取代他们。DPOS的出现最主要还是因为矿机的产生，大量的算力在不了解也不关心比特币的人身上，类似演唱会的黄牛，大量囤票而丝毫不关心演唱会的内容。-比特股引入了见证人这个概念，见证人可以生成区块，每一个持有比特股的人都可以投票选举见证人。得到总同意票数中的前N个（N通常定义为101）候选者可以当选为见证人，当选见证人的个数（N）需满足：至少一半的参与投票者相信N已经充分地去中心化。-见证人的候选名单每个维护周期（1天）更新一次。见证人然后随机排列，每个见证人按序有2秒的权限时间生成区块，若见证人在给定的时间片不能生成区块，区块生成权限交给下一个时间片对应的见证人。DPoS的这种设计使得区块的生成更为快速，也更加节能。-DPoS充分利用了持股人的投票，以公平民主的方式达成共识，他们投票选出的N个见证人，可以视为N个矿池，而这N个矿池彼此的权利是完全相等的。持股人可以随时通过投票更换这些见证人（矿池），只要他们提供的算力不稳定，计算机宕机，或者试图利用手中的权力作恶。-比特股还设计了另外一类竞选，代表竞选。选出的代表拥有提出改变网络参数的特权，包括交易费用、区块大小、见证人费用和区块区间。若大多数代表同意所提出的改变，持股人有两周的审查期，这期间可以罢免代表并废止所提出的改变。这一设计确保代表技术上没有直接修改参数的权利以及所有的网络参数的改变最终需得到持股人的同意。-Ripple共识算法" class="headerlink" title="　　比特股（Bitshare）是一类采用DPoS机制的密码货币，它期望通过引入一个技术民主层来减少中心化的负面影响。　　比特股的DPoS机制，中文名叫做股份授权证明机制（又称受托人机制），它的原理是让每一个持有比特股的人进行投票，由此产生101位代表 , 我们可以将其理解为101个超级节点或者矿池，而这101个超级节点彼此的权利是完全相等的。从某种角度来看，DPOS有点像是议会制度或人民代表大会制度。如果代表不能履行他们的职责（当轮到他们时，没能生成区块），他们会被除名，网络会选出新的超级节点来取代他们。DPOS的出现最主要还是因为矿机的产生，大量的算力在不了解也不关心比特币的人身上，类似演唱会的黄牛，大量囤票而丝毫不关心演唱会的内容。　　比特股引入了见证人这个概念，见证人可以生成区块，每一个持有比特股的人都可以投票选举见证人。得到总同意票数中的前N个（N通常定义为101）候选者可以当选为见证人，当选见证人的个数（N）需满足：至少一半的参与投票者相信N已经充分地去中心化。　　见证人的候选名单每个维护周期（1天）更新一次。见证人然后随机排列，每个见证人按序有2秒的权限时间生成区块，若见证人在给定的时间片不能生成区块，区块生成权限交给下一个时间片对应的见证人。DPoS的这种设计使得区块的生成更为快速，也更加节能。　　DPoS充分利用了持股人的投票，以公平民主的方式达成共识，他们投票选出的N个见证人，可以视为N个矿池，而这N个矿池彼此的权利是完全相等的。持股人可以随时通过投票更换这些见证人（矿池），只要他们提供的算力不稳定，计算机宕机，或者试图利用手中的权力作恶。　　比特股还设计了另外一类竞选，代表竞选。选出的代表拥有提出改变网络参数的特权，包括交易费用、区块大小、见证人费用和区块区间。若大多数代表同意所提出的改变，持股人有两周的审查期，这期间可以罢免代表并废止所提出的改变。这一设计确保代表技术上没有直接修改参数的权利以及所有的网络参数的改变最终需得到持股人的同意。## Ripple共识算法"></a>　　比特股（Bitshare）是一类采用DPoS机制的密码货币，它期望通过引入一个技术民主层来减少中心化的负面影响。<br>　　比特股的DPoS机制，中文名叫做股份授权证明机制（又称受托人机制），它的原理是让每一个持有比特股的人进行投票，由此产生101位代表 , 我们可以将其理解为101个超级节点或者矿池，而这101个超级节点彼此的权利是完全相等的。从某种角度来看，DPOS有点像是议会制度或人民代表大会制度。如果代表不能履行他们的职责（当轮到他们时，没能生成区块），他们会被除名，网络会选出新的超级节点来取代他们。DPOS的出现最主要还是因为矿机的产生，大量的算力在不了解也不关心比特币的人身上，类似演唱会的黄牛，大量囤票而丝毫不关心演唱会的内容。<br>　　比特股引入了见证人这个概念，见证人可以生成区块，每一个持有比特股的人都可以投票选举见证人。得到总同意票数中的前N个（N通常定义为101）候选者可以当选为见证人，当选见证人的个数（N）需满足：至少一半的参与投票者相信N已经充分地去中心化。<br>　　见证人的候选名单每个维护周期（1天）更新一次。见证人然后随机排列，每个见证人按序有2秒的权限时间生成区块，若见证人在给定的时间片不能生成区块，区块生成权限交给下一个时间片对应的见证人。DPoS的这种设计使得区块的生成更为快速，也更加节能。<br>　　DPoS充分利用了持股人的投票，以公平民主的方式达成共识，他们投票选出的N个见证人，可以视为N个矿池，而这N个矿池彼此的权利是完全相等的。持股人可以随时通过投票更换这些见证人（矿池），只要他们提供的算力不稳定，计算机宕机，或者试图利用手中的权力作恶。<br>　　比特股还设计了另外一类竞选，代表竞选。选出的代表拥有提出改变网络参数的特权，包括交易费用、区块大小、见证人费用和区块区间。若大多数代表同意所提出的改变，持股人有两周的审查期，这期间可以罢免代表并废止所提出的改变。这一设计确保代表技术上没有直接修改参数的权利以及所有的网络参数的改变最终需得到持股人的同意。<br>## Ripple共识算法</h2><p>　　Ripple（瑞波）是一种基于互联网的开源支付协议，可以实现去中心化的货币兑换、支付与清算功能。在Ripple的网络中，交易由客户端（应用）发起，经过追踪节点（tracking node）或验证节点（validating node）把交易广播到整个网络中。追踪节点的主要功能是分发交易信息以及响应客户端的账本请求。验证节点除包含追踪节点的所有功能外，还能够通过共识协议，在账本中增加新的账本实例数据。　　<br>　　Ripple的共识达成发生在验证节点之间，每个验证节点都预先配置了一份可信任节点名单，称为UNL（Unique Node List）。在名单上的节点可对交易达成进行投票。每隔几秒，Ripple网络将进行如下共识过程：<br>　　1）每个验证节点会不断收到从网络发送过来的交易，通过与本地账本数据验证后，不合法的交易直接丢弃，合法的交易将汇总成交易候选集（candidate set）。交易候选集里面还包括之前共识过程无法确认而遗留下来的交易。<br>　　2）每个验证节点把自己的交易候选集作为提案发送给其他验证节点。<br>　　3）验证节点在收到其他节点发来的提案后，如果不是来自UNL上的节点，则忽略该提案；如果是来自UNL上的节点，就会对比提案中的交易和本地的交易候选集，如果有相同的交易，该交易就获得一票。在一定时间内，当交易获得超过50%的票数时，则该交易进入下一轮。没有超过50%的交易，将留待下一次共识过程去确认。　　<br>　　4）验证节点把超过50%票数的交易作为提案发给其他节点，同时提高所需票数的阈值到60%，重复步骤3）、步骤4），直到阈值达到80%。<br>　　5）验证节点把经过80%UNL节点确认的交易正式写入本地的账本数据中，称为最后关闭账本（Last Closed Ledger），即账本最后（最新）的状态。<br><img src="http://upload-images.jianshu.io/upload_images/5946072-ee7e7dd03db9b269.png" alt=" Ripple共识过程节点交互示意图"></p>
<p> <img src="http://upload-images.jianshu.io/upload_images/5946072-2160f1ed11022cac.png" alt="Ripple共识算法流程"></p>
<p>　　在Ripple的共识算法中，参与投票节点的身份是事先知道的，因此，算法的效率比PoW等匿名共识算法要高效，交易的确认时间只需几秒钟。当然，这点也决定了该共识算法只适合于权限链（Permissioned chain）的场景。Ripple共识算法的拜占庭容错（BFT）能力为（n-1）&#x2F;5，即可以容忍整个网络中20%的节点出现拜占庭错误而不影响正确的共识。</p>
<hr>
<p>　　以上主要是目前主流的共识算法。 但说起哪种共识机制更好或更具替代作用？ 我认为DPOS来单独替代POW，POS或者POW＋POS不太可能，毕竟存在即合理。每种算法都在特定的时间段、场景下具有各自的意义，无论是技术上，还是业务上。如果跳出技术者的角度，更多结合政治与经济的思考方式在里面，或许还会不断出现更多的共识机制。<br>　　对于算法的选择，一句话总结如下：</p>
<blockquote>
<p><strong>“</strong> 在区块链网络中，由于应用场景的不同，所设计的目标各异，不同的区块链系统采用了不同的共识算法。一般来说，在私有链和联盟链情况下，对一致性、正确性有很强的要求。一般来说要采用强一致性的共识算法。而在公有链情况下，对一致性和正确性通常没法做到百分之百，通常采用最终一致性（Eventual Consistency）的共识算法。<strong>”</strong><br>　　通俗点就是：共识算法的选择与应用场景高度相关，可信环境使用paxos 或者raft，带许可的联盟可使用pbft ，非许可链可以是pow，pos，ripple共识等，根据对手方信任度分级，自由选择共识机制。</p>
</blockquote>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下安装与配置Go语言开发环境</title>
    <url>/2018-12-13-mac-install-golang/</url>
    <content><![CDATA[<p><img src="http://p1.pstatp.com/large/pgc-image/132340be8ea24014a7e191ea66ce96b0" alt="image.png"></p>
<ol>
<li>国内网站下载Mac版安装包<pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;studygolang.com&#x2F;dl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>配置GO环境变量GOPATH和GOBIN</li>
</ol>
<ul>
<li>打开Mac终端，编辑<code>.bash_profile</code>文件<span id="more"></span>
<pre class="line-numbers language-none"><code class="language-none">vi ~&#x2F;.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>在<code>.bash_profile</code>文件中添加环境变量<pre class="line-numbers language-none"><code class="language-none">export GOROOT&#x3D;&#x2F;usr&#x2F;local&#x2F;go
#GOPATH是自己的go项目路径，自定义设置
export GOPATH&#x3D;&#x2F;Users&#x2F;nrgh&#x2F;Documents&#x2F;Go
export GOBIN&#x3D;$GOROOT&#x2F;bin
export PATH&#x3D;$PATH:$GOBIN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>编译使其生效<pre class="line-numbers language-none"><code class="language-none">source ~&#x2F;.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<ol start="3">
<li>查看相关参数</li>
</ol>
<ul>
<li>查看Go版本<pre class="line-numbers language-none"><code class="language-none">go version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>查看Go环境变量<pre class="line-numbers language-none"><code class="language-none">go env<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<ol start="4">
<li>编辑测试Demo</li>
</ol>
<ul>
<li>在gopath目录中新建项目，名称自定义，然后新建测试文件并保存。<pre class="line-numbers language-none"><code class="language-none">package main
 
import (
  &quot;fmt&quot;
)
 
func main() &#123;
  fmt.Println(&quot;hello&quot;);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>运行测试：在测试文件所在目录运行下方指令<pre class="line-numbers language-none"><code class="language-none">#编译并执行
go build &#x2F;Users&#x2F;nrgh&#x2F;Documents&#x2F;Go&#x2F;test&#x2F;main.go
#只看执行结果
go run &#x2F;Users&#x2F;nrgh&#x2F;Documents&#x2F;Go&#x2F;test&#x2F;main.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hyperledger第四讲】Hyperledger Fabric SDK示例 fabric-samples-《balance-transfer》</title>
    <url>/2018-12-18-fabric-balance-transfer4/</url>
    <content><![CDATA[<h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><hr>
<h2 id="hyperledger-fabric运行网络、postman（测试API工具）、nodejs8-9-4-目录结构分析"><a href="#hyperledger-fabric运行网络、postman（测试API工具）、nodejs8-9-4-目录结构分析" class="headerlink" title="hyperledger fabric运行网络、postman（测试API工具）、nodejs8.9.4### 目录结构分析"></a>hyperledger fabric运行网络、postman（测试API工具）、nodejs8.9.4<br><span id="more"></span><br>### 目录结构分析</h2><p><img src="https://upload-images.jianshu.io/upload_images/5946072-fd506d6f8e59ae4d.png" alt="balance-transfer目录结构分析"></p>
<pre class="line-numbers language-none"><code class="language-none">├── app  &#x2F;&#x2F; 与fabric网络交互的实现
│   ├── create-channel.js
│   ├── helper.js
│   ├── install-chaincode.js
│   ├── instantiate-chaincode.js
│   ├── invoke-transaction.js
│   ├── join-channel.js
│   ├── network-config-aws.json
│   ├── network-config.json
│   └── query.js
├── app.js   &#x2F;&#x2F; 定义与fabric网络交互的API
├── artifacts  &#x2F;&#x2F; 启动fabric网络需要的配置
│   ├── base.yaml
│   ├── channel
│   ├── docker-compose.yaml
│   └── src
├── config.js
├── config.json
├── node_modules
│   └── .......
├── package.json
├── package-lock.json
├── README.md
├── runApp.sh
└── testAPIs.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h3><hr>
<ol>
<li>下载示例<pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-samples.git
cd fabric-samples<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>启动脚本</li>
</ol>
<ul>
<li>进入到balance-transfer目录，运行runApp.sh脚本，fabric网络以及node服务都会运行起来<pre class="line-numbers language-none"><code class="language-none">cd balance-transfer
.&#x2F;runApp.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<img src="https://upload-images.jianshu.io/upload_images/5946072-5dc33da411ab616e.png" alt="./runApp.sh执行结果"></li>
</ul>
<ol start="3">
<li>测试脚本</li>
</ol>
<ul>
<li>在另一个终端运行testAPIs.sh测试脚本，使用API来操作fabric网络，它主要做了：<blockquote>
<ul>
<li>创建channel</li>
<li>安装chaincode</li>
<li>初始化chaincode</li>
<li>执行chaincode</li>
<li>各种查询</li>
</ul>
</blockquote>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">.&#x2F;testAPIs.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>运行结果（部分省略）<pre class="line-numbers language-none"><code class="language-none">POST request Create channel  ...

&#123;&quot;success&quot;:true,&quot;message&quot;:&quot;Channel &#39;mychannel&#39; created Successfully&quot;&#125;

POST request Join channel on Org1

&#123;&quot;success&quot;:true,&quot;message&quot;:&quot;Successfully joined peers in organization Org1 to the channel:mychannel&quot;&#125;

POST request Join channel on Org2

&#123;&quot;success&quot;:true,&quot;message&quot;:&quot;Successfully joined peers in organization Org2 to the channel:mychannel&quot;&#125;

POST Install chaincode on Org1

&#123;&quot;success&quot;:true,&quot;message&quot;:&quot;Successfully install chaincode&quot;&#125;

POST Install chaincode on Org2

&#123;&quot;success&quot;:true,&quot;message&quot;:&quot;Successfully install chaincode&quot;&#125;

POST instantiate chaincode on peer1 of Org1

&#123;&quot;success&quot;:true,&quot;message&quot;:&quot;Successfully instantiate chaingcode in organization Org1 to the channel &#39;mychannel&#39;&quot;&#125;

POST invoke chaincode on peers of Org1

Transacton ID is 2eded4ef539d54b6822ba214788c5ae1515985d9c3628fdd259f5e0ab53582e5


GET query chaincode on peer1 of Org1

a now has 90 after the move

GET query Block by blockNumber

GET query Transaction by TransactionID

GET query ChainInfo

GET query Installed chaincodes

[&quot;name: mycc, version: v0, path: github.com&#x2F;example_cc&#x2F;go&quot;]

GET query Instantiated chaincodes

[&quot;name: mycc, version: v0, path: github.com&#x2F;example_cc&#x2F;go&quot;]

GET query Channels

&#123;&quot;channels&quot;:[&#123;&quot;channel_id&quot;:&quot;mychannel&quot;&#125;]&#125;

Total execution time : 90 secs ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<strong>参考文档</strong></li>
</ul>
<hr>
<pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;blog.csdn.net&#x2F;zhayujie5200&#x2F;article&#x2F;details&#x2F;79684032
https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_27818541&#x2F;article&#x2F;details&#x2F;78246947
https:&#x2F;&#x2F;blog.csdn.net&#x2F;weixin_41926234&#x2F;article&#x2F;details&#x2F;80626078<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>Hyperledger</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
        <tag>hyperledger</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hyperledger第五讲】Hyperledger Fabric Node SDK详解</title>
    <url>/2018-12-25-fabric-nodesdk5/</url>
    <content><![CDATA[<h3 id="Fabric-Node-SDK主要功能"><a href="#Fabric-Node-SDK主要功能" class="headerlink" title="Fabric Node SDK主要功能"></a>Fabric Node SDK主要功能</h3><hr>
<p>SDK for Node.js有三个最顶层（top-level）的模块：API, fabric-client 和 fabric-ca-client。具体细节见官方文档及源码。</p>
<span id="more"></span>
<ol>
<li><p>API<br>该模块给开发者提供了可插拔API，以提供SDK主要接口的可替换实现，包括CryptoSuite, key, KeyValueStore。每个接口都有内置的默认实现。</p>
</li>
<li><p>fabric-client<br>该模块提供了用户客户端与Fabric区块链网络组件（peer，orderer，event等）的交互。主要功能有：</p>
</li>
</ol>
<ul>
<li>创建channel</li>
<li>发送信息使peer节点加入channel</li>
<li>在peer中安装（install）chaincode</li>
<li>在channel上实例化 chaincode，分为两步：提案（ propose ）和交易（transact）</li>
<li>提交（submit）一个交易（需要调用chaincode），和上面一样分为两步</li>
<li>多种查询功能：状态（通过chaincode），交易，区块，channel，chaincode</li>
<li>监控事件（monitoring events）：包括peer，block，transactions，custom的events</li>
<li>有签名能力的用户对象（ User object）的序列化（serializable）</li>
<li>配置信息的分层（hierarchical configuration settings）</li>
<li>还提供可插拔（pluggable）的日志工具（logging utility）、加密工具（CryptoSuite）和状态存储方法（State Store），可以支持与 peer 或 orderer 的 TLS &#x2F; non-TLS 链接</li>
</ul>
<ol start="3">
<li>fabric-ca-client<br>该模块主要用于成员资格的管理，主要功能如下：</li>
</ol>
<ul>
<li>注册（register ）新用户</li>
<li>登录（enroll）用户并且获得由Fabric CA签名（CA私钥完成）的登录证书（enrollment certificate）</li>
<li>通过登录id（enrollment id）来注销 (revoke) 一个用户</li>
<li>可定制的（customizable）持久储存（persistence store）</li>
</ul>
<h3 id="Fabric-Node-SDK具体接口"><a href="#Fabric-Node-SDK具体接口" class="headerlink" title="Fabric Node SDK具体接口"></a>Fabric Node SDK具体接口</h3><hr>
<p>Node SDK主要的模块及其中重要的方法如下：</p>
<ol>
<li>Client</li>
</ol>
<ul>
<li>getUserContext() &#x2F; setUserContext()：从本地读取&#x2F;写入用户信息</li>
<li>创建其他各种类的示例</li>
</ul>
<ol start="2">
<li>CAClient</li>
</ol>
<ul>
<li>register()：登记</li>
<li>enroll()：注册</li>
</ul>
<ol start="3">
<li>Channel</li>
</ol>
<ul>
<li>sendTransactionProposal()：发送提案</li>
<li>sendTransaction()：发送交易</li>
<li>queryByChaincode()：调用链码查询</li>
<li>各种与区块、交易有关的查询功能</li>
</ul>
<ol start="4">
<li>Peer</li>
</ol>
<ul>
<li>sendProposal()：发送交易提案到Peer节点</li>
</ul>
<ol start="5">
<li>Orderer</li>
</ol>
<ul>
<li>sendBrodcast()：发送数据到Ordere节点</li>
<li>sendDeliver()：从Orderer节点获取数据</li>
</ul>
<p><strong>参考文档</strong></p>
<pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;fabric-sdk-node.github.io&#x2F;release-1.4&#x2F;index.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Hyperledger</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
        <tag>hyperledger</tag>
      </tags>
  </entry>
  <entry>
    <title>在Ubuntu上安装Golang</title>
    <url>/2019-02-26-install-golang-on-ubuntu/</url>
    <content><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://golang.org/dl/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token parameter variable">-c</span> https://golang.org/dl/go1.16.5.linux-amd64.tar.gz <span class="token parameter variable">-O</span> - <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tar</span> <span class="token parameter variable">-xz</span> <span class="token parameter variable">-C</span> /mhxw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<span id="more"></span>

<h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.profile
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/mhxw/go/bin
<span class="token builtin class-name">source</span> ~/.profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="校验版本"><a href="#校验版本" class="headerlink" title="校验版本"></a>校验版本</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac安装配置MongoDB</title>
    <url>/2019-01-05-mac-install-mongodb/</url>
    <content><![CDATA[<h3 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h3><hr>
<ol>
<li>打开官方下载网站</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash">https://www.mongodb.com/download-center/community<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<span id="more"></span>

<p><img src="http://p1.pstatp.com/origin/pgc-image/c05c636c30f4402b8f7276b7488d6a22" alt="下载mangodb"><br>2. 进入<code>/usr/local</code>目录</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="3">
<li>下载并解压</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-O</span> https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-4.0.9.tgz
<span class="token function">sudo</span> <span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> mongodb-osx-ssl-x86_64-4.0.9.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="4">
<li>重命名为 mongodb 目录</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mv</span> mongodb-osx-x86_64-4.0.9/ mongodb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="5">
<li>把mangodb的二进制命令目录添加到PATH路径中</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/local/mongodb/bin:<span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="运行MongoDB"><a href="#运行MongoDB" class="headerlink" title="运行MongoDB"></a>运行MongoDB</h3><hr>
<ol>
<li>首先创建一个数据库存储目录 <code>/data/db</code></li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/db<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="2">
<li>启动 mongodb，默认数据库目录则为<code> /data/db</code></li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">sudo</span> mongod<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="http://p1.pstatp.com/origin/pgc-image/59887aa4ae4e4f3f9e2e173f34007896" alt="运行MangoDB"></p>
<ol start="3">
<li>再打开一个终端，执行以下命令，进入MangoDB</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/mongodb/bin
./mongo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img src="http://p1.pstatp.com/origin/pgc-image/6edb6c25cb904c6f96bc079a83019cf0" alt="进入MangoDB"></p>
<h3 id="下载MongoDB-Compass"><a href="#下载MongoDB-Compass" class="headerlink" title="下载MongoDB-Compass"></a>下载MongoDB-Compass</h3><hr>
<ul>
<li>进入官网直接下载</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash">https://www.mongodb.com/download-center/compass<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>或者执行以下命令下载</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-O</span> https://downloads.mongodb.com/compass/mongodb-compass-1.18.0-darwin-x64.dmg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>双击安装运行即可</li>
</ul>
<h3 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h3><hr>
<ul>
<li>如果你的数据库目录不是&#x2F;data&#x2F;db，可以通过 –dbpath 来指定。</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">sudo</span> mongod <span class="token parameter variable">--dbpath</span><span class="token operator">=</span>/data/db<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>mongodb</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP的三次握手与四次挥手图文详解</title>
    <url>/2019-05-03-tcp-intro/</url>
    <content><![CDATA[<h2 id="本文介绍TCP的三次握手与四次挥手，以及TCP-为什么是三次握手，而不是两次或四次？TCP名为传输控制协议，是一种可靠传输控制协议，其核心思想：既要保证数据可靠传输，又要提高传输的效率，而用三次握手正好满足以上两方面的需求！-TCP报文格式"><a href="#本文介绍TCP的三次握手与四次挥手，以及TCP-为什么是三次握手，而不是两次或四次？TCP名为传输控制协议，是一种可靠传输控制协议，其核心思想：既要保证数据可靠传输，又要提高传输的效率，而用三次握手正好满足以上两方面的需求！-TCP报文格式" class="headerlink" title="本文介绍TCP的三次握手与四次挥手，以及TCP 为什么是三次握手，而不是两次或四次？TCP名为传输控制协议，是一种可靠传输控制协议，其核心思想：既要保证数据可靠传输，又要提高传输的效率，而用三次握手正好满足以上两方面的需求！### TCP报文格式"></a>本文介绍TCP的三次握手与四次挥手，以及TCP 为什么是三次握手，而不是两次或四次？TCP名为传输控制协议，是一种可靠传输控制协议，其<strong>核心思想</strong>：既要保证数据可靠传输，又要提高传输的效率，而用三次握手正好满足以上两方面的需求！<br>### TCP报文格式</h2><p><img src="http://p1.pstatp.com/origin/pgc-image/519a806ab5cd48638bccec5bc4f65874" alt="TCP报文格式图"></p>
<ul>
<li>源端口和目的端口，各占2个字节，分别写入源端口和目的端口；</li>
<li>序号，占4个字节，<strong>TCP连接中传送的字节流中的每个字节都按顺序编号</strong>。例如，一段报文的序号字段值是 301 ，而携带的数据共有100字段，显然下一个报文段（如果还有的话）的数据序号应该从401开始；</li>
<li>确认号，占4个字节，<strong>是期望收到对方下一个报文的第一个数据字节的序号</strong>。例如，B收到了A发送过来的报文，其序列号字段是501，而数据长度是200字节，<strong>这表明B正确的收到了A发送的到序号700为止的数据</strong>。因此，B期望收到A的下一个数据序号是701，于是B在发送给A的确认报文段中把确认号置为701；</li>
<li>数据偏移，占4位，它指出TCP报文的数据距离TCP报文段的起始处有多远；</li>
<li>保留，占6位，保留今后使用，但目前应都位0；</li>
<li>紧急URG，当URG&#x3D;1，表明紧急指针字段有效。告诉系统此报文段中有紧急数据；</li>
<li>确认ACK，仅当ACK&#x3D;1时，确认号字段才有效。TCP规定，在连接建立后所有报文的传输都必须把ACK置1；</li>
<li>推送PSH，当两个应用进程进行交互式通信时，有时在一端的应用进程希望在键入一个命令后立即就能收到对方的响应，这时候就将PSH&#x3D;1；</li>
<li>复位RST，当RST&#x3D;1，表明TCP连接中出现严重差错，必须释放连接，然后再重新建立连接；</li>
<li>同步SYN，在连接建立时用来同步序号。当SYN&#x3D;1，ACK&#x3D;0，表明是连接请求报文，若同意连接，则响应报文中应该使SYN&#x3D;1，ACK&#x3D;1；</li>
<li>终止FIN，用来释放连接。当FIN&#x3D;1，表明此报文的发送方的数据已经发送完毕，并且要求释放；</li>
<li>窗口，占2字节，指的是通知接收方，发送本报文你需要有多大的空间来接受；</li>
<li>检验和，占2字节，校验首部和数据这两部分；</li>
<li>紧急指针，占2字节，指出本报文段中的紧急数据的字节数；</li>
<li>选项，长度可变，定义一些其他的可选的参数。</li>
</ul>
<p>以下是TCP的6种标志位和2种序号：</p>
<blockquote>
<ol>
<li>SYN(synchronous) :建立连接，请求同步标志，为1的时候为有效 </li>
<li>ACK(acknowledgement 确认) :应答标志，表示接受到所发的数据，1为有效 </li>
<li>PSH(push传送) ：接收方应该尽快把这个报文交给应用层</li>
<li>FIN(finish结束) :释放一个连接</li>
<li>RST(reset) ：重置连接</li>
<li>URG(urgent紧急)：紧急指针有效</li>
</ol>
</blockquote>
<blockquote>
<ul>
<li>顺序序号（sequence number）：seq序号，占32位，用来标识从TCP源端向目的端发送的字节流，发起方发送数据时对此进行标记。</li>
<li>确认序号（acknowledge number）：ack序号，占32位，只有标志位ACK为1时，确认序号字段才有效，Ack&#x3D;Seq+1。</li>
</ul>
</blockquote>
<p><strong>需要注意的是：</strong></p>
<ol>
<li>不要将确认序号ack与标志位中的ACK搞混了。</li>
<li>确认方ack&#x3D;发起方seq+1，两端配对。</li>
</ol>
<p>TCP可靠传输的精髓：TCP连接的一方A，由操作系统动态随机选取一个32位长的序列号（Initial Sequence Number），假设A的初始序列号为1000，以该序列号为原点，对自己将要发送的每个字节的数据进行编号，1001，1002，1003…，并把自己的初始序列号ISN告诉B，让B有一个思想准备，什么样编号的数据是合法的，什么编号是非法的，比如编号900就是非法的，同时B还可以对A每一个编号的字节数据进行确认。如果A收到B确认编号为2001，则意味着字节编号为1001-2000，共1000个字节已经安全到达。</p>
<p>同理B也是类似的操作，假设B的初始序列号ISN为2000，以该序列号为原点，对自己将要发送的每个字节的数据进行编号，2001，2002，2003…，并把自己的初始序列号ISN告诉A，以便A可以确认B发送的每一个字节。如果B收到A确认编号为4001，则意味着字节编号为2001-4000，共2000个字节已经安全到达。</p>
<h2 id="一句话概括，TCP连接握手，握的是啥？通信双方数据原点的序列号！以此核心思想我们来分析二、三、四次握手的过程。-四次握手的过程"><a href="#一句话概括，TCP连接握手，握的是啥？通信双方数据原点的序列号！以此核心思想我们来分析二、三、四次握手的过程。-四次握手的过程" class="headerlink" title="一句话概括，TCP连接握手，握的是啥？通信双方数据原点的序列号！以此核心思想我们来分析二、三、四次握手的过程。### 四次握手的过程"></a>一句话概括，TCP连接握手，握的是啥？通信双方数据原点的序列号！以此核心思想我们来分析二、三、四次握手的过程。<br>### 四次握手的过程</h2><h2 id="1-1-A-发送同步信号SYN-A’s-Initial-sequence-number1-2-B-确认收到A的同步信号，并记录-A’s-ISN-到本地，命名-B’s-ACK-sequence-number1-3-B发送同步信号SYN-B’s-Initial-sequence-number1-4-A确认收到B的同步信号，并记录-B’s-ISN-到本地，命名A’s-ACK-sequence-number很显然1-2和1-3-这两个步骤可以合并，只需要三次握手，可以提高连接的速度与效率。-二次握手的过程"><a href="#1-1-A-发送同步信号SYN-A’s-Initial-sequence-number1-2-B-确认收到A的同步信号，并记录-A’s-ISN-到本地，命名-B’s-ACK-sequence-number1-3-B发送同步信号SYN-B’s-Initial-sequence-number1-4-A确认收到B的同步信号，并记录-B’s-ISN-到本地，命名A’s-ACK-sequence-number很显然1-2和1-3-这两个步骤可以合并，只需要三次握手，可以提高连接的速度与效率。-二次握手的过程" class="headerlink" title="1.1 A 发送同步信号SYN + A’s Initial sequence number1.2 B 确认收到A的同步信号，并记录 A’s ISN 到本地，命名 B’s ACK sequence number1.3 B发送同步信号SYN + B’s Initial sequence number1.4 A确认收到B的同步信号，并记录 B’s ISN 到本地，命名A’s ACK sequence number很显然1.2和1.3 这两个步骤可以合并，只需要三次握手，可以提高连接的速度与效率。### 二次握手的过程"></a>1.1 A 发送同步信号SYN + A’s Initial sequence number<br>1.2 B 确认收到A的同步信号，并记录 A’s ISN 到本地，命名 B’s ACK sequence number<br>1.3 B发送同步信号SYN + B’s Initial sequence number<br>1.4 A确认收到B的同步信号，并记录 B’s ISN 到本地，命名A’s ACK sequence number很显然1.2和1.3 这两个步骤可以合并，<strong>只需要三次握手，</strong>可以提高连接的速度与效率。<br>### 二次握手的过程</h2><ol>
<li>A 发送同步信号SYN + A’s Initial sequence number </li>
<li>B发送同步信号SYN + B’s Initial sequence number + B’s ACK sequence number这里有一个问题，A与B就A的初始序列号达成了一致，这里是1000。但是B无法知道A是否已经接收到自己的同步信号，如果这个同步信号丢失了，A和B就B的初始序列号将无法达成一致。</li>
</ol>
<p>于是TCP的设计者将SYN这个同步标志位SYN设计成占用一个字节的编号（FIN标志位也是），既然是一个字节的数据，按照TCP对有数据的TCP segment 必须确认的原则，所以在这里A必须给B一个确认，以确认A已经接收到B的同步信号。</p>
<p>有童鞋会说，如果A发给B的确认丢了，该如何？A会超时重传这个ACK吗？不会！TCP不会为没有数据的ACK超时重传。</p>
<p>那该如何是好？B如果没有收到A的ACK，会超时重传自己的SYN同步信号，一直到收到A的ACK为止。</p>
<h3 id="三次握手的过程"><a href="#三次握手的过程" class="headerlink" title="三次握手的过程"></a>三次握手的过程</h3><hr>
<p><img src="http://pb3.pstatp.com/large/pgc-image/2360db3b48404793bebd2aa472b1021c" alt="三次握手的过程"></p>
<ol>
<li><p>第一次握手：Client将标志位SYN置为1，随机产生一个值seq&#x3D;J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。</p>
</li>
<li><p>第二次握手：Server收到数据包后由标志位SYN&#x3D;1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack (number )&#x3D;J+1，随机产生一个值seq&#x3D;K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。</p>
</li>
<li><p>第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack&#x3D;K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。<br><img src="http://pb3.pstatp.com/large/pgc-image/6cddd81cd0dd4631bd075d46108d0be7" alt="三次握手的过程"></p>
</li>
</ol>
<h3 id="四次挥手的过程"><a href="#四次挥手的过程" class="headerlink" title="四次挥手的过程"></a>四次挥手的过程</h3><hr>
<p><img src="http://pb3.pstatp.com/large/pgc-image/220fa0e319b3416d8ba164e6f6da503c" alt="四次挥手的过程"></p>
<ol>
<li>客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN&#x3D;1，其序列号为seq&#x3D;u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 <strong>TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</strong></li>
<li>服务器收到连接释放报文，发出确认报文，ACK&#x3D;1，ack&#x3D;u+1，并且带上自己的序列号seq&#x3D;v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。<strong>TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。</strong></li>
<li>客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（<strong>在这之前还需要接受服务器发送的最后的数据</strong>）。</li>
<li>服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN&#x3D;1，ack&#x3D;u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq&#x3D;w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。</li>
<li>客户端收到服务器的连接释放报文后，必须发出确认，ACK&#x3D;1，ack&#x3D;w+1，而自己的序列号是seq&#x3D;u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。*<em>注意此时TCP连接还没有释放，必须经过2∗ <em>∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。</em></em></li>
<li>服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。<strong>可以看到，服务器结束TCP连接的时间要比客户端早一些。</strong></li>
</ol>
<h2 id="FAQ："><a href="#FAQ：" class="headerlink" title="### FAQ："></a><img src="http://pb3.pstatp.com/large/pgc-image/d32fc4e18f384a278836e255da381448" alt="挥手过程详解"><br>### FAQ：</h2><ol>
<li>第一个包，即A发给B的SYN 中途被丢，没有到达B<br>A会周期性超时重传，直到收到B的确认</li>
<li>第二个包，即B发给A的SYN +ACK 中途被丢，没有到达A<br>B会周期性超时重传，直到收到A的确认</li>
<li>第三个包，即A发给B的ACK 中途被丢，没有到达BA发完ACK，单方面认为TCP为 Established状态，而B显然认为TCP为Active状态：<blockquote>
<ul>
<li>假定此时双方都没有数据发送，B会周期性超时重传，直到收到A的确认，收到之后B的TCP 连接也为 Established状态，双向可以发包。</li>
<li>假定此时A有数据发送，B收到A的 Data + ACK，自然会切换为established 状态，并接受A的 Data。</li>
<li>假定B有数据发送，数据发送不了，会一直周期性超时重传SYN + ACK，直到收到A的确认才可以发送数据。</li>
</ul>
</blockquote>
</li>
</ol>
<h3 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h3><hr>
<p>TCP工作在网络OSI的七层模型中的第四层—Transport层，IP在第三层—Network层。<br>数据从应用层发下来，会在每一层都会加上头部信息，进行封装，然后再发送到数据接收端。这个基本的流程你需要知道，就是每个数据都会经过数据的封装和解封装的过程。 在OSI七层模型中，每一层的作用和对应的协议如下：<br><img src="http://pb3.pstatp.com/large/pgc-image/16942ff6c04446d4b72753665f8810b7" alt="每一层的作用和对应的协议图"></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><strong>参考链接</strong></h2><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;mp.weixin.qq.com&#x2F;s&#x2F;NIjxgx4NPn7FC4PfkHBAAQ
https:&#x2F;&#x2F;blog.csdn.net&#x2F;huangshulang1234&#x2F;article&#x2F;details&#x2F;79061438<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>network</tag>
        <tag>tcp</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaFX中多任务Task、Service、ScheduledService的使用</title>
    <url>/2019-08-01-javafx-task/</url>
    <content><![CDATA[<h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><blockquote>
<p>文中以一个文件下载作为案例介绍，看代码即可明了</p>
</blockquote>
<hr>
<ul>
<li>Task<pre class="line-numbers language-none"><code class="language-none">y

import javafx.application.Application;
import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.concurrent.Task;
import javafx.concurrent.Worker;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ProgressBar;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;

&#x2F;**
 * @author stone
 *&#x2F;

public class MyApp extends Application &#123;

    @Override
    public void start(Stage primaryStage) throws Exception &#123;
        primaryStage.setTitle(&quot;Hello World!&quot;);

        HBox hBox&#x3D;new HBox(10);

        Button startBtn &#x3D; new Button(&quot;开始&quot;);
        Button cancelBtn &#x3D; new Button(&quot;取消&quot;);
        Button resetBtn &#x3D; new Button(&quot;重置&quot;);
        Button restartBtn &#x3D; new Button(&quot;重启&quot;);
        ProgressBar progressBar &#x3D; new ProgressBar(0);
        progressBar.setPrefWidth(200);

        Label l1&#x3D;new Label(&quot;state&quot;);
        Label l2&#x3D;new Label(&quot;value&quot;);
        Label l3&#x3D;new Label(&quot;title&quot;);
        Label l4&#x3D;new Label(&quot;message&quot;);

        FlowPane root &#x3D; new FlowPane();
        hBox.getChildren().addAll(startBtn,cancelBtn,resetBtn,restartBtn,progressBar,l1,l2,l3,l4);
        root.getChildren().add(hBox);
        primaryStage.setScene(new Scene(root, 700, 300));
        primaryStage.show();

        MyTask myTask&#x3D;new MyTask();
        Thread thread&#x3D;new Thread(myTask);

        startBtn.setOnAction(event -&gt; thread.start());
        cancelBtn.setOnAction(event -&gt;
            myTask.cancel()
        );

        myTask.progressProperty().addListener(new ChangeListener&lt;Number&gt;() &#123;
            @Override
            public void changed(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue) &#123;
                progressBar.setProgress(newValue.doubleValue());
            &#125;
        &#125;);

        myTask.titleProperty().addListener(new ChangeListener&lt;String&gt;() &#123;
            @Override
            public void changed(ObservableValue&lt;? extends String&gt; observable, String oldValue, String newValue) &#123;
                l3.setText(newValue);
            &#125;
        &#125;);

        myTask.valueProperty().addListener(new ChangeListener&lt;Number&gt;() &#123;
            @Override
            public void changed(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue) &#123;
                if(newValue.doubleValue()&#x3D;&#x3D;1)&#123;
                    l2.setText(&quot;完成&quot;);
                &#125;
            &#125;
        &#125;);

        myTask.messageProperty().addListener(new ChangeListener&lt;String&gt;() &#123;
            @Override
            public void changed(ObservableValue&lt;? extends String&gt; observable, String oldValue, String newValue) &#123;
                l4.setText(newValue);
            &#125;
        &#125;);

        &#x2F;&#x2F;wordkDone指的是进度
        myTask.stateProperty().addListener(new ChangeListener&lt;Worker.State&gt;() &#123;
            @Override
            public void changed(ObservableValue&lt;? extends Worker.State&gt; observable, Worker.State oldValue, Worker.State newValue) &#123;
                l1.setText(newValue.toString());
            &#125;
        &#125;);

        &#x2F;&#x2F;异常监听 监听现在状态是否有异常并打印
        myTask.exceptionProperty().addListener(new ChangeListener&lt;Throwable&gt;() &#123;
            @Override
            public void changed(ObservableValue&lt;? extends Throwable&gt; observable, Throwable oldValue, Throwable newValue) &#123;
                System.out.println(newValue);
            &#125;
        &#125;);

    &#125;

    public static void main(String[] args) &#123;
        launch(args);
    &#125;
&#125;

class MyTask extends Task&lt;Number&gt;
&#123;

    public MyTask() &#123;
        super();
    &#125;

    @Override
    protected Number call() throws Exception &#123;

        this.updateTitle(&quot;copy&quot;);
        FileInputStream fis&#x3D;new FileInputStream(new File(&quot;C:\\Users\\nrgh\\Desktop\\区块链\\porep时空证明.pdf&quot;));
        FileOutputStream fos&#x3D;new FileOutputStream(new File(&quot;C:\\Users\\nrgh\\Desktop\\区块链\\1.pdf&quot;));
        &#x2F;&#x2F;获取字节长
        double max&#x3D;fis.available();
        byte[] readbyte&#x3D;new byte[10000];
        int i&#x3D;0;
        &#x2F;&#x2F;目前完成进度
        double sum&#x3D;0;
        &#x2F;&#x2F;进度
        double progress&#x3D;0;
        while((i&#x3D;fis.read(readbyte,0,readbyte.length))!&#x3D;-1)&#123;


            &#x2F;*if (this.isCancelled())&#123;
                break;
            &#125;*&#x2F;
            fos.write(readbyte,0,i);
            sum&#x3D;sum+i;
            &#x2F;&#x2F;当前和总共
            this.updateProgress(sum,max);
            progress&#x3D;sum&#x2F;max;
            System.out.println(progress);
            Thread.sleep(50);
            if (progress&lt;0.5)&#123;
                this.updateMessage(&quot;请耐心等待&quot;);
            &#125;else if (progress&lt;0.8)&#123;
                this.updateMessage(&quot;马上就好&quot;);
            &#125;else if (progress&lt;1)&#123;
                this.updateMessage(&quot;即将完成&quot;);
            &#125;else if (progress&gt;&#x3D;1)&#123;
                this.updateMessage(&quot;搞定了&quot;);
            &#125;
        &#125;

        fis.close();
        fos.close();
        System.out.println(Platform.isFxApplicationThread());
        return progress;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>Service<pre class="line-numbers language-none"><code class="language-none">package com.hc.demo;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.concurrent.Service;
import javafx.concurrent.Task;
import javafx.concurrent.Worker;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ProgressBar;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;

&#x2F;**
 * @author stone
 *&#x2F;

public class MyApp extends Application &#123;

    @Override
    public void start(Stage primaryStage) throws Exception &#123;
        primaryStage.setTitle(&quot;Hello World!&quot;);

        HBox hBox&#x3D;new HBox(20);

        Button startBtn &#x3D; new Button(&quot;开始&quot;);
        Button cancelBtn &#x3D; new Button(&quot;取消&quot;);
        Button resetBtn &#x3D; new Button(&quot;重置&quot;);
        Button restartBtn &#x3D; new Button(&quot;重启&quot;);
        ProgressBar progressBar &#x3D; new ProgressBar(0);
        progressBar.setPrefWidth(200);

        Label l1&#x3D;new Label(&quot;state&quot;);
        Label l2&#x3D;new Label(&quot;value&quot;);
        Label l3&#x3D;new Label(&quot;title&quot;);
        Label l4&#x3D;new Label(&quot;message&quot;);

        FlowPane root &#x3D; new FlowPane();
        hBox.getChildren().addAll(startBtn,cancelBtn,restartBtn,resetBtn,progressBar,l1,l2,l3,l4);
        root.getChildren().add(hBox);
        primaryStage.setScene(new Scene(root, 700, 300));
        primaryStage.show();

        MyService ms&#x3D;new MyService();

        startBtn.setOnAction(event -&gt;
            ms.start()
        );
        cancelBtn.setOnAction(event -&gt;
            ms.cancel()
        );
        resetBtn.setOnAction(event -&gt; &#123;
            ms.reset();
            progressBar.setProgress(0);
        &#125;);
        restartBtn.setOnAction(event -&gt; &#123;
            ms.restart();
        &#125;);


        ms.progressProperty().addListener(new ChangeListener&lt;Number&gt;() &#123;
            @Override
            public void changed(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue) &#123;
                progressBar.setProgress(newValue.doubleValue());
            &#125;
        &#125;);

        ms.titleProperty().addListener(new ChangeListener&lt;String&gt;() &#123;
            @Override
            public void changed(ObservableValue&lt;? extends String&gt; observable, String oldValue, String newValue) &#123;
                l3.setText(newValue);
            &#125;
        &#125;);

        ms.valueProperty().addListener(new ChangeListener&lt;Number&gt;() &#123;
            @Override
            public void changed(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue) &#123;
                if(newValue.doubleValue()&#x3D;&#x3D;1)&#123;
                    l2.setText(&quot;完成&quot;);
                &#125;
            &#125;
        &#125;);

        ms.messageProperty().addListener(new ChangeListener&lt;String&gt;() &#123;
            @Override
            public void changed(ObservableValue&lt;? extends String&gt; observable, String oldValue, String newValue) &#123;
                l4.setText(newValue);
            &#125;
        &#125;);

        &#x2F;&#x2F;wordkDone指的是进度
        ms.stateProperty().addListener(new ChangeListener&lt;Worker.State&gt;() &#123;
            @Override
            public void changed(ObservableValue&lt;? extends Worker.State&gt; observable, Worker.State oldValue, Worker.State newValue) &#123;
                l1.setText(newValue.toString());
            &#125;
        &#125;);

        &#x2F;&#x2F;异常监听 监听现在状态是否有异常并打印
        ms.exceptionProperty().addListener(new ChangeListener&lt;Throwable&gt;() &#123;
            @Override
            public void changed(ObservableValue&lt;? extends Throwable&gt; observable, Throwable oldValue, Throwable newValue) &#123;
                System.out.println(newValue);
            &#125;
        &#125;);

    &#125;

    public static void main(String[] args) &#123;
        launch(args);
    &#125;
&#125;


class MyService extends Service&lt;Number&gt;
&#123;

    @Override
    protected void executeTask(Task&lt;Number&gt; task) &#123;
        super.executeTask(task);
        task.valueProperty().addListener(new ChangeListener&lt;Number&gt;() &#123;
            @Override
            public void changed(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue) &#123;
                System.out.println(&quot;executeTask valueProperty&quot;);
            &#125;
        &#125;);
    &#125;

    @Override
    protected void ready() &#123;
        super.ready();
        System.out.println(&quot;ready&quot;+Platform.isFxApplicationThread());
    &#125;

    @Override
    protected void scheduled() &#123;
        super.scheduled();
        System.out.println(&quot;scheduled &quot;+Platform.isFxApplicationThread());
    &#125;

    @Override
    protected void running() &#123;
        super.running();
        System.out.println(&quot;running &quot;+Platform.isFxApplicationThread());
    &#125;

    @Override
    protected void succeeded() &#123;
        super.succeeded();
        System.out.println(&quot;succeeded &quot;+Platform.isFxApplicationThread());
    &#125;

    @Override
    protected void cancelled() &#123;
        super.cancelled();
        System.out.println(&quot;cancelled &quot;+Platform.isFxApplicationThread());
    &#125;

    @Override
    protected void failed() &#123;
        super.failed();
        System.out.println(&quot;failed &quot;+Platform.isFxApplicationThread());
    &#125;

    @Override
    protected Task&lt;Number&gt; createTask() &#123;

        Task&lt;Number&gt; task&#x3D;new Task&lt;Number&gt;() &#123;
            @Override
            protected Number call() throws Exception &#123;

                this.updateTitle(&quot;copy&quot;);
                FileInputStream fis&#x3D;new FileInputStream(new File(&quot;C:\\Users\\nrgh\\Desktop\\区块链\\porep时空证明.pdf&quot;));
                FileOutputStream fos&#x3D;new FileOutputStream(new File(&quot;C:\\Users\\nrgh\\Desktop\\区块链\\1.pdf&quot;));
                &#x2F;&#x2F;获取字节长
                double max&#x3D;fis.available();
                byte[] readbyte&#x3D;new byte[10000];
                int i&#x3D;0;
                &#x2F;&#x2F;目前完成进度
                double sum&#x3D;0;
                &#x2F;&#x2F;进度
                double progress&#x3D;0;
                while((i&#x3D;fis.read(readbyte,0,readbyte.length))!&#x3D;-1)&#123;

                    &#x2F;*if (this.isCancelled())&#123;
                        break;
                    &#125;*&#x2F;
                    fos.write(readbyte,0,i);
                    sum&#x3D;sum+i;
                    &#x2F;&#x2F;当前大小和总共大小
                    this.updateProgress(sum,max);
                    progress&#x3D;sum&#x2F;max;
                    &#x2F;*System.out.println(progress);*&#x2F;
                    Thread.sleep(50);
                    if (progress&lt;0.5)&#123;
                        this.updateMessage(&quot;请耐心等待&quot;);
                    &#125;else if (progress&lt;0.8)&#123;
                        this.updateMessage(&quot;马上就好&quot;);
                    &#125;else if (progress&lt;1)&#123;
                        this.updateMessage(&quot;即将完成&quot;);
                    &#125;else if (progress&gt;&#x3D;1)&#123;
                        this.updateMessage(&quot;搞定了&quot;);
                    &#125;
                &#125;

                fis.close();
                fos.close();
                System.out.println(Platform.isFxApplicationThread());
                return progress;
            &#125;
        &#125;;
        return task;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>ScheduledService<pre class="line-numbers language-none"><code class="language-none">package com.hc.demo;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.concurrent.ScheduledService;
import javafx.concurrent.Service;
import javafx.concurrent.Task;
import javafx.concurrent.Worker;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ProgressBar;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;
import javafx.util.Duration;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;

&#x2F;**
 * @author stone
 *&#x2F;

public class MyApp extends Application &#123;

    @Override
    public void start(Stage primaryStage) throws Exception &#123;
        primaryStage.setTitle(&quot;Hello World!&quot;);

        HBox hBox&#x3D;new HBox(20);

        Button startBtn &#x3D; new Button(&quot;开始&quot;);
        Button cancelBtn &#x3D; new Button(&quot;取消&quot;);
        Button resetBtn &#x3D; new Button(&quot;重置&quot;);
        Button restartBtn &#x3D; new Button(&quot;重启&quot;);
        ProgressBar progressBar &#x3D; new ProgressBar(0);
        progressBar.setPrefWidth(200);

        Label l1&#x3D;new Label(&quot;state&quot;);
        Label l2&#x3D;new Label(&quot;value&quot;);
        Label l3&#x3D;new Label(&quot;title&quot;);
        Label l4&#x3D;new Label(&quot;message&quot;);

        FlowPane root &#x3D; new FlowPane();
        hBox.getChildren().addAll(startBtn,cancelBtn,restartBtn,resetBtn,progressBar,l1,l2,l3,l4);
        root.getChildren().add(hBox);
        primaryStage.setScene(new Scene(root, 700, 300));
        primaryStage.show();

        MyScheduledService mss&#x3D;new MyScheduledService();
        &#x2F;&#x2F;等待5s开始、



        mss.setDelay(Duration.seconds(5));
        &#x2F;&#x2F;程序执行时间
        mss.setPeriod(Duration.seconds(1));
        &#x2F;&#x2F;启动失败重新启动
        mss.setRestartOnFailure(true);
        &#x2F;&#x2F;程序启动失败后重新启动次数
        mss.setMaximumFailureCount(4);

        startBtn.setOnAction(event -&gt;&#123;
            mss.start();
            System.out.println(&quot;开始&quot;);
        &#125;);
        cancelBtn.setOnAction(event -&gt;&#123;
            mss.cancel();
            System.out.println(&quot;取消&quot;);
        &#125;);
        resetBtn.setOnAction(event -&gt; &#123;
            mss.reset();
            System.out.println(&quot;重置&quot;);
        &#125;);
        restartBtn.setOnAction(event -&gt; &#123;
            mss.restart();
            System.out.println(&quot;重启&quot;);
        &#125;);

        mss.valueProperty().addListener(new ChangeListener&lt;Number&gt;() &#123;
            @Override
            public void changed(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue) &#123;
                if (newValue!&#x3D;null)&#123;
                    l2.setText(String.valueOf(newValue));
                &#125;
            &#125;
        &#125;);

        mss.lastValueProperty().addListener(new ChangeListener&lt;Number&gt;() &#123;
            @Override
            public void changed(ObservableValue&lt;? extends Number&gt; observable, Number oldValue, Number newValue) &#123;
                if (newValue!&#x3D;null)&#123;
                    System.out.println(&quot;lastValue&#x3D;&quot;+newValue.intValue());
                &#125;
            &#125;
        &#125;);

    &#125;

    public static void main(String[] args) &#123;
        launch(args);
    &#125;
&#125;

class MyScheduledService extends ScheduledService&lt;Number&gt;&#123;

    int sum&#x3D;0;
    @Override
    protected Task&lt;Number&gt; createTask() &#123;

        System.out.println(&quot;createTask()&quot;);

        Task&lt;Number&gt; task&#x3D;new Task&lt;Number&gt;() &#123;

            @Override
            protected void updateValue(Number value) &#123;
                super.updateValue(value);
                if (value.intValue()&#x3D;&#x3D;10)&#123;
                    MyScheduledService.this.cancel();
                    System.out.println(&quot;任务取消&quot;);
                &#125;
            &#125;

            @Override
            protected Number call() throws Exception &#123;
                sum&#x3D;sum+1;
                System.out.println(sum);
                return sum;
            &#125;
        &#125;;
        return task;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><hr>
<p><a href="https://wiki.openjdk.java.net/display/OpenJFX/Main">https://wiki.openjdk.java.net/display/OpenJFX/Main</a></p>
<p><a href="https://openjfx.io/javadoc/11/">https://openjfx.io/javadoc/11/</a></p>
<p><a href="https://openjfx.io/javadoc/11/javafx.graphics/javafx/concurrent/package-summary.html">https://openjfx.io/javadoc/11/javafx.graphics/javafx/concurrent/package-summary.html</a></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>JavaFX</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装Git以及Git常见命令</title>
    <url>/2020-02-20-mac-install-git/</url>
    <content><![CDATA[<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><hr>
<ol>
<li>在Mac的终端上输入git检测是否安装git，如果没有，点击弹出的“安装”按钮。</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash">https://git-scm.com/downloads<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="2">
<li>安装完成之后，在终端输入 <code>git --version</code> 查看版本信息</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">git</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<span id="more"></span>
<ol start="3">
<li>创建一个全局用户名、全局邮箱作为配置信息</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"your_name"</span>  
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"your_email@youremail.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="4">
<li>配置信息可以更改，以后想要更改使用上面指令就可以。同时可以使用<code>git config --list</code>指令查看Git的配置信息。</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--list</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="5">
<li>Git默认对大小写不敏感，也就是说，将一个文件名某个字母做了大小写转换的修改Git是忽略这个改动的，导致在同步代码时候会出现错误，所以建议把Git设置成大小写敏感。</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">git</span> config core.ignorecase <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="6">
<li>生成密匙</li>
</ol>
<ul>
<li>Git关联远端仓库时候需要提供公钥，本地保存私钥，每次与远端仓库交互时候，远端仓库会用公钥来验证交互者身份。使用以下指令生成密钥，如果有提示，一路点击回车。</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"your_email@youremail.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>生成密钥后，在本地的&#x2F;Users&#x2F;当前电脑用户&#x2F;.ssh目录下会生成两个文件id_rsa、id_rsa.pub，id_rsa文件保存的是私钥，保存于本地，id_rsa.pub文件保存的是公钥，需要将里面内容上传到远端仓库。</li>
</ul>
<ol start="7">
<li>获取密匙字符串</li>
</ol>
<ul>
<li>输入cd指令，进入当前用户目录</li>
<li>输入ls -a指令，查看当前用户目录下所有文件，包括隐藏文件</li>
<li>输入cd .ssh指令，进入.ssh目录</li>
<li>输入ls指令，查看.ssh目录下的文件</li>
<li>输入cat id_rsa.pub指令，查看id_rsa.pub文件中内容</li>
</ul>
<ol start="8">
<li>打开你的github账号，在<code>Settings</code>中的左侧边导航中找到<code>SSH and GPG keys</code>，点击左面面板右上方的<code>New SSH key</code>添加密匙。</li>
</ol>
<ul>
<li>图片中的<code>Title</code>填写自己的备注标题名称（自定义），<code>Key</code>填写刚才<code>id_rsa.pub</code>中的内容。<br><img src="http://p1.pstatp.com/origin/pgc-image/7e8f447727584940bcd0ef5e46928cbc" alt="Github添加密匙"></li>
<li>填写完毕后点击<code>Add SSH key</code>按钮，这样就添加OK啦~~。</li>
</ul>
<h3 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h3><hr>
<ul>
<li>切换分支</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">git</span> checkout <span class="token operator">&lt;</span>branch_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="tag相关命令"><a href="#tag相关命令" class="headerlink" title="tag相关命令"></a>tag相关命令</h4><ul>
<li>查看所有分支</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">git</span> tag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>查看具体某条分支</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">git</span> show <span class="token operator">&lt;</span>tag_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>新建tag</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">git</span> tag v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>删除tag</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">git</span> tag <span class="token parameter variable">-d</span> v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><ul>
<li>合并分支</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">git</span> merge <span class="token operator">&lt;</span>branch<span class="token operator">></span>hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h3><ul>
<li>git克隆远程仓库指定分支，并在本地重命名</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">git</span> clone <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>远程指定分支<span class="token operator">></span> <span class="token operator">&lt;</span>repo address<span class="token operator">></span> <span class="token operator">&lt;</span>dir name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mac</tag>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>清空github远程仓库并重新上传</title>
    <url>/2020-08-15-empty-the-record-and-reupload-it-to-github/</url>
    <content><![CDATA[<ol>
<li>进入本地仓库，删除.git目录</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token variable">$REPO_DIR</span>
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> .git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="2">
<li>重新git初始化并添加commit</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">git</span> init
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token comment"># 重新添加所有的文件</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"first commit"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<ol start="3">
<li>添加远程仓库链接</li>
</ol>
<p>在添加远程仓库时，需要设置远程仓库的代号，本教程记为origin</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:xxxx/<span class="token variable">$REPO_DIR</span>.git
<span class="token comment">#git remote add origin git@github.com:mhxw/mhxw.github.io.git</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="4">
<li>强制提交，覆盖远程仓库的commits历史记录</li>
</ol>
<p>假设提交到远程仓库的master分支，则强制提交脚本如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">git</span> push <span class="token parameter variable">-f</span> origin master 
<span class="token comment"># 或者 git push --force origin master</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>推送tag到远程</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">git</span> tag v0.1.0
<span class="token function">git</span> push <span class="token parameter variable">--force</span> origin <span class="token parameter variable">--tags</span> v0.1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>后续讨论</strong></p>
<ul>
<li><p>细心的朋友可能会发现，上述操作之后，如果你还记得历史记录中某个commit的链接，你仍然可以通过链接访问到该commit下的文件，甚至可以基于这个commit重新创建新分支。为什么会出现这种情况呢？这其实和Git本身的设计机制有关，主要是为了提高容错率，防止你因为一些误操作弄丢了某些commits进而造成无法挽回的结果。</p>
</li>
<li><p>实际上，这些commits并没有马上被清理掉，仅仅是你的所有分支或标签无法访问到它们，这些commits被称为unreachable commits. 它们通常会被缓存一段时间，这个周期默认是30天，你也可以通过git命令行手动修改缓存周期或者手动清理。由于Github也是建立在Git这个版本管理工具上的网站，所以它也有这个机制。虽然它们在缓存期内仍然可以被访问到，但你clone到本地并不会包含它们，也就是说，你并不能在本地删除Github上已经存在的unreachable commits，因为本地根本访问不到它们（<a href="https://docs.github.com/cn/github/committing-changes-to-your-project/commit-exists-on-github-but-not-in-my-local-clone">存在于 GitHub 上但不存在于本地克隆中的提交</a>）。如果不着急的话，你可以等30天之后再试试看是否还能访问这些unreachable commits的链接；但如果你很着急，你可以联系<a href="https://support.github.com/">Github Support</a>帮你清理这些你不想保留的commits。</p>
</li>
<li><p>所以，如果你只是维护个人的文件仓库的话，不需要担心这个问题，你在新机器上clone下来的仍然是缩减大小之后的仓库，而Github上的unreachable commit会在缓存期后被清理掉。如果是与他人协作的仓库，还是谨慎使用<code>git push --force</code>这种危险的操作吧，确实遇到需要这个操作的场景时，考虑用更安全的<code>git push --force-with-lease</code>. 如果你强制提交之后发现后悔了，找到想恢复的commit的链接并创建新分支就可以找回那个commit所在历史分支之前的内容啦。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>如何上传和删除js库到npmjs.com</title>
    <url>/2020-08-15-how-do-i-publish-to-npmjs/</url>
    <content><![CDATA[<ol>
<li>npm init 初始化你的包名和版本，之后也可以在package.json文件里修改</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">npm</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="2">
<li>npm login 登录你的npm账号，输账户，密码即可</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">npm</span> login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<span id="more"></span>
<p>3.如果是淘宝镜像源，要切换成npm.js的镜像源</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry http://registry.npmjs.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="4">
<li>npm publish 上传包，你发布的包名不能和npm现有的包名重复，可以去 <code>https://www.npmjs.com</code> 查询一下你设置的包名有没有存在的，没有存在的就可以发布了。</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">npm</span> publish<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>出现下面这行的时候，说明上传成功</p>
<ol start="5">
<li>npm unpublish 包名@版本号 取消上传的包，头两次上传的时候可能会让输两步验证码</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">npm</span> unpublish <span class="token operator">&lt;</span>package name<span class="token operator">></span>@<span class="token operator">&lt;</span>version<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <categories>
        <category>技术运营</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装docker</title>
    <url>/2020-08-22-install-docker-on-ubuntu/</url>
    <content><![CDATA[<p>移除系统旧版本</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> remove <span class="token function">docker</span> docker-engine docker-ce docker.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>更新索引库</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<span id="more"></span>
<p>安装一些必要的系统工具（安装以下包以使apt可以通过HTTPS使用存储库）</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> apt-transport-https ca-certificates <span class="token function">curl</span> software-properties-common<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>添加Docker官方的GPG密钥或者阿里云的</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>写入软件源信息</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">sudo</span> add-apt-repository <span class="token string">"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> stable"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>更新并安装 Docker-CE</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>验证docker运行状态</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash">systemctl status <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>启动docker</p>
<p>使用加速器（采用阿里云加速器）</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors

<span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker
<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'
&#123;
  "registry-mirrors": ["https://b02pnumc.mirror.aliyuncs.com"]
&#125;
EOF</span>
<span class="token function">sudo</span> systemctl daemon-reload
<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Ubuntu 18.04上安装Discourse Docker镜像</title>
    <url>/2020-08-23-how-to-install-discourse-on-ubuntu-18-04/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Docker环境中安装Discourse，并配置独立的Nginx和SSL</p>
<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>可查看<a href="/2020/08/22/install-docker-on-ubuntu/">ubuntu安装docker</a></p>
<h2 id="下载最新版"><a href="#下载最新版" class="headerlink" title="下载最新版"></a>下载最新版</h2><p>在下载和安装Discourse之前，请创建<code>/var/discourse</code>目录。这是您所有与Discourse相关的文件所在的位置：</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> /var/discourse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>将官方<a href="https://github.com/discourse/discourse_docker">Discourse Docker镜像</a> 复制到<code>/var/discourse</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/discourse/discourse_docker.git /var/discourse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<span id="more"></span>
<h2 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h2><p>进入目录</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token builtin class-name">cd</span> /var/discourse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>启动脚本</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">sudo</span> ./discourse-setup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>Discourse安装过程会询问以下问题</p>
<ul>
<li>您的discourse的主机名</li>
</ul>
<p>discourse.your_domain：您的域名</p>
<ul>
<li>管理员帐户的电子邮件地址配置</li>
</ul>
<p>以qq邮箱为例</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token comment"># SMTP 服务器</span>
SMTP server address：smtp.qq.com
<span class="token comment"># 给用户发邮件的邮箱账户</span>
SMTP user name：send@domain.com
<span class="token comment"># 端口</span>
SMTP port：587
<span class="token comment"># SMTP密码</span>
SMTP password：这里填qq邮箱授权码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="注册管理员账户"><a href="#注册管理员账户" class="headerlink" title="注册管理员账户"></a>注册管理员账户</h2><p>上述均填好之后，等待2-8min的安装，安装成功之后打开你的域名就可以看到管理员注册。如果这一步出现问题无法收到管理员发的邮件，再继续下面步骤，否则可以略过。</p>
<ul>
<li>编辑app.yml文件</li>
</ul>
<ol>
<li>位置在<code>containers/app.yml</code>，如果没有复制下面这个文件</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token builtin class-name">cd</span> /var/discourse
<span class="token function">cp</span> samples/standalone.yml containers/app.yml
<span class="token function">vim</span> containers/app.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>修改以下几处内容</li>
</ol>
<p>完整代码可参考最底部代码块</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token comment"># 网站域名</span>
DISCOURSE_HOSTNAME: <span class="token string">'domain.com'</span>
<span class="token comment"># 管理员邮箱</span>
DISCOURSE_DEVELOPER_EMAILS: <span class="token string">'admin@qq.com'</span>

DISCOURSE_SMTP_ADDRESS: smtp.qq.com
DISCOURSE_SMTP_PORT: <span class="token number">587</span>
DISCOURSE_SMTP_USER_NAME: xxxx@foxmail.com
<span class="token comment"># qq邮箱授权码 在qq邮箱=》设置=》账户=》开启smtp服务</span>
DISCOURSE_SMTP_PASSWORD:<span class="token string">"pwd"</span>
DISCOURSE_SMTP_ENABLE_START_TLS: <span class="token boolean">true</span> 

<span class="token comment">## 发件邮箱：配置文件最底下找这一行</span>
- exec: rails r <span class="token string">"SiteSetting.notification_email='xxxx@foxmail.com'"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="升级Discourse"><a href="#升级Discourse" class="headerlink" title="升级Discourse"></a>升级Discourse</h2><p>升级过程中注意规则的改变，例如升级可能加了新的规则自动删除不活跃的好友，多留意官方动态</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token builtin class-name">cd</span> /var/discourse
<span class="token function">sudo</span> <span class="token function">git</span> pull
<span class="token function">sudo</span> ./launcher rebuild app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="配置Nginx和SSL"><a href="#配置Nginx和SSL" class="headerlink" title="配置Nginx和SSL"></a>配置Nginx和SSL</h2><ol>
<li>编辑<code>app.yml</code>文件，做以下操作</li>
</ol>
<ul>
<li>注释掉中的所有ssl模板templates</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token comment">#- "templates/web.ssl.template.yml"</span>
<span class="token comment">#- "templates/web.letsencrypt.ssl.template.yml"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>添加套接字模板：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">- &quot;templates&#x2F;web.socketed.template.yml&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>注意事项<br>套接字模板配置文件中也需要配置discourse.conf文件，如果没有按照路径创建一个并配置</p>
</blockquote>
<p><code>web.socketed.template.yml</code>配置文件如下</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash">run:
  - file:
     path: /etc/runit/1.d/remove-old-socket
     chmod: <span class="token string">"+x"</span>
     contents: <span class="token operator">|</span>
        <span class="token comment">#!/bin/bash</span>
        <span class="token function">rm</span> <span class="token parameter variable">-f</span> /shared/nginx.http*.sock
  - file:
     path: /etc/runit/3.d/remove-old-socket
     chmod: <span class="token string">"+x"</span>
     contents: <span class="token operator">|</span>
        <span class="token comment">#!/bin/bash</span>
        <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /shared/nginx.http*.sock
  - replace:
     filename: <span class="token string">"/etc/nginx/conf.d/discourse.conf"</span>
     from: /listen <span class="token number">80</span><span class="token punctuation">;</span>/
     to: <span class="token operator">|</span>
       listen unix:/shared/nginx.http.sock<span class="token punctuation">;</span>
       set_real_ip_from unix:<span class="token punctuation">;</span>
  - replace:
     filename: <span class="token string">"/etc/nginx/conf.d/discourse.conf"</span>
     from: /listen <span class="token number">443</span> ssl http2<span class="token punctuation">;</span>/
     to: <span class="token operator">|</span>
       listen unix:/shared/nginx.https.sock ssl http2<span class="token punctuation">;</span>
       set_real_ip_from unix:<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>discourse.conf</code>配置文件如下（和下面步骤的nginx.conf配置代码块基本一样）</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash">server <span class="token punctuation">&#123;</span>
  listen <span class="token number">80</span><span class="token punctuation">;</span>
  server_name mhxw.com<span class="token punctuation">;</span>
  <span class="token builtin class-name">return</span> <span class="token number">301</span> https://<span class="token variable">$host</span><span class="token variable">$request_uri</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

server <span class="token punctuation">&#123;</span>
  listen       <span class="token number">443</span> ssl<span class="token punctuation">;</span>
  server_name  mhxw.com<span class="token punctuation">;</span>

  ssl_certificate      /mhxw/nginx/conf/ssl/mhxw.crt<span class="token punctuation">;</span>
  ssl_certificate_key  /mhxw/nginx/conf/ssl/mhxw.key<span class="token punctuation">;</span>
  ssl_session_timeout 5m<span class="token punctuation">;</span>
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2<span class="token punctuation">;</span> <span class="token comment">#按照这个协议配置</span>
  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:<span class="token operator">!</span>aNULL:<span class="token operator">!</span>MD5:<span class="token operator">!</span>RC4:<span class="token operator">!</span>DHE<span class="token punctuation">;</span> <span class="token comment">#按照这个套件配置</span>
  ssl_prefer_server_ciphers on<span class="token punctuation">;</span>
  access_log  /mhxw/nginx/logs/access.log  main<span class="token punctuation">;</span>
  error_log  /mhxw/nginx/logs/error.log  debug<span class="token punctuation">;</span>


  location / <span class="token punctuation">&#123;</span>
   add_header Content-Security-Policy <span class="token string">"upgrade-insecure-requests;connect-src *"</span><span class="token punctuation">;</span>
      proxy_pass http://unix:/var/discourse/shared/standalone/nginx.http.sock:<span class="token punctuation">;</span>
      proxy_set_header Host <span class="token variable">$http_host</span><span class="token punctuation">;</span>
      proxy_http_version <span class="token number">1.1</span><span class="token punctuation">;</span>
      proxy_set_header X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>
      proxy_set_header X-Forwarded-Proto https<span class="token punctuation">;</span>
      proxy_set_header X-Real-IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>注释掉所有暴露的端口：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token comment">#- "8090:80"   # http</span>
<span class="token comment">#- "8091:443" # https</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>修改好以后，<code>app.yml</code>配置文件如下</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash">templates:
  - <span class="token string">"templates/postgres.template.yml"</span>
  - <span class="token string">"templates/redis.template.yml"</span>
  - <span class="token string">"templates/web.template.yml"</span>
  - <span class="token string">"templates/web.ratelimited.template.yml"</span>
  - <span class="token string">"templates/web.socketed.template.yml"</span>
<span class="token comment">## Uncomment these two lines if you wish to add Lets Encrypt (https)</span>
  <span class="token comment">#- "templates/web.ssl.template.yml"</span>
  <span class="token comment">#- "templates/web.letsencrypt.ssl.template.yml"</span>

<span class="token comment">## which TCP/IP ports should this container expose?</span>
<span class="token comment">## If you want Discourse to share a port with another webserver like Apache or nginx,</span>
<span class="token comment">## see https://meta.discourse.org/t/17247 for details</span>
expose:
        <span class="token comment">#- "8090:80"   # http</span>
        <span class="token comment">#- "8091:443" # https</span>

params:
  db_default_text_search_config: <span class="token string">"pg_catalog.english"</span>

  <span class="token comment">## Set db_shared_buffers to a max of 25% of the total memory.</span>
  <span class="token comment">## will be set automatically by bootstrap based on detected RAM, or you can override</span>
  <span class="token comment">#db_shared_buffers: "256MB"</span>

  <span class="token comment">## can improve sorting performance, but adds memory usage per-connection</span>
  <span class="token comment">#db_work_mem: "40MB"</span>

  <span class="token comment">## Which Git revision should this container use? (default: tests-passed)</span>
  <span class="token comment">#version: tests-passed</span>

env:
  <span class="token environment constant">LANG</span><span class="token builtin class-name">:</span> en_US.UTF-8
  <span class="token comment"># DISCOURSE_DEFAULT_LOCALE: en</span>

  <span class="token comment">## How many concurrent web requests are supported? Depends on memory and CPU cores.</span>
  <span class="token comment">## will be set automatically by bootstrap based on detected CPUs, or you can override</span>
  <span class="token comment">#UNICORN_WORKERS: 3</span>

  <span class="token comment">## TODO: The domain name this Discourse instance will respond to</span>
  <span class="token comment">## Required. Discourse will not work with a bare IP number.</span>
  DISCOURSE_HOSTNAME: <span class="token string">'mhxw.com'</span>

  <span class="token comment">## Uncomment if you want the container to be started with the same</span>
  <span class="token comment">## hostname (-h option) as specified above (default "$hostname-$config")</span>
  <span class="token comment">#DOCKER_USE_HOSTNAME: true</span>

  <span class="token comment">## TODO: List of comma delimited emails that will be made admin and developer</span>
  <span class="token comment">## on initial signup example 'user1@example.com,user2@example.com'</span>
  DISCOURSE_DEVELOPER_EMAILS: <span class="token string">'hi@mhxw.com'</span>

  <span class="token comment">## TODO: The SMTP mail server used to validate new accounts and send notifications</span>
  <span class="token comment"># SMTP ADDRESS, username, and password are required</span>
  <span class="token comment"># WARNING the char '#' in SMTP password can cause problems!</span>
  DISCOURSE_SMTP_ADDRESS: smtp.qq.com
  DISCOURSE_SMTP_PORT: <span class="token number">587</span>
  DISCOURSE_SMTP_USER_NAME: sender@mhxw.com
  DISCOURSE_SMTP_PASSWORD: kknvfghgfqrbcee
  DISCOURSE_SMTP_ENABLE_START_TLS: <span class="token boolean">true</span>           <span class="token comment"># (optional, default true)</span>

  <span class="token comment">## If you added the Lets Encrypt template, uncomment below to get a free SSL certificate</span>
  <span class="token comment">#LETSENCRYPT_ACCOUNT_EMAIL: me@example.com</span>

  <span class="token comment">## The http or https CDN address for this Discourse instance (configured to pull)</span>
  <span class="token comment">## see https://meta.discourse.org/t/14857 for details</span>
  <span class="token comment">#DISCOURSE_CDN_URL: https://discourse-cdn.example.com</span>

<span class="token comment">## The Docker container is stateless; all data is stored in /shared</span>
volumes:
  - volume:
      host: /var/discourse/shared/standalone
      guest: /shared
  - volume:
      host: /var/discourse/shared/standalone/log/var-log
      guest: /var/log

<span class="token comment">## Plugins go here</span>
<span class="token comment">## see https://meta.discourse.org/t/19157 for details</span>
hooks:
  after_code:
    - exec:
        cd: <span class="token variable">$home</span>/plugins
        cmd:
          - <span class="token function">git</span> clone https://github.com/discourse/docker_manager.git

<span class="token comment">## Any custom commands to run after building</span>
run:
  - exec: <span class="token builtin class-name">echo</span> <span class="token string">"Beginning of custom commands"</span>
  <span class="token comment">## If you want to set the 'From' email address for your first registration, uncomment and change:</span>
  <span class="token comment">## After getting the first signup email, re-comment the line. It only needs to run once.</span>
  - exec: rails r <span class="token string">"SiteSetting.notification_email='sender@mhxw.com'"</span>
  - exec: <span class="token builtin class-name">echo</span> <span class="token string">"End of custom commands"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>编辑<code>nginx.conf</code>并重新加载</li>
</ol>
<p>nginx.conf 配置文件如下</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash">server <span class="token punctuation">&#123;</span>
  listen <span class="token number">80</span><span class="token punctuation">;</span>
  server_name mhxw.com<span class="token punctuation">;</span>
  <span class="token builtin class-name">return</span> <span class="token number">301</span> https://<span class="token variable">$host</span><span class="token variable">$request_uri</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

server <span class="token punctuation">&#123;</span>
  listen       <span class="token number">443</span> ssl<span class="token punctuation">;</span>
  server_name  mhxw.com<span class="token punctuation">;</span>

  ssl_certificate      /mhxw/nginx/conf/ssl/mhxw.crt<span class="token punctuation">;</span>
  ssl_certificate_key  /mhxw/nginx/conf/ssl/mhxw.key<span class="token punctuation">;</span>
  ssl_session_timeout 5m<span class="token punctuation">;</span>
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2<span class="token punctuation">;</span> <span class="token comment">#按照这个协议配置</span>
  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:<span class="token operator">!</span>aNULL:<span class="token operator">!</span>MD5:<span class="token operator">!</span>RC4:<span class="token operator">!</span>DHE<span class="token punctuation">;</span> <span class="token comment">#按照这个套件配置</span>
  ssl_prefer_server_ciphers on<span class="token punctuation">;</span>
  access_log  /mhxw/nginx/logs/access.log  main<span class="token punctuation">;</span>
  error_log  /mhxw/nginx/logs/error.log  debug<span class="token punctuation">;</span>


  location / <span class="token punctuation">&#123;</span>
   add_header Content-Security-Policy <span class="token string">"upgrade-insecure-requests;connect-src *"</span><span class="token punctuation">;</span>
      proxy_pass http://unix:/var/discourse/shared/standalone/nginx.http.sock:<span class="token punctuation">;</span>
      proxy_set_header Host <span class="token variable">$http_host</span><span class="token punctuation">;</span>
      proxy_http_version <span class="token number">1.1</span><span class="token punctuation">;</span>
      proxy_set_header X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>
      proxy_set_header X-Forwarded-Proto https<span class="token punctuation">;</span>
      proxy_set_header X-Real-IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-discourse-on-ubuntu-18-04">https://www.digitalocean.com/community/tutorials/how-to-install-discourse-on-ubuntu-18-04</a><br><a href="https://meta.discoursecn.org/">https://meta.discoursecn.org/</a><br><a href="https://meta.discourse.org/t/running-other-websites-on-the-same-machine-as-discourse/17247">https://meta.discourse.org/t/running-other-websites-on-the-same-machine-as-discourse/17247</a><br><a href="https://meta.discourse.org/t/wanting-to-run-discourse-alongside-apache/125075">https://meta.discourse.org/t/wanting-to-run-discourse-alongside-apache/125075</a></p>
]]></content>
      <categories>
        <category>技术运营</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯云ubuntu系统切换到root权限</title>
    <url>/2020-08-23-tencent-cloud-ubuntu-system-gets-root-permissions/</url>
    <content><![CDATA[<ol>
<li>生成root用户</li>
</ol>
<p>设置root的密码，建议和ubuntu的密码一样</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">sudo</span> <span class="token function">passwd</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<span id="more"></span>
<ol start="2">
<li>编辑<code>sshd_config</code>文件</li>
</ol>
<ul>
<li>编辑以下文件</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/ssh/sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li><p>找到<code>PermitRootLogin</code>，重新复制一行然后将其后面的文本改为yes</p>
</li>
<li><p>保存并退出</p>
</li>
<li><p>重新启动ssh服务</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">ssh</span> restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="3">
<li>重新登录</li>
</ol>
<p>使用root用户名登录ssh，操作完成</p>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 上搭建本地私链测试环境-Grafana</title>
    <url>/2020-09-06-how-to-install-ganache-in-windows/</url>
    <content><![CDATA[<p>Grafana 是一款可用于开发、部署和测试 DAPP 的工具。Grafana有2种模式，一种是桌面版程序，另一种是命令行工具。</p>
<h3 id="安装-Grafana-GUI"><a href="#安装-Grafana-GUI" class="headerlink" title="安装 Grafana GUI"></a>安装 Grafana GUI</h3><ol>
<li>下载并安装</li>
</ol>
<p><a href="https://github.com/trufflesuite/ganache-ui/releases">https://github.com/trufflesuite/ganache-ui/releases</a></p>
<span id="more"></span>

<ol start="2">
<li>如果是首次打开，将看到以下画面</li>
</ol>
<p>点击<code>QUICKSTART</code> 下拉列表选择启动以太坊节点还是 Corda 网络，然后点击<code>QUICKSTART</code>按钮</p>
<p><img src="/images/htigiw-1.png"></p>
<p>启动后可以看到默认创建的10个账户，每个账户有100ETH测试余额。</p>
<p><img src="/images/htigiw-2.png"></p>
<p>默认是 127.0.0.1，只有本地能访问，修改为 WLAN 局域网内可以访问。</p>
<p>然后点击右上角<code>SAVE AND RESTART</code> 按钮即可</p>
<p><img src="/images/htigiw-3.png"></p>
<h2 id="其他扩展"><a href="#其他扩展" class="headerlink" title="其他扩展"></a>其他扩展</h2><p>一般我使用的时候会指定其助记词，方便remix协调进行本地测试。</p>
<ul>
<li>点击导航中的 <code>ACCOUNTS &amp; KEYS</code> 标签</li>
<li>输入助记词</li>
<li>点击 <code>SAVE AND RESTART</code> 按钮</li>
</ul>
<p><img src="/images/htigiw-4.png"></p>
<h3 id="安装-Grafana-cli"><a href="#安装-Grafana-cli" class="headerlink" title="安装 Grafana-cli"></a>安装 Grafana-cli</h3><ol>
<li><p>Grafana-cli 需要nodejs环境支持，你需要提前安装好nodejs。</p>
</li>
<li><p>安装命令行工具</p>
</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">-g</span> ganache-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>测试是否安装成功</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ganache-cli
Ganache CLI v6.12.2 <span class="token punctuation">(</span>ganache-core: <span class="token number">2.13</span>.2<span class="token punctuation">)</span>

Available Accounts
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> 0x988dd84720cAA7800EA9238c40cDe70dd742FDB5 <span class="token punctuation">(</span><span class="token number">100</span> ETH<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 0x847e1CDF10f1536d82E29127E325e18B72376622 <span class="token punctuation">(</span><span class="token number">100</span> ETH<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 0x50B4593e2d398c847793800A776b22090E597bA0 <span class="token punctuation">(</span><span class="token number">100</span> ETH<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 0xbD9e7E15DD4742e0307F1a48447E158Caca55b96 <span class="token punctuation">(</span><span class="token number">100</span> ETH<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> 0x17587644d95469A6350F469cc2F61bc1eFd2Ec18 <span class="token punctuation">(</span><span class="token number">100</span> ETH<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> 0xcfDDa4eE474E12D637062bcAb1192b9cEc6413Df <span class="token punctuation">(</span><span class="token number">100</span> ETH<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> 0x1796834121a6d23143A8512103Ed40a7FDEEC02F <span class="token punctuation">(</span><span class="token number">100</span> ETH<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> 0xd71fa6F6a05075F417185Ff1ECDf64B934eFf35F <span class="token punctuation">(</span><span class="token number">100</span> ETH<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> 0x1f1D337F5CFdD98E9387f83F5160BdA8610414ae <span class="token punctuation">(</span><span class="token number">100</span> ETH<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> 0x7Ed47D8eEDC7ea89255C48fc6D3770d3201cAf40 <span class="token punctuation">(</span><span class="token number">100</span> ETH<span class="token punctuation">)</span>

Private Keys
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> 0x3fc18c32e6017e4d476c319ea680c7da4d0be6cd80e3d2ec73a077ec42e8e8c4
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 0x24fa6950fd42cd606f930fb0fe5fb5d5018c1860429e2f078b3a32ed580eed0f
<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 0xceb0848a858c36f56205d314fa4749038f82df680997265d318b065f74353611
<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 0x0f45414a6b0f4f00427387285f216193c99520d8154649ffcc845ee1148d9dcb
<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> 0xab8e53620017549024e71557437180ec8051704fbe7ba9523fb6a7f0ada907f0
<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> 0x2ab38d69af95c77ff0fc37c3ae785a21b14eea420ce8b1f21065e8361470dc96
<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> 0x8b3de86adb04689b529ec04deaa9336898098935ab0801c203e4b964b490ddc0
<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> 0xe75f05d2f244a0b4e7a605665331a9d6b77978b484fd951f60ad7c9a3238a0a5
<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> 0xb17db4754e3fe58a7f31826104ffb6e77320f05e4c50b1ec0979da12cebe77b2
<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> 0x27be30607ab722436247997b671ba7a3696185c86ebdd0adcbac5ad1569c7df0

HD Wallet
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
Mnemonic:      suggest cage magnet amused punch business arrange confirm speed tackle burst <span class="token function">install</span>
Base HD Path:  m/44<span class="token string">'/60'</span>/0'/0/<span class="token punctuation">&#123;</span>account_index<span class="token punctuation">&#125;</span>

Gas Price
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token number">20000000000</span>

Gas Limit
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token number">6721975</span>

Call Gas Limit
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token number">9007199254740991</span>

Listening on <span class="token number">127.0</span>.0.1:8545
<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>智能合约</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>grafana</tag>
        <tag>solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04上安装nodejs和npm</title>
    <url>/2020-09-13-install-nodejs-and-npm-on-ubuntu-18-04/</url>
    <content><![CDATA[<h3 id="更新ubuntu软件源"><a href="#更新ubuntu软件源" class="headerlink" title="更新ubuntu软件源"></a>更新ubuntu软件源</h3><p>按顺序执行</p>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> software-properties-common
<span class="token function">sudo</span> add-apt-repository ppa:chris-lea/node.js
<span class="token function">sudo</span> <span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="安装NodeJS和NPM"><a href="#安装NodeJS和NPM" class="headerlink" title="安装NodeJS和NPM"></a>安装NodeJS和NPM</h3><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nodejs
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libssl1.0-dev nodejs-dev node-gyp <span class="token function">npm</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<span id="more"></span>
<h4 id="设置镜像源"><a href="#设置镜像源" class="headerlink" title="设置镜像源"></a>设置镜像源</h4><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org
<span class="token function">sudo</span> <span class="token function">npm</span> config list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><ul>
<li>查看安装的所有软件</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash">dpkg <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">grep</span> nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>查看软件安装的路径</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash">dpkg <span class="token parameter variable">-L</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">ftp</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>script</span></div><code class="language-bash">https://github.com/nodesource/distributions<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>ubuntu</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>HD钱包</title>
    <url>/2020-10-11-hd-wallet/</url>
    <content><![CDATA[<p>HD是 Hierarchical Deterministic 的缩写，意思是分层确定性。先确定根私钥root，然后根据索引计算每一层的子私钥。</p>
<p>确定性钱包，可以简单理解为：通过一个seed（种子）派生出一系列的子私钥。解决了非确定性钱包中私钥互不关联，不方便备份的问题。</p>
<p>HD钱包就是现在最常见的“高级版”确定性钱包。最早基于 BIP32 协议实现（目前常用的还有 BIP39 、BIP44协议）。</p>
<p>BIP32, BIP39, BIP44 协议已经事实上成为了数字货币钱包的工业标准。BIP32 描述了HD钱包的各个层级密钥的产生过程。 bip39方便钱包的备份，BIP44 实现了钱包的多账号和多币种支持。</p>
<h3 id="BIP32-协议"><a href="#BIP32-协议" class="headerlink" title="BIP32 协议"></a>BIP32 协议</h3><p>BIP32 协议描述了HD钱包的标准，主密钥，链码，子密钥等的产生过程。</p>
<p>主密钥和主链码的生成过程伪代码描述：</p>
<pre class="line-numbers language-none"><code class="language-none">#主密钥
def generate_master_private_key_and_master_chain_code():
    mnemonic &#x3D; generate_mnemonic(word_list)
    seed &#x3D; generate_root_seed(mnemonic, salt)
    key &#x3D; hmac-sha512(seed)
    master_private_key, master_chain_code &#x3D; key[0:256], key[256:512]

    return master_private_key, master_chain_code

#子密钥，从父密钥、链码和地址索引派生
def child_key_derivation(parent_private_key, parent_chain_code, index):
    key &#x3D; hmac-sha512(parent_private_key + parent_chain_code + index)
    child_key, child_chain_code &#x3D; key[0:256], key[256, 512]

    return child_key, child_chain_code<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="BIP39-协议"><a href="#BIP39-协议" class="headerlink" title="BIP39 协议"></a>BIP39 协议</h3><p>BIP39 协议描述了如何从随机种子产生助记词的过程，具体的算法步骤：</p>
<ol>
<li>创建一个128到256位的随机序列（熵）。</li>
<li>提出SHA256哈希前几位（熵长&#x2F; 32），就可以创造一个随机序列的校验和。</li>
<li>将校验和添加到随机序列的末尾。</li>
<li>将序列划分为包含11位的不同部分。</li>
<li>将每个包含11位部分的值与一个已经预先定义2048个单词的字典做对应。</li>
<li>生成的有顺序的单词组就是助记码。</li>
</ol>
<p>助记词产生过程的伪代码描述(以12个助记词的产生为例)：</p>
<pre class="line-numbers language-none"><code class="language-none">#word_list为bip39协议规定的2048个英文单词
def generate_mnemonic(word_list):
    random128bit &#x3D; csprng()
    checksum &#x3D; sha256(random128bit)[0:4]
    entropy &#x3D; random128bit.append(checksum)
    word_indexes &#x3D; split_every_11bit(entropy)
    
    mnemonic &#x3D; []
    for idx in word_indexes:
        mnemonic.append(word_list[idx])

    return mnemonic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>从助记词产生产生root seed的过程：</p>
<ol start="7">
<li>PBKDF2密钥延伸函数的第一个参数是从步骤6生成的助记符。</li>
<li>PBKDF2密钥延伸函数的第二个参数是盐。 由字符串常数“助记词”与可选的用户提供的密码字符串连接组成。</li>
<li>PBKDF2使用HMAC-SHA512算法，使用2048次哈希来延伸助记符和盐参数，产生一个512位的值作为其最终输出。 这个512位的值就是种子。<br>算法的伪代码描述：</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">def generate_root_seed(mnemonic, salt):
return PBKDF2(mnemonic, salt, iterations&#x3D;2048)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在 BIP32 协议中，将会使用这个<code>root seed</code>作为根种子生成主密钥，主链码等。</p>
<h3 id="BIP44-协议"><a href="#BIP44-协议" class="headerlink" title="BIP44 协议"></a>BIP44 协议</h3><p>基于 BIP32 协议，BIP44 提供了多账号多币种钱包的支持, 定义了钱包的5级树形结构：</p>
<pre class="line-numbers language-none"><code class="language-none">m &#x2F; purpose&#39; &#x2F; coin_type&#39; &#x2F; account&#39; &#x2F; change &#x2F; address_index<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>purpose: 协议相关的常数44，代表使用 BIP44</li>
<li>coin_type: 货币种类，一个主账号可以管理多种货币</li>
<li>account: 账户名，用户可以用自己设定</li>
<li>change: 常数0表示钱包公开账户，用来接收其他账户的付款；常数1表示交易的找零钱地址，不公开</li>
<li>index：子钱包递增地址，32位地址空间</li>
</ul>
<p>一些例子：</p>
<pre class="line-numbers language-none"><code class="language-none">m &#x2F; 44&#39; &#x2F; 0&#39; &#x2F; 0&#39; &#x2F; 0 &#x2F; 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">m &#x2F; 44&#39; &#x2F; 0&#39; &#x2F; 0&#39; &#x2F; 0 &#x2F; 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">m &#x2F; 44&#39; &#x2F; 0&#39; &#x2F; 0&#39; &#x2F; 1 &#x2F; 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">m &#x2F; 44&#39; &#x2F; 0&#39; &#x2F; 0&#39; &#x2F; 1 &#x2F; 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;iancoleman.io&#x2F;bip39&#x2F;
https:&#x2F;&#x2F;github.com&#x2F;ethereum&#x2F;EIPs&#x2F;issues&#x2F;84
http:&#x2F;&#x2F;ibloodline.com&#x2F;assets&#x2F;master-bitcoin&#x2F;ch05.html
https:&#x2F;&#x2F;github.com&#x2F;bitcoin&#x2F;bips&#x2F;blob&#x2F;master&#x2F;bip-0032.mediawiki
https:&#x2F;&#x2F;github.com&#x2F;bitcoin&#x2F;bips&#x2F;blob&#x2F;master&#x2F;bip-0039.mediawiki
https:&#x2F;&#x2F;github.com&#x2F;bitcoin&#x2F;bips&#x2F;blob&#x2F;master&#x2F;bip-0044.mediawiki
https:&#x2F;&#x2F;github.com&#x2F;jayphbee&#x2F;blockchain_notes&#x2F;blob&#x2F;master&#x2F;HD_wallet.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>钱包</tag>
      </tags>
  </entry>
  <entry>
    <title>在Ubuntu 18.04上安装Discourse Docker镜像</title>
    <url>/2021-02-27-install-discourse-on-ubuntu-18-04/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Discourse是一个开源的讨论平台。您可以将Discourse用作邮件列表，讨论论坛或长型聊天室。在本教程中，您将使用Docker在独立的环境中安装Discourse。<br>Docker环境中安装Discourse，并配置独立的Nginx和SSL</p>
<h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><ul>
<li>一台至少具有2GB RAM的Ubuntu 18.04服务器，一个sudo非root用户和一个防火墙。</li>
<li>安装nginx</li>
<li>安装Docker</li>
<li>域名的A记录指向部署服务器IP</li>
<li>SMTP 邮件服务器 （本教程中使用QQ邮箱）<span id="more"></span></li>
</ul>
<h2 id="下载Discourse"><a href="#下载Discourse" class="headerlink" title="下载Discourse"></a>下载Discourse</h2><p>在下载和安装Discourse之前，请创建&#x2F;var&#x2F;discourse目录。这是您所有与Discourse相关的文件所在的位置：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> /var/discourse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>最后，将官方 <a href="https://github.com/discourse/discourse_docker">Discourse Docker Image</a> 复制到&#x2F;var&#x2F;discourse：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/discourse/discourse_docker.git /var/discourse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>进入Discourse目录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /var/discourse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>将独立的样本配置文件复制到<code>container/app.yml</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> samples/standalone.yml containers/app.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="编辑Discourse配置"><a href="#编辑Discourse配置" class="headerlink" title="编辑Discourse配置"></a>编辑Discourse配置</h2><p>编辑<code>container/app.yml</code>文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> containers/app.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol>
<li>先修改以下几处内容</li>
</ol>
<p>域名修改、SMTP服务器参数修改</p>
<ul>
<li>gov.mhxw.life：论坛域名</li>
<li><a href="mailto:&#97;&#x64;&#x6d;&#x69;&#x6e;&#64;&#109;&#x68;&#120;&#x77;&#46;&#108;&#105;&#x66;&#x65;">&#97;&#x64;&#x6d;&#x69;&#x6e;&#64;&#109;&#x68;&#120;&#x77;&#46;&#108;&#105;&#x66;&#x65;</a>：管理员邮箱</li>
<li><a href="mailto:&#x78;&#x78;&#x78;&#x78;&#64;&#x66;&#x6f;&#120;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;">&#x78;&#x78;&#x78;&#x78;&#64;&#x66;&#x6f;&#120;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;</a>：发送信息邮箱</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 网站域名</span>
DISCOURSE_HOSTNAME: <span class="token string">'gov.mhxw.life'</span>
<span class="token comment"># 管理员邮箱</span>
DISCOURSE_DEVELOPER_EMAILS: <span class="token string">'admin@mhxw.life'</span>

DISCOURSE_SMTP_ADDRESS: smtp.qq.com
DISCOURSE_SMTP_PORT: <span class="token number">587</span>
DISCOURSE_SMTP_USER_NAME: xxxx@foxmail.com
<span class="token comment"># qq邮箱授权码 在qq邮箱=》设置=》账户=》开启smtp服务</span>
DISCOURSE_SMTP_PASSWORD:<span class="token string">"pwd"</span>
DISCOURSE_SMTP_ENABLE_START_TLS: <span class="token boolean">true</span> 

<span class="token comment">## 发件邮箱：配置文件最底下找这一行</span>
- exec: rails r <span class="token string">"SiteSetting.notification_email='xxxx@foxmail.com'"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>注释掉中的所有ssl模板templates</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#- "templates/web.ssl.template.yml"</span>
<span class="token comment">#- "templates/web.letsencrypt.ssl.template.yml"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="3">
<li>注释掉所有暴露的端口：</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#- "80:80"   # http</span>
<span class="token comment">#- "443:443" # https</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="4">
<li>添加套接字模板：</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">- <span class="token string">"templates/web.socketed.template.yml"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>注意事项<br>套接字模板配置文件中也需要配置discourse.conf文件，如果没有按照路径创建一个并配置</p>
</blockquote>
<p><code>web.socketed.template.yml</code>配置文件如下</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">run</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">file</span><span class="token punctuation">:</span>
     <span class="token key atrule">path</span><span class="token punctuation">:</span> /etc/runit/1.d/remove<span class="token punctuation">-</span>old<span class="token punctuation">-</span>socket
     <span class="token key atrule">chmod</span><span class="token punctuation">:</span> <span class="token string">"+x"</span>
     <span class="token key atrule">contents</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
        #!/bin/bash
        rm -f /shared/nginx.http*.sock</span>
  <span class="token punctuation">-</span> <span class="token key atrule">file</span><span class="token punctuation">:</span>
     <span class="token key atrule">path</span><span class="token punctuation">:</span> /etc/runit/3.d/remove<span class="token punctuation">-</span>old<span class="token punctuation">-</span>socket
     <span class="token key atrule">chmod</span><span class="token punctuation">:</span> <span class="token string">"+x"</span>
     <span class="token key atrule">contents</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
        #!/bin/bash
        rm -rf /shared/nginx.http*.sock</span>
  <span class="token punctuation">-</span> <span class="token key atrule">replace</span><span class="token punctuation">:</span>
     <span class="token key atrule">filename</span><span class="token punctuation">:</span> <span class="token string">"/etc/nginx/conf.d/discourse.conf"</span>
     <span class="token key atrule">from</span><span class="token punctuation">:</span> /listen 80;/
     <span class="token key atrule">to</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
       listen unix:/shared/nginx.http.sock;
       set_real_ip_from unix:;</span>
  <span class="token punctuation">-</span> <span class="token key atrule">replace</span><span class="token punctuation">:</span>
     <span class="token key atrule">filename</span><span class="token punctuation">:</span> <span class="token string">"/etc/nginx/conf.d/discourse.conf"</span>
     <span class="token key atrule">from</span><span class="token punctuation">:</span> /listen 443 ssl http2;/
     <span class="token key atrule">to</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
       listen unix:/shared/nginx.https.sock ssl http2;
       set_real_ip_from unix:;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>discourse.conf配置文件如下（和下面步骤的nginx.conf配置代码块基本一样）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>
  listen <span class="token number">80</span><span class="token punctuation">;</span>
  server_name gov.mhxw.life<span class="token punctuation">;</span>
  <span class="token builtin class-name">return</span> <span class="token number">301</span> https://<span class="token variable">$host</span><span class="token variable">$request_uri</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

server <span class="token punctuation">&#123;</span>
  listen       <span class="token number">443</span> ssl<span class="token punctuation">;</span>
  server_name  gov.mhxw.life<span class="token punctuation">;</span>

  ssl_certificate      /mhxw/nginx/conf/ssl/mhxw.crt<span class="token punctuation">;</span>
  ssl_certificate_key  /mhxw/nginx/conf/ssl/mhxw.key<span class="token punctuation">;</span>
  ssl_session_timeout 5m<span class="token punctuation">;</span>
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2<span class="token punctuation">;</span> <span class="token comment">#按照这个协议配置</span>
  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:<span class="token operator">!</span>aNULL:<span class="token operator">!</span>MD5:<span class="token operator">!</span>RC4:<span class="token operator">!</span>DHE<span class="token punctuation">;</span> <span class="token comment">#按照这个套件配置</span>
  ssl_prefer_server_ciphers on<span class="token punctuation">;</span>
  access_log  /mhxw/nginx/logs/access.log  main<span class="token punctuation">;</span>
  error_log  /mhxw/nginx/logs/error.log  debug<span class="token punctuation">;</span>


  location / <span class="token punctuation">&#123;</span>
   add_header Content-Security-Policy <span class="token string">"upgrade-insecure-requests;connect-src *"</span><span class="token punctuation">;</span>
      proxy_pass http://unix:/var/discourse/shared/standalone/nginx.http.sock:<span class="token punctuation">;</span>
      proxy_set_header Host <span class="token variable">$http_host</span><span class="token punctuation">;</span>
      proxy_http_version <span class="token number">1.1</span><span class="token punctuation">;</span>
      proxy_set_header X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>
      proxy_set_header X-Forwarded-Proto https<span class="token punctuation">;</span>
      proxy_set_header X-Real-IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="5">
<li>以上内容修改好以后，app.yml配置文件如下</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">templates:
  - <span class="token string">"templates/postgres.template.yml"</span>
  - <span class="token string">"templates/redis.template.yml"</span>
  - <span class="token string">"templates/web.template.yml"</span>
  - <span class="token string">"templates/web.ratelimited.template.yml"</span>
  - <span class="token string">"templates/web.socketed.template.yml"</span>
<span class="token comment">## Uncomment these two lines if you wish to add Lets Encrypt (https)</span>
  <span class="token comment">#- "templates/web.ssl.template.yml"</span>
  <span class="token comment">#- "templates/web.letsencrypt.ssl.template.yml"</span>

<span class="token comment">## which TCP/IP ports should this container expose?</span>
<span class="token comment">## If you want Discourse to share a port with another webserver like Apache or nginx,</span>
<span class="token comment">## see https://meta.discourse.org/t/17247 for details</span>
expose:
        <span class="token comment">#- "80:80"   # http</span>
        <span class="token comment">#- "443:443" # https</span>

params:
  db_default_text_search_config: <span class="token string">"pg_catalog.english"</span>

  <span class="token comment">## Set db_shared_buffers to a max of 25% of the total memory.</span>
  <span class="token comment">## will be set automatically by bootstrap based on detected RAM, or you can override</span>
  <span class="token comment">#db_shared_buffers: "256MB"</span>

  <span class="token comment">## can improve sorting performance, but adds memory usage per-connection</span>
  <span class="token comment">#db_work_mem: "40MB"</span>

  <span class="token comment">## Which Git revision should this container use? (default: tests-passed)</span>
  <span class="token comment">#version: tests-passed</span>

env:
  <span class="token environment constant">LANG</span><span class="token builtin class-name">:</span> en_US.UTF-8
  <span class="token comment"># DISCOURSE_DEFAULT_LOCALE: en</span>

  <span class="token comment">## How many concurrent web requests are supported? Depends on memory and CPU cores.</span>
  <span class="token comment">## will be set automatically by bootstrap based on detected CPUs, or you can override</span>
  <span class="token comment">#UNICORN_WORKERS: 3</span>

  <span class="token comment">## TODO: The domain name this Discourse instance will respond to</span>
  <span class="token comment">## Required. Discourse will not work with a bare IP number.</span>
  DISCOURSE_HOSTNAME: <span class="token string">'gov.mhxw.life'</span>

  <span class="token comment">## Uncomment if you want the container to be started with the same</span>
  <span class="token comment">## hostname (-h option) as specified above (default "$hostname-$config")</span>
  <span class="token comment">#DOCKER_USE_HOSTNAME: true</span>

  <span class="token comment">## TODO: List of comma delimited emails that will be made admin and developer</span>
  <span class="token comment">## on initial signup example 'user1@example.com,user2@example.com'</span>
  DISCOURSE_DEVELOPER_EMAILS: <span class="token string">'admin@mhxw.life'</span>

  <span class="token comment">## TODO: The SMTP mail server used to validate new accounts and send notifications</span>
  <span class="token comment"># SMTP ADDRESS, username, and password are required</span>
  <span class="token comment"># WARNING the char '#' in SMTP password can cause problems!</span>
  DISCOURSE_SMTP_ADDRESS: smtp.qq.com
  DISCOURSE_SMTP_PORT: <span class="token number">587</span>
  DISCOURSE_SMTP_USER_NAME: xxxx@foxmail.com
  DISCOURSE_SMTP_PASSWORD: kknvfghgfqrbcee
  DISCOURSE_SMTP_ENABLE_START_TLS: <span class="token boolean">true</span>           <span class="token comment"># (optional, default true)</span>

  <span class="token comment">## If you added the Lets Encrypt template, uncomment below to get a free SSL certificate</span>
  <span class="token comment">#LETSENCRYPT_ACCOUNT_EMAIL: me@example.com</span>

  <span class="token comment">## The http or https CDN address for this Discourse instance (configured to pull)</span>
  <span class="token comment">## see https://meta.discourse.org/t/14857 for details</span>
  <span class="token comment">#DISCOURSE_CDN_URL: https://discourse-cdn.example.com</span>

<span class="token comment">## The Docker container is stateless; all data is stored in /shared</span>
volumes:
  - volume:
      host: /var/discourse/shared/standalone
      guest: /shared
  - volume:
      host: /var/discourse/shared/standalone/log/var-log
      guest: /var/log

<span class="token comment">## Plugins go here</span>
<span class="token comment">## see https://meta.discourse.org/t/19157 for details</span>
hooks:
  after_code:
    - exec:
        cd: <span class="token variable">$home</span>/plugins
        cmd:
          - <span class="token function">git</span> clone https://github.com/discourse/docker_manager.git

<span class="token comment">## Any custom commands to run after building</span>
run:
  - exec: <span class="token builtin class-name">echo</span> <span class="token string">"Beginning of custom commands"</span>
  <span class="token comment">## If you want to set the 'From' email address for your first registration, uncomment and change:</span>
  <span class="token comment">## After getting the first signup email, re-comment the line. It only needs to run once.</span>
  - exec: rails r <span class="token string">"SiteSetting.notification_email='xxxx@foxmail.com'"</span>
  - exec: <span class="token builtin class-name">echo</span> <span class="token string">"End of custom commands"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="启动Discourse"><a href="#启动Discourse" class="headerlink" title="启动Discourse"></a>启动Discourse</h2><p>启动引导程序：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./launcher bootstrap app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>引导过程完成后，启动Discourse：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./launcher start app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="升级或重新部署Discourse"><a href="#升级或重新部署Discourse" class="headerlink" title="升级或重新部署Discourse"></a>升级或重新部署Discourse</h2><p>您的Discourse平台现在可以使用了。如果将来需要升级Discourse，则可以从命令行中通过从Git存储库中提取最新版本的代码并重建应用程序来进行升级：</p>
<blockquote>
<p>注意</p>
<p>升级过程中注意规则的改变，例如升级可能加了新的规则自动删除不活跃的好友，多留意官方动态</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /var/discourse
<span class="token function">sudo</span> <span class="token function">git</span> pull
<span class="token function">sudo</span> ./launcher rebuild app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.vultr.com/docs/how-to-install-discourse-on-ubuntu-18-04-87257">https://www.vultr.com/docs/how-to-install-discourse-on-ubuntu-18-04-87257</a><br><a href="https://meta.discourse.org/t/running-other-websites-on-the-same-machine-as-discourse/17247">https://meta.discourse.org/t/running-other-websites-on-the-same-machine-as-discourse/17247</a><br><a href="https://meta.discourse.org/t/wanting-to-run-discourse-alongside-apache/125075">https://meta.discourse.org/t/wanting-to-run-discourse-alongside-apache/125075</a></p>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>docker</tag>
        <tag>discourse</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下查找进程id并强制停止进程的脚本</title>
    <url>/2021-0-23-script-to-find-process-id-and-force-stop-process-under-linux/</url>
    <content><![CDATA[<p>写一个简易脚本用来自动获取进程id并优雅关闭进程</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1、先获取进程id的方法，可以采用<code>awk</code>命令来获取</p>
<blockquote>
<p>这里要把这个grep这个用 -v 来过滤掉，然后用awk命令，提取第2个参数就是进程id了</p>
</blockquote>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">ps -ef | grep 你的进程 | grep -v grep | awk '&#123;print $2&#125;'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li>关闭进程</li>
</ol>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">kill -15 你的进程id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="脚本代码"><a href="#脚本代码" class="headerlink" title="脚本代码"></a>脚本代码</h2><blockquote>
<p>注意：使用时，需要把第一行的 sp-tomcat 替换换成你希望杀的进程</p>
</blockquote>
<blockquote>
<p>说明：可能有人会说查找进程出现多个进程id时，脚本会报错的。其实是不会的，出现多个进程id时，他们之间是有空格隔开来了的。刚好kill命令一次杀多个进程时，进程id需要用空格。所以不需要用for循环来杀进程</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">mhxw_pid&#x3D;&#96;ps -ef | grep sp-tomcat | grep -v grep | awk &#39;&#123;print $2&#125;&#39;&#96;
if [ -z &quot;$mhxw_pid&quot; ];
then
  echo &quot;[ not find sp-tomcat pid ]&quot;
else
  echo &quot;find result: $sp_pid &quot;
  kill -15 $sp_pid
fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>在Ubuntu18.04 上采用Docker 安装bitwardenrs和实现自动备份数据库</title>
    <url>/2021-03-06-install-bitwarden-on-ubuntu-18-04/</url>
    <content><![CDATA[<p>文章使用环境为ubuntu，使用docker运行bitwarden_rs服务。</p>
<h2 id="一、安装docker"><a href="#一、安装docker" class="headerlink" title="一、安装docker"></a>一、安装docker</h2><p>简单安装法：</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt install docker.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看docker是否安装成功</p>
<pre class="line-numbers language-none"><code class="language-none">docker -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<span id="more"></span>
<p>启动docker</p>
<pre class="line-numbers language-none"><code class="language-none">sudo systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>设置docker服务开机自启动</p>
<pre class="line-numbers language-none"><code class="language-none">sudo systemctl enable docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>国内服务器建议配置镜像加速器</p>
</blockquote>
<h2 id="二、部署bitwarden-rs"><a href="#二、部署bitwarden-rs" class="headerlink" title="二、部署bitwarden_rs"></a>二、部署bitwarden_rs</h2><p>bitwarden_rs是由rust编写的非官方客户端，优点是内存占用小，和官方兼容性高。</p>
<p>仓库：<a href="https://github.com/dani-garcia/bitwarden_rs">https://github.com/dani-garcia/bitwarden_rs</a></p>
<ul>
<li><p>使用Docker拉取bitwarden_rs镜像</p>
</li>
<li><pre class="line-numbers language-none"><code class="language-none">docker pull bitwardenrs&#x2F;server:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>运行<br>其中<code>bw-data</code>为持久化保存的数据：网站图标缓存、密钥和数据库文件，您可以根据自己的需要调整路径。</p>
<pre class="line-numbers language-none"><code class="language-none">docker run -d --name bitwarden -v &#x2F;bw-data&#x2F;:&#x2F;data&#x2F; -p 8800:80 bitwardenrs&#x2F;server:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><ul>
<li>禁用新用户注册</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">docker run -d --name bitwarden \
  -e SIGNUPS_ALLOWED&#x3D;false \
  -v &#x2F;bw-data&#x2F;:&#x2F;data&#x2F; \
  -p 8800:80 \
  bitwardenrs&#x2F;server:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>禁用邀请<br>即使禁用注册，组织管理员或所有者也可以邀请用户加入组织。受邀请后，即使<code>SIGNUPS_ALLOWED</code>实际上设置为，他们也可以向受邀请的电子邮件注册false。您可以通过将<code>INVITATIONS_ALLOWED</code>env变量设置为来完全禁用此功能false：<pre class="line-numbers language-none"><code class="language-none">docker run -d --name bitwarden \
  -e SIGNUPS_ALLOWED&#x3D;false \
  -e INVITATIONS_ALLOWED&#x3D;false \
  -v &#x2F;bw-data&#x2F;:&#x2F;data&#x2F; \
  -p 8800:80 \
  bitwardenrs&#x2F;server:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>启动管理员页面<br><a href="https://github.com/dani-garcia/bitwarden_rs/wiki">https://github.com/dani-garcia/bitwarden_rs/wiki</a></li>
</ul>
<h2 id="三、安装nginx做反向代理与支持ssl"><a href="#三、安装nginx做反向代理与支持ssl" class="headerlink" title="三、安装nginx做反向代理与支持ssl"></a>三、安装nginx做反向代理与支持ssl</h2><ul>
<li>安装nginx<pre class="line-numbers language-none"><code class="language-none">sudo apt install nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
修改配置文件开启ssl与反向代理，在<code>/etc/nginx/conf.d</code>下添加配置文件<code>youdomain.com.conf</code>，youdomain.com为用来访问的域名。</li>
</ul>
<p>文件内容：</p>
<pre class="line-numbers language-none"><code class="language-none">server
    &#123;
        listen 80;
        #listen [::]:80;
        server_name youdomain.com;            #把youdomain.com修改为用来访问的域名
		rewrite ^&#x2F;(.*) https:&#x2F;&#x2F;$server_name&#x2F;$1 permanent;
    &#125;

server
    &#123;
        listen 443 ssl http2;
        #listen [::]:443 ssl http2;
        server_name youdomain.com;            #把youdomain.com修改为用来访问的域名
        
        location &#x2F; &#123;
            proxy_pass http:&#x2F;&#x2F;127.0.0.1:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        &#125;
  
        location &#x2F;notifications&#x2F;hub &#123;
            proxy_pass http:&#x2F;&#x2F;127.0.0.1:3012;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection &quot;upgrade&quot;;
        &#125;
  
        location &#x2F;notifications&#x2F;hub&#x2F;negotiate &#123;
            proxy_pass http:&#x2F;&#x2F;127.0.0.1:8000;
        &#125;
        # 加入robots.txt 防止搜索引擎爬虫抓取
        location &#x3D; &#x2F;robots.txt &#123;
            root &#x2F;home&#x2F;wwwroot&#x2F;Bitwarden;
        &#125;
  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在vhost目录&#x2F;home&#x2F;wwwroot&#x2F;Bitwarden创建一个robots.txt 文件，写入以下内容禁止搜索引擎爬虫抓取</p>
<pre class="line-numbers language-none"><code class="language-none">User-agent: *
Disallow: &#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>重启nginx<pre class="line-numbers language-none"><code class="language-none">service nginx restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
<h2 id="四、备份数据"><a href="#四、备份数据" class="headerlink" title="四、备份数据"></a>四、备份数据</h2><p>数据无价,设置定时备份数据库。bitwarden-rs的数据库在<code>/bw-data</code>目录，里面还有密钥文件和网站图标缓存，这些都是可选的，以下脚本只备份数据库。</p>
<pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;bash
# https:&#x2F;&#x2F;gist.github.com&#x2F;vitobotta&#x2F;3a6c53c3693ff77cd0c920d0a541622d#file-bitwarden_rs-backup-sh-L25
export LC_ALL&#x3D;C

now&#x3D;$(date +&quot;%Y%m%d-%H%M%S&quot;)
parent_dir&#x3D;&quot;&#x2F;home&#x2F;&lt;USER&gt;&#x2F;bitwarden&#x2F;bw-data&quot;
backups_dir&#x3D;&quot;$&#123;parent_dir&#125;&#x2F;backups&quot;
log_file&#x3D;&quot;$&#123;backups_dir&#125;&#x2F;backup-progress.log.$&#123;now&#125;&quot;
tmp_sqlite_backup&#x3D;&quot;backups&#x2F;db.sqlite3.$&#123;now&#125;&quot;
archive&#x3D;&quot;backups&#x2F;backup.tar.gz.$&#123;now&#125;&quot;

error () &#123;
  printf &quot;%s: %s\n&quot; &quot;$(basename &quot;$&#123;BASH_SOURCE&#125;&quot;)&quot; &quot;$&#123;1&#125;&quot; &gt;&amp;2
  exit 1
&#125;

trap &#39;error &quot;An unexpected error occurred.&quot;&#39; ERR

take_backup () &#123;
  cd &quot;$&#123;parent_dir&#125;&quot;
  
  sqlite3 db.sqlite3 &quot;.backup &#39;$&#123;tmp_sqlite_backup&#125;&#39;&quot;
  &#x2F;bin&#x2F;tar czf &quot;$&#123;archive&#125;&quot; &quot;$&#123;tmp_sqlite_backup&#125;&quot; attachments

  rm &quot;$&#123;tmp_sqlite_backup&#125;&quot;

  find &quot;$&#123;backups_dir&#125;&#x2F;&quot; -type f -mtime +30 -exec rm &#123;&#125; \;
&#125;

printf &quot;\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;
printf &quot;\nBitwarden Backup&quot;
printf &quot;\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;
printf &quot;\nBackup in progress...&quot;

take_backup 2&gt; &quot;$&#123;log_file&#125;&quot;

if [[ -s &quot;$&#123;log_file&#125;&quot; ]]
then
  printf &quot;\nBackup failure! Check $&#123;log_file&#125; for more information.&quot;
  printf &quot;\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n\n&quot;
else
  rm &quot;$&#123;log_file&#125;&quot;
  printf &quot;...SUCCESS!\n&quot;
  printf &quot;Backup created at $&#123;backups_dir&#125;&#x2F;backup.tar.gz.$&#123;now&#125;&quot;
  printf &quot;\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n\n&quot;
fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>设置定时任务，修改文件 &#x2F;etc&#x2F;crontab插入一下内容</p>
<pre class="line-numbers language-none"><code class="language-none">00 1    * * *   root   &#x2F;home&#x2F;&lt;USER&gt;&#x2F;bitwarden&#x2F;bw-data&#x2F;backups&#x2F;bitwarden_rs-backup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>以上表示，每天凌晨 1 ，root 用户执行一次 <code>bitwarden_rs-backup.sh</code> 脚本。</p>
<blockquote>
<p>后期加邮件提醒</p>
</blockquote>
<p>注册完账号后，把<code>SIGNUPS_ALLOWED</code>选项改成fale重启实例关闭注册。</p>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>智能合约编译成Java文件</title>
    <url>/2021-04-10-java-generate-solidity/</url>
    <content><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>智能合约编译成java文件有几种方式，本文讲解最原始的那种。</p>
<h2 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h2><p>Windows 系统</p>
<h2 id="一、安装solc"><a href="#一、安装solc" class="headerlink" title="一、安装solc"></a>一、安装solc</h2><span id="more"></span>
<p>Solidity编写的以太坊智能合约可通过命令行编译工具solc来进行编译，成为以太坊虚拟机中的代码。solc编译后最终部署到链上形成我们所见到的各种智能合约。</p>
<blockquote>
<p>注意</p>
<p>solc的版本与以太坊智能合约版本一致，如果您编译的是.0.5.16，只下载那个版本即可</p>
</blockquote>
<p>示例代码</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> solc@0.5.16<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>以下网址可查到solc的所有版本号</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://www.npmjs.com/package/solc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>通过以下命令检查是否安装成功，正确会输出其版本号</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">solcjs <span class="token parameter variable">-V</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="二、下载web3j命令行工具转"><a href="#二、下载web3j命令行工具转" class="headerlink" title="二、下载web3j命令行工具转"></a>二、下载web3j命令行工具转</h2><p>打开以下网址，选择tag中的最新分支，点击.zip文件下载</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://github.com/web3j/web3j/releases<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="三、使用web3j命令行工具转为java文件"><a href="#三、使用web3j命令行工具转为java文件" class="headerlink" title="三、使用web3j命令行工具转为java文件"></a>三、使用web3j命令行工具转为java文件</h2><ul>
<li>–solidityTypes：后面添加第一步生成的<code>.bin文件</code>和<code>abi</code>文件</li>
<li>-o：java文件保存的位置</li>
<li>-p：包名</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">web3j solidity generate <span class="token parameter variable">--solidityTypes</span> D:<span class="token punctuation">\</span>Sol<span class="token punctuation">\</span>Sol<span class="token punctuation">\</span>mhxw.bin D:<span class="token punctuation">\</span>Sol<span class="token punctuation">\</span>Sol<span class="token punctuation">\</span>mhxw.abi <span class="token parameter variable">-o</span> D:<span class="token punctuation">\</span>Sol<span class="token punctuation">\</span>java <span class="token parameter variable">-p</span> com.mhxw.service.contract<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>智能合约</category>
      </categories>
      <tags>
        <tag>solidity</tag>
        <tag>web3j</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus(普罗米修斯)+Grafana+Node Export实现服务器性能监控</title>
    <url>/2021-04-25-install-prometheus-on-linux/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Prometheus是一个开放性的监控解决方案，用户可以非常方便的安装和使用Prometheus并且能够非常方便的对其进行扩展。为了能够更加直观的了解Prometheus Server，接下来我们将在本地部署并运行一个Prometheus Server实例，通过Node Exporter采集当前主机的系统资源使用情况。 并通过Grafana创建一个简单的可视化仪表盘。</p>
<h2 id="一、基础环境"><a href="#一、基础环境" class="headerlink" title="一、基础环境"></a>一、基础环境</h2><table>
<thead>
<tr>
<th>环境&#x2F;组件</th>
<th>版本</th>
</tr>
</thead>
<tbody><tr>
<td>操作系统</td>
<td>CentOS Linux release 7.6.1810</td>
</tr>
<tr>
<td>Prometheus</td>
<td>prometheus-2.22.1.linux-amd64.tar.gz</td>
</tr>
<tr>
<td>go</td>
<td>go1.15.4.linux-amd64.tar.gz</td>
</tr>
<tr>
<td>Grafana</td>
<td>grafana-7.3.3-1.x86_64.rpm</td>
</tr>
</tbody></table>
<span id="more"></span>
<h2 id="二、安装Go"><a href="#二、安装Go" class="headerlink" title="二、安装Go"></a>二、安装Go</h2><h3 id="1、下载解压安装"><a href="#1、下载解压安装" class="headerlink" title="1、下载解压安装"></a>1、下载解压安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://golang.org/dl/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>使用以下命令golang文件会自动下载并解压到<code>/mhxw/go</code>到目录下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token parameter variable">-c</span> https://dl.google.com/go/go1.16.5.linux-amd64.tar.gz <span class="token parameter variable">-O</span> - <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tar</span> <span class="token parameter variable">-xz</span> <span class="token parameter variable">-C</span> /mhxw/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2、配置环境变量"><a href="#2、配置环境变量" class="headerlink" title="2、配置环境变量"></a>2、配置环境变量</h3><p>通过将 Go 目录添加到$PATH环境变量，系统将会知道在哪里可以找到 Go 可执行文件。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.profile
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/mhxw/go/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>保存文件，并且重新加载新的PATH 环境变量到当前的 shell 会话：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="3、验证"><a href="#3、验证" class="headerlink" title="3、验证"></a>3、验证</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="三、安装Prometheus"><a href="#三、安装Prometheus" class="headerlink" title="三、安装Prometheus"></a>三、安装Prometheus</h2><h3 id="1、下载、解压、设置软连接"><a href="#1、下载、解压、设置软连接" class="headerlink" title="1、下载、解压、设置软连接"></a>1、下载、解压、设置软连接</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://prometheus.io/download/<span class="token comment">#prometheus</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/prometheus/prometheus/releases/download/v2.27.1/prometheus-2.27.1.linux-amd64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/images/pt-4.png"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-xvf</span> prometheus-2.27.1.linux-amd64.tar.gz
<span class="token function">mv</span> prometheus-2.27.1.linux-amd64 prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="2、启动"><a href="#2、启动" class="headerlink" title="2、启动"></a>2、启动</h3><p>普罗米修斯默认配置文件 <code>/mhxw/prometheus/prometheus/prometheus.yml</code></p>
<ul>
<li>先修改prometheus配置文件</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">vim &#x2F;mhxw&#x2F;prometheus&#x2F;prometheus&#x2F;prometheus.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>以下参数设置为1min</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">scrape_interval:     1m <span class="token comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span>
evaluation_interval: 1m

- job_name: <span class="token string">'prometheus'</span>

<span class="token comment"># metrics_path defaults to '/metrics'</span>
<span class="token comment"># scheme defaults to 'http'.</span>

static_configs:
- targets: <span class="token punctuation">[</span><span class="token string">'localhost:14200'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>启动命令</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./prometheus <span class="token parameter variable">--config.file</span><span class="token operator">=</span>/mhxw/prometheus/prometheus/prometheus.yml --web.listen-address<span class="token operator">=</span>:14200<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>进入会话</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tmux a <span class="token parameter variable">-t</span> prom<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>设置systemctl管理</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
<span class="token assign-left variable">Description</span><span class="token operator">=</span> Prometheus
<span class="token assign-left variable">After</span><span class="token operator">=</span>network.target
<span class="token comment"># Type设置为notify时，服务会不断重启# User设置对应上面创建的账号</span>
<span class="token comment"># 存储配置, </span>
<span class="token comment"># By default, Prometheus stores its database in ./data (flag --storage.tsdb.path).</span>
<span class="token comment"># --storage.tsdb.path: 存储数据的目录，默认为./data</span>
<span class="token comment"># --storage.tsdb.retention.time: 数据过期清理时间，默认保存15天</span>
<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
<span class="token assign-left variable">Type</span><span class="token operator">=</span>simple
<span class="token assign-left variable">User</span><span class="token operator">=</span>root
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/local/Prometheus/prometheus <span class="token parameter variable">--config.file</span><span class="token operator">=</span>/usr/local/Prometheus/prometheus.yml <span class="token parameter variable">--storage.tsdb.path</span><span class="token operator">=</span>/usr/local/Prometheus/data
<span class="token assign-left variable">ExecReload</span><span class="token operator">=</span>/bin/kill <span class="token parameter variable">-HUP</span> <span class="token variable">$MAINPID</span>
<span class="token assign-left variable">Restart</span><span class="token operator">=</span>on-failure
<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>
<span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>启动参数解释</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">–config.file&#x3D;&#x2F;etc&#x2F;prometheus.yml 指定配置文件
  
–web.read-timeout&#x3D;5m 请求链接的最大等待时间，防止太多的空闲链接占用资源
  
–web.max-connections&#x3D;512 针对prometheus，获取数据源的时候，建立的网络链接数，做一个最大数字的限制，防止链接数过多造成资源过大的消耗
  
–storage.tsdb.retention&#x3D;15d 重要参数，prometheus 开始采集监控数据后，会存在内存和硬盘中；对于保存期限的设置。时间过长，硬盘和内存都吃不消；时间太短，要查历史数据就没了。企业15天最为合适。
  
–storage.tsdb.path&#x3D;&quot;&#x2F;prometheus&#x2F;data&quot; 存储数据路径，不要随便定义
  
–query.max-concurrency&#x3D;20 用户查询最大并发数
  
–query.timeout&#x3D;2m 慢查询强制终止<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>注意：<br>本次启动用户是root生产中最好新建一个用户用于启动，需要设置配置文件及数据文件权限<br>数据目录在生产中最好单独配置数据硬盘，使用LVM硬盘格式配置</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /usr/lib/systemd/system/prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reload
systemctl <span class="token builtin class-name">enable</span> prometheus.service
systemctl start prometheus.service
systemctl status prometheus.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3、验证-1"><a href="#3、验证-1" class="headerlink" title="3、验证"></a>3、验证</h3><p>浏览器打开<code>IP:9090</code>即可打开普罗米修斯自带的监控页面</p>
<p><img src="/images/pt-1.png"></p>
<h2 id="四、安装Grafana"><a href="#四、安装Grafana" class="headerlink" title="四、安装Grafana"></a>四、安装Grafana</h2><p>Grafana是一款用Go语言开发的开源数据可视化工具，可以做数据监控和数据统计，带有告警功能。</p>
<h3 id="1、打开官网并下载"><a href="#1、打开官网并下载" class="headerlink" title="1、打开官网并下载"></a>1、打开官网并下载</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://grafana.com/grafana/download<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/images/pt-2.png"></p>
<ul>
<li>找到对应版本和linux内核下载</li>
</ul>
<p><img src="/images/pt-3.png"></p>
<h3 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h3><ul>
<li>centos 方式</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://dl.grafana.com/oss/release/grafana-7.5.7-1.x86_64.rpm
<span class="token function">sudo</span> yum <span class="token function">install</span> grafana-7.5.7-1.x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>ubuntu方式</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://dl.grafana.com/oss/release/grafana-8.0.0.linux-amd64.tar.gz
<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> grafana-8.0.0.linux-amd64.tar.gz
<span class="token function">mv</span> /mhxw/prometheus/grafana-8.0.0 /mhxw/prometheus/grafana<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>设置端口和IP</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /mhxw/prometheus/grafana/conf/defaults.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>设置端口和IP</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># The http port to use</span>
http_port <span class="token operator">=</span> <span class="token number">14201</span>

<span class="token comment"># The public facing domain name used to access grafana from a browser</span>
domain <span class="token operator">=</span> <span class="token number">0.0</span>.0.0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3、启动"><a href="#3、启动" class="headerlink" title="3、启动"></a>3、启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tmux new <span class="token parameter variable">-s</span> grafana<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>进入会话</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tmux a <span class="token parameter variable">-t</span> grafana
 /mhxw/prometheus/grafana/bin/grafana-server <span class="token parameter variable">--config</span> /mhxw/prometheus/grafana/conf/defaults.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/bin/systemctl daemon-reload
/bin/systemctl <span class="token builtin class-name">enable</span> grafana-server.service
/bin/systemctl start grafana-server.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="4、访问Grafana"><a href="#4、访问Grafana" class="headerlink" title="4、访问Grafana"></a>4、访问Grafana</h3><p>浏览器访问<code>IP:3000</code>端口，即可打开grafana页面，默认用户名密码都是admin，初次登录会要求修改默认的登录密码</p>
<p><img src="/images/pt-5.png" alt="登录页面"></p>
<p>进入后的面板</p>
<p><img src="/images/pt-6.png" alt="进入后的页面"></p>
<h3 id="5、与-Prometheus-交互"><a href="#5、与-Prometheus-交互" class="headerlink" title="5、与 Prometheus 交互"></a>5、与 Prometheus 交互</h3><ul>
<li>点击 Data Sources</li>
</ul>
<p><img src="/images/pt-7.png" alt="点击 Data Sources"></p>
<ul>
<li>Add Data Sources</li>
</ul>
<p><img src="/images/pt-8.png" alt="Add Data Sources"></p>
<ul>
<li>选择“Prometheus 2.0 Stats”</li>
</ul>
<p><img src="/images/pt-9.png" alt="Select"></p>
<ul>
<li>点击“import”按钮导入</li>
</ul>
<p><img src="/images/pt-10.png"></p>
<p><img src="/images/pt-11.png"></p>
<ul>
<li>在Settings页面填写之前的普罗米修斯<code>URL</code>并点击保存</li>
</ul>
<p><img src="/images/pt-12.png"></p>
<ul>
<li>切换到刚才添加的“Prometheus 2.0 Stats”即可看到整个监控页面</li>
</ul>
<p><img src="/images/pt-13.png"></p>
<p><img src="/images/pt-14.png"></p>
<h2 id="五、配置-Node-Exporter"><a href="#五、配置-Node-Exporter" class="headerlink" title="五、配置 Node_Exporter"></a>五、配置 Node_Exporter</h2><h3 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h3><p><img src="/images/pt-16.png"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/prometheus/node_exporter/releases/download/v1.1.2/node_exporter-1.1.2.linux-arm64.tar.gz
<span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> node_exporter-1.1.2.linux-amd64.tar.gz
<span class="token function">mv</span> node_exporter-1.1.2.linux-amd64 /usr/local/Prometheus/node_exporter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="2、启动-1"><a href="#2、启动-1" class="headerlink" title="2、启动"></a>2、启动</h3><ul>
<li>添加启动服务</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /usr/lib/systemd/system/node_exporter.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>为了方便管理使用系统服务管理</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
<span class="token assign-left variable">Description</span><span class="token operator">=</span>node_exporter
<span class="token assign-left variable">After</span><span class="token operator">=</span>network.target

<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
<span class="token assign-left variable">Type</span><span class="token operator">=</span>simple
<span class="token assign-left variable">User</span><span class="token operator">=</span>root
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/local/Prometheus/node_exporter/node_exporter --web.listen-address<span class="token operator">=</span>localhost:9101
<span class="token assign-left variable">ExecReload</span><span class="token operator">=</span>/bin/kill <span class="token parameter variable">-HUP</span> <span class="token variable">$MAINPID</span>
<span class="token assign-left variable">Restart</span><span class="token operator">=</span>on-failure

<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>
<span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reload
systemctl <span class="token builtin class-name">enable</span> node_exporter.service
systemctl start node_exporter.service
systemctl status node_exporter.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将node_exporter添加到Prometheus服务器</span>
<span class="token function">vim</span> /usr/local/prometheus/prometheus/prometheus.yml
<span class="token comment"># 在'scrape_config'下添加node_exporter的job  - job_name: 'node_exporter'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="3、重新配置-Prometheus"><a href="#3、重新配置-Prometheus" class="headerlink" title="3、重新配置 Prometheus"></a>3、重新配置 Prometheus</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /usr/local/Prometheus/prometheus.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>追加</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">scrape_configs:
  <span class="token comment"># The job name is added as a label `job=&lt;job_name>` to any timeseries scraped from this config.</span>
  - job_name: <span class="token string">'prometheus'</span>

    <span class="token comment"># metrics_path defaults to '/metrics'</span>
    <span class="token comment"># scheme defaults to 'http'.</span>

    static_configs:
    - targets: <span class="token punctuation">[</span><span class="token string">'localhost:9090'</span><span class="token punctuation">]</span>
<span class="token comment">#追加以下内容</span>
  - job_name: <span class="token string">'node_exporter-1'</span>
    static_configs:
    - targets: <span class="token punctuation">[</span><span class="token string">'localhost:9101'</span><span class="token punctuation">]</span> <span class="token comment">#安装node_exporter的服务器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>重新启动</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="六，架构图"><a href="#六，架构图" class="headerlink" title="六，架构图"></a>六，架构图</h2><p>如果要想监控，前提是能获取被监控端指标数据，并且这个 数据格式必须遵循Prometheus数据模型，这样才能识别和 采集，一般使用exporter提供监控指标数据。</p>
<ul>
<li>exporter列表： <a href="https://prometheus.io/docs/instrumenting/exporters">https://prometheus.io/docs/instrumenting/exporters</a></li>
</ul>
<p><img src="/images/pt-15.png"></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="1-出现以下错误"><a href="#1-出现以下错误" class="headerlink" title="1. 出现以下错误"></a>1. 出现以下错误</h3><pre class="line-numbers language-none"><code class="language-none">错误：rpmdb: BDB0113 Thread&#x2F;process 21983&#x2F;140193275361280 failed: BDB1507 Thread died in Berkeley DB library
错误：db5 错误(-30973) 来自 dbenv-&gt;failchk：BDB0087 DB_RUNRECOVERY: Fatal error, run database recovery
错误：无法使用 db5 -  (-30973) 打开 Packages 索引
错误：无法从 &#x2F;var&#x2F;lib&#x2F;rpm 打开软件包数据库
CRITICAL:yum.main:

Error: rpmdb open failed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>解决：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#b删除/var/lib/rpm目录下的__db开头的rpmdb文件</span>

<span class="token function">rm</span> <span class="token parameter variable">-f</span> /var/lib/rpm/__db*

<span class="token comment"># rpm数据库重建</span>

<span class="token function">rpm</span> <span class="token parameter variable">--rebuilddb</span>

<span class="token comment"># 清理所有yum缓存</span>

yum clean all

<span class="token comment"># 重新生成yum缓存</span>

yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="1、Linux-查看进程占用端口"><a href="#1、Linux-查看进程占用端口" class="headerlink" title="1、Linux 查看进程占用端口"></a>1、Linux 查看进程占用端口</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux<span class="token operator">|</span><span class="token function">grep</span> node_exporter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-nap</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">26608</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>运维监控</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>grafana</tag>
        <tag>prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus监控平台AlertManager配置告警</title>
    <url>/2021-05-02-prometheus-alertmanager/</url>
    <content><![CDATA[<h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一. 前言"></a>一. 前言</h2><p>接上一篇<a href="./2021-4-25-install-prometheus-on-linux.md">Prometheus+Grafana监控部署</a>，环境已经安装完成，本篇进行学习使用Alertmanager告警配置。</p>
<h2 id="二、介绍"><a href="#二、介绍" class="headerlink" title="二、介绍"></a>二、介绍</h2><p>AlertManager是一个独立的告警模块，接收Prometheus等客户端发来的警报，之后通过分组、删除重复等处理，并将它们通过路由发送给正确的接收器。</p>
<h2 id="三、安装部署"><a href="#三、安装部署" class="headerlink" title="三、安装部署"></a>三、安装部署</h2><span id="more"></span>
<h3 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h3><p><a href="https://prometheus.io/download/">https://prometheus.io/download/</a></p>
<h3 id="2、解压"><a href="#2、解压" class="headerlink" title="2、解压"></a>2、解压</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /mhxw/prometheus/alertmanager
<span class="token function">wget</span> https://github.com/prometheus/alertmanager/releases/download/v0.22.2/alertmanager-0.22.2.linux-amd64.tar.gz
<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> alertmanager-0.22.2.linux-amd64.tar.gz <span class="token parameter variable">-C</span> /mhxw/prometheus/
<span class="token function">mv</span> /mhxw/prometheus/alertmanager-0.22.2.linux-amd64/* /mhxw/prometheus/alertmanager
<span class="token builtin class-name">cd</span> /mhxw/prometheus/alertmanager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>查看版本</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/mhxw/prometheus/alertmanager/alertmanager <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="3、编辑alertmanager配置文件"><a href="#3、编辑alertmanager配置文件" class="headerlink" title="3、编辑alertmanager配置文件"></a>3、编辑<code>alertmanager</code>配置文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /mhxw/prometheus/alertmanager/alertmanager.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>配置文件说明</p>
<ul>
<li>全局配置（global）：用于定义一些全局的公共参数，如全局的SMTP配置，Slack配置等内容；</li>
<li>模板（templates）：用于定义告警通知时的模板，如HTML模板，邮件模板等；</li>
<li>告警路由（route）：根据标签匹配，确定当前告警应该如何处理；</li>
<li>接收人（receivers）：接收人是一个抽象的概念，它可以是一个邮箱也可以是微信，Slack或者Webhook等，接收人一般配合告警路由使用；</li>
<li>抑制规则（inhibit_rules）：合理设置抑制规则可以减少垃圾告警的产生</li>
</ul>
<p>完整配置格式如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">global:
  <span class="token punctuation">[</span> resolve_timeout: <span class="token operator">&lt;</span>duration<span class="token operator">></span> <span class="token operator">|</span> default <span class="token operator">=</span> 5m <span class="token punctuation">]</span>
  <span class="token punctuation">[</span> smtp_from: <span class="token operator">&lt;</span>tmpl_string<span class="token operator">></span> <span class="token punctuation">]</span> 
  <span class="token punctuation">[</span> smtp_smarthost: <span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token punctuation">]</span> 
  <span class="token punctuation">[</span> smtp_hello: <span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">|</span> default <span class="token operator">=</span> <span class="token string">"localhost"</span> <span class="token punctuation">]</span>
  <span class="token punctuation">[</span> smtp_auth_username: <span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token punctuation">]</span>
  <span class="token punctuation">[</span> smtp_auth_password: <span class="token operator">&lt;</span>secret<span class="token operator">></span> <span class="token punctuation">]</span>
  <span class="token punctuation">[</span> smtp_auth_identity: <span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token punctuation">]</span>
  <span class="token punctuation">[</span> smtp_auth_secret: <span class="token operator">&lt;</span>secret<span class="token operator">></span> <span class="token punctuation">]</span>
  <span class="token punctuation">[</span> smtp_require_tls: <span class="token operator">&lt;</span>bool<span class="token operator">></span> <span class="token operator">|</span> default <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">]</span>
  <span class="token punctuation">[</span> slack_api_url: <span class="token operator">&lt;</span>secret<span class="token operator">></span> <span class="token punctuation">]</span>
  <span class="token punctuation">[</span> victorops_api_key: <span class="token operator">&lt;</span>secret<span class="token operator">></span> <span class="token punctuation">]</span>
  <span class="token punctuation">[</span> victorops_api_url: <span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">|</span> default <span class="token operator">=</span> <span class="token string">"https://alert.victorops.com/integrations/generic/20131114/alert/"</span> <span class="token punctuation">]</span>
  <span class="token punctuation">[</span> pagerduty_url: <span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">|</span> default <span class="token operator">=</span> <span class="token string">"https://events.pagerduty.com/v2/enqueue"</span> <span class="token punctuation">]</span>
  <span class="token punctuation">[</span> opsgenie_api_key: <span class="token operator">&lt;</span>secret<span class="token operator">></span> <span class="token punctuation">]</span>
  <span class="token punctuation">[</span> opsgenie_api_url: <span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">|</span> default <span class="token operator">=</span> <span class="token string">"https://api.opsgenie.com/"</span> <span class="token punctuation">]</span>
  <span class="token punctuation">[</span> hipchat_api_url: <span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">|</span> default <span class="token operator">=</span> <span class="token string">"https://api.hipchat.com/"</span> <span class="token punctuation">]</span>
  <span class="token punctuation">[</span> hipchat_auth_token: <span class="token operator">&lt;</span>secret<span class="token operator">></span> <span class="token punctuation">]</span>
  <span class="token punctuation">[</span> wechat_api_url: <span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">|</span> default <span class="token operator">=</span> <span class="token string">"https://qyapi.weixin.qq.com/cgi-bin/"</span> <span class="token punctuation">]</span>
  <span class="token punctuation">[</span> wechat_api_secret: <span class="token operator">&lt;</span>secret<span class="token operator">></span> <span class="token punctuation">]</span>
  <span class="token punctuation">[</span> wechat_api_corp_id: <span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token punctuation">]</span>
  <span class="token punctuation">[</span> http_config: <span class="token operator">&lt;</span>http_config<span class="token operator">></span> <span class="token punctuation">]</span>

templates:
  <span class="token punctuation">[</span> - <span class="token operator">&lt;</span>filepath<span class="token operator">></span> <span class="token punctuation">..</span>. <span class="token punctuation">]</span>

route: <span class="token operator">&lt;</span>route<span class="token operator">></span>

receivers:
  - <span class="token operator">&lt;</span>receiver<span class="token operator">></span> <span class="token punctuation">..</span>.

inhibit_rules:
  <span class="token punctuation">[</span> - <span class="token operator">&lt;</span>inhibit_rule<span class="token operator">></span> <span class="token punctuation">..</span>. <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>文件内容如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">global:
  resolve_timeout: 5m
  smtp_smarthost: <span class="token string">"smtp.qq.com:587"</span>
  smtp_from: <span class="token string">"****@foxmail.com"</span>
  smtp_auth_username: <span class="token string">"****@foxmail.com"</span>
  <span class="token comment">#邮箱专用授权码</span>
  smtp_auth_password: <span class="token string">"****"</span>
  <span class="token comment">#关闭TLS授权</span>
  smtp_require_tls: <span class="token boolean">true</span>
route:
  group_by: <span class="token punctuation">[</span><span class="token string">'mhxw_status'</span>,<span class="token string">'node_status'</span><span class="token punctuation">]</span> <span class="token comment">#与prometheus配置文件alert_rules.yml中配置规则名对应</span>
  group_wait: 30s <span class="token comment">#报警等待时间</span>
  group_interval: 5m <span class="token comment">#报警间隔时间</span>
  repeat_interval: 1h <span class="token comment">#重复报警间隔时间</span>
  receiver: <span class="token string">'mhxw_receiver'</span> <span class="token comment">#告警处理方式</span>
receivers:
- name: <span class="token string">'mhxw_receiver'</span>
  email_configs:
    - to: <span class="token string">'mhxw@gmail.com'</span>
      send_resolved: <span class="token boolean">true</span>
inhibit_rules:
  - source_match:
      severity: <span class="token string">'critical'</span>
    target_match:
      severity: <span class="token string">'warning'</span>
    equal: <span class="token punctuation">[</span><span class="token string">'alertname'</span>, <span class="token string">'dev'</span>, <span class="token string">'instance'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>template目录下<code>node_status.tmpl</code></li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> define <span class="token string">"node.status.message"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>- <span class="token keyword">if</span> gt <span class="token punctuation">(</span>len .Alerts.Firing<span class="token punctuation">)</span> <span class="token number">0</span> -<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>- range <span class="token variable">$index</span>, <span class="token variable">$alert</span> :<span class="token operator">=</span> .Alerts -<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>- <span class="token keyword">if</span> eq <span class="token variable">$index</span> <span class="token number">0</span> -<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
**********MHXW告警通知**********
MHXW告警类型: <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token variable">$alert</span>.Labels.alertname <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
告警级别: <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token variable">$alert</span>.Labels.level <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>- end <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
MHXW告警主题: <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token variable">$alert</span>.Annotations.summary <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
MHXW告警详情: <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token variable">$alert</span>.Annotations.description <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
MHXW故障时间: <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token punctuation">(</span>.StartsAt.Add 28800e9<span class="token punctuation">)</span>.Format <span class="token string">"2006-01-02 15:04:05"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token keyword">if</span> gt <span class="token punctuation">(</span>len <span class="token variable">$alert</span>.Labels.instance<span class="token punctuation">)</span> <span class="token number">0</span> -<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>故障实例: <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token variable">$alert</span>.Labels.instance <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>- end -<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>- end <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>- end <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>

<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>- <span class="token keyword">if</span> gt <span class="token punctuation">(</span>len .Alerts.Resolved<span class="token punctuation">)</span> <span class="token number">0</span> -<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>- range <span class="token variable">$index</span>, <span class="token variable">$alert</span> :<span class="token operator">=</span> .Alerts -<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>- <span class="token keyword">if</span> eq <span class="token variable">$index</span> <span class="token number">0</span> -<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
**********恢复通知**********
告警类型: <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token variable">$alert</span>.Labels.alertname <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
告警级别: <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token variable">$alert</span>.Labels.level <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>- end <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
告警主题: <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token variable">$alert</span>.Annotations.summary <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
告警详情: <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token variable">$alert</span>.Annotations.description <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
故障时间: <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token punctuation">(</span>.StartsAt.Add 28800e9<span class="token punctuation">)</span>.Format <span class="token string">"2006-01-02 15:04:05"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
恢复时间: <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token punctuation">(</span>.EndsAt.Add 28800e9<span class="token punctuation">)</span>.Format <span class="token string">"2006-01-02 15:04:05"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token keyword">if</span> gt <span class="token punctuation">(</span>len <span class="token variable">$alert</span>.Labels.instance<span class="token punctuation">)</span> <span class="token number">0</span> -<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>故障实例: <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token variable">$alert</span>.Labels.instance <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>- end -<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>- end <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>- end <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>- end <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>配置说明</p>
<ul>
<li><p>global: 全局配置，包括报警解决后的超时时间、SMTP 相关配置、各种渠道通知的 API 地址等等。</p>
</li>
<li><p>route: 用来设置报警的分发策略，它是一个树状结构，按照深度优先从左向右的顺序进行匹配。</p>
</li>
<li><p>receivers: 配置告警消息接受者信息，例如常用的 email、wechat、slack、webhook 等消息通知方式。</p>
</li>
<li><p>inhibit_rules: 抑制规则配置，当存在与另一组匹配的警报（源）时，抑制规则将禁用与一组匹配的警报（目标）。</p>
</li>
<li><p>smtp_smarthost: 这里为 QQ 邮箱 SMTP 服务地址，官方地址 smtp.qq.com 端口为 465 或 587，同时设置开启 POP3&#x2F;SMTP 服务。</p>
</li>
<li><p>smtp_auth_password: 这里为第三方登录 QQ 邮箱的授权码，非 QQ 账户登录密码，否则会报错，获取方式在 QQ 邮箱服务端设置开启 POP3&#x2F;SMTP 服务时会提示。</p>
</li>
</ul>
<h3 id="4、检查AlertManager配置文件"><a href="#4、检查AlertManager配置文件" class="headerlink" title="4、检查AlertManager配置文件"></a>4、检查AlertManager配置文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/local/Prometheus/alertmanager/amtool check-config /usr/local/Prometheus/alertmanager/alertmanager.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="5、启动AlertManager"><a href="#5、启动AlertManager" class="headerlink" title="5、启动AlertManager"></a>5、启动AlertManager</h3><p>一种是采用<code>tmux</code>方式</p>
<ul>
<li>新建会话</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tmux new <span class="token parameter variable">-s</span> alertmanager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>进入会话</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tmux a <span class="token parameter variable">-t</span> alertmanager
/mhxw/prometheus/alertmanager/alertmanager <span class="token parameter variable">--config.file</span><span class="token operator">=</span>/mhxw/prometheus/alertmanager/alertmanager.yml --web.listen-address<span class="token operator">=</span>:1998<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>一种是<code>systemd</code>采用开机启动方式</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> /etc/systemd/system/alertmanager.service <span class="token operator">&lt;&lt;</span> <span class="token string">"EOF"
[Unit]
Description=alertmanager
After=local-fs.target network-online.target network.target
Wants=local-fs.target network-online.target network.target
 
[Service]
ExecStart=/mhxw/prometheus/alertmanager/alertmanager --config.file=/mhxw/prometheus/alertmanager/alertmanager.yml --web.listen-address=:1998
Restart=on-failure
[Install]
WantedBy=multi-user.target
EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reload

systemctl <span class="token builtin class-name">enable</span> alertmanager

systemctl start alertmanager

systemctl status alertmanager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="四、重新配置Prometheus"><a href="#四、重新配置Prometheus" class="headerlink" title="四、重新配置Prometheus"></a>四、重新配置Prometheus</h2><h3 id="1、编辑prometheus-yml"><a href="#1、编辑prometheus-yml" class="headerlink" title="1、编辑prometheus.yml"></a>1、编辑prometheus.yml</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /mhxw/prometheus/prometheus/prometheus.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>告警配置连接</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Alertmanager configuration</span>
alerting:
  alertmanagers:
  - static_configs:
    - targets:
       - alertmanager:1998<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>开启告警配置</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rule_files:
   - <span class="token string">"rules/*.yml"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>监控AlertManager</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">- job_name: <span class="token string">'alertmanager'</span>
    static_configs:
      - targets: <span class="token punctuation">[</span><span class="token string">'localhost:1998'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>文件内容</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># my global config</span>
global:
  scrape_interval:     15s <span class="token comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span>
  evaluation_interval: 15s <span class="token comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span>
  <span class="token comment"># scrape_timeout is set to the global default (10s).</span>

<span class="token comment"># Alertmanager configuration</span>
alerting:
  alertmanagers:
  - static_configs:
    - targets: <span class="token punctuation">[</span><span class="token string">"localhost:1998"</span><span class="token punctuation">]</span>

<span class="token comment"># Load rules once and periodically evaluate them according to the global 'evaluation_interval'.</span>
rule_files:
   - <span class="token string">"rules/*.yml"</span>
  <span class="token comment"># - "second_rules.yml"</span>

<span class="token comment"># A scrape configuration containing exactly one endpoint to scrape:</span>
<span class="token comment"># Here it's Prometheus itself.</span>
scrape_configs:
  <span class="token comment"># The job name is added as a label `job=&lt;job_name>` to any timeseries scraped from this config.</span>
  - job_name: <span class="token string">'prometheus'</span>

    <span class="token comment"># metrics_path defaults to '/metrics'</span>
    <span class="token comment"># scheme defaults to 'http'.</span>

    static_configs:
    - targets: <span class="token punctuation">[</span><span class="token string">'localhost:9090'</span><span class="token punctuation">]</span>
<span class="token comment">#追加以下内容</span>
  - job_name: <span class="token string">'node_exporter-1'</span>
    static_configs:
    - targets: <span class="token punctuation">[</span><span class="token string">'localhost:9101'</span><span class="token punctuation">]</span> <span class="token comment">#安装node_exporter的服务器</span>
<span class="token comment">#追加以下内容</span>
  - job_name: <span class="token string">'mhxw'</span>
    static_configs:
    - targets: <span class="token punctuation">[</span><span class="token string">'47.242.76.64:26635'</span><span class="token punctuation">]</span> <span class="token comment">#安装mhxw的服务器</span>
<span class="token comment">#追加以下内容</span>
  - job_name: <span class="token string">'alertmanager'</span>
    static_configs:
    - targets: <span class="token punctuation">[</span><span class="token string">'localhost:1998'</span><span class="token punctuation">]</span> <span class="token comment">#alertmanager</span>


<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>检查并重新加载配置文件</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/local/Prometheus/promtool check config /usr/local/Prometheus/prometheus.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2、创建告警目录-添加报警规则"><a href="#2、创建告警目录-添加报警规则" class="headerlink" title="2、创建告警目录&amp;添加报警规则"></a>2、创建告警目录&amp;添加报警规则</h3><p>在prometheus.yml的同级目录下，创建rules目录，在该rules目录下创建node_alerts.yml文件，内容如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> rules <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> rules/

<span class="token function">touch</span> node_alerts.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>文件内容</p>
<blockquote>
<p>注意</p>
<p>为了方便测试，我这里把调整磁盘使用率阀值测试报警调整到1，然后重新加载配置。</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">groups:
  - name: node_status
    rules:
    - alert: DiskUsageAlert_warning
      expr: <span class="token punctuation">(</span><span class="token number">1</span> - node_filesystem_free_bytes<span class="token punctuation">&#123;</span>fstype<span class="token operator">!=</span><span class="token string">"rootfs"</span>,mountpoint<span class="token operator">!=</span><span class="token string">""</span>,mountpoint<span class="token operator">!</span>~<span class="token string">"/(run|var|sys|dev).*"</span><span class="token punctuation">&#125;</span> / node_filesystem_size_bytes<span class="token punctuation">)</span> * <span class="token number">100</span> <span class="token operator">></span> <span class="token number">1</span>
      for: 2m
      labels:
        level: warning
      annotations:
        summary: <span class="token string">"主机 &#123;&#123; <span class="token variable">$labels</span>.instance &#125;&#125; 磁盘使用率高"</span>
        description: <span class="token string">"&#123;&#123;<span class="token variable">$labels</span>.instance&#125;&#125;: 磁盘使用率超过80％ (当前占比为: &#123;&#123; <span class="token variable">$value</span> &#125;&#125;)"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3、重启Prometheus"><a href="#3、重启Prometheus" class="headerlink" title="3、重启Prometheus"></a>3、重启Prometheus</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>警报有三种状态：</p>
<ul>
<li><p>Inactive 警报未激活；</p>
</li>
<li><p>Pending：警报已满足测试表达式条件，但未达到for指定的持续时间；</p>
</li>
<li><p>Firing：警报满足测试表达式条件，且持续时间达到了for指定的持续时间；</p>
</li>
</ul>
<h3 id="4、查看邮件"><a href="#4、查看邮件" class="headerlink" title="4、查看邮件"></a>4、查看邮件</h3><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://zhuanlan.zhihu.com/p/74932366
http://www.linuxe.cn/post-514.html
https://www.cnblogs.com/longcnblogs/p/9620733.html
https://www.cnblogs.com/jiujuan/p/13262380.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>运维监控</category>
      </categories>
      <tags>
        <tag>prometheus</tag>
        <tag>alertmanager</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 20.04 安装Nginx到指定目录</title>
    <url>/2021-05-09--instll-nginx-on-ubuntu/</url>
    <content><![CDATA[<h2 id="Nginx-安装"><a href="#Nginx-安装" class="headerlink" title="Nginx 安装"></a>Nginx 安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://blog.csdn.net/A156348933/article/details/85335089<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<span id="more"></span>]]></content>
      <categories>
        <category>Linux相关</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 18.04 安装Docker到指定目录和Docker安装MySQL8.0</title>
    <url>/2021-05-16-install-docker-and-mysql-8-on-ubuntu/</url>
    <content><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>Docker 默认安装的情况下，会使用 <code>/var/lib/docker/</code> 目录作为存储目录，用以存放拉取的镜像和创建的容器等。不过由于此目录一般都位于系统盘，遇到系统盘比较小，而镜像和容器多了后就容易尴尬，这里说明一下如何修改 Docker 的存储目录。</p>
<h2 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://docs.docker.com/engine/install/ubuntu/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<span id="more"></span>
<h2 id="查看Docker相关信息"><a href="#查看Docker相关信息" class="headerlink" title="查看Docker相关信息"></a>查看Docker相关信息</h2><pre class="line-numbers language-none"><code class="language-none">docker info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Client:
 Context:    default
 Debug Mode: <span class="token boolean">false</span>
 Plugins:
  app: Docker App <span class="token punctuation">(</span>Docker Inc., v0.9.1-beta3<span class="token punctuation">)</span>
  buildx: Build with BuildKit <span class="token punctuation">(</span>Docker Inc., v0.5.1-docker<span class="token punctuation">)</span>
  scan: Docker Scan <span class="token punctuation">(</span>Docker Inc., v0.7.0<span class="token punctuation">)</span>

Server:
 Containers: <span class="token number">0</span>
  Running: <span class="token number">0</span>
  Paused: <span class="token number">0</span>
  Stopped: <span class="token number">0</span>
 Images: <span class="token number">0</span>
 Server Version: <span class="token number">20.10</span>.6
 Storage Driver: overlay2
  Backing Filesystem: extfs
  Supports d_type: <span class="token boolean">true</span>
  Native Overlay Diff: <span class="token boolean">true</span>
  userxattr: <span class="token boolean">false</span>
 Logging Driver: json-file
 Cgroup Driver: cgroupfs
 Cgroup Version: <span class="token number">1</span>
 Plugins:
  Volume: <span class="token builtin class-name">local</span>
  Network: bridge <span class="token function">host</span> ipvlan macvlan null overlay
  Log: awslogs fluentd gcplogs gelf journald json-file <span class="token builtin class-name">local</span> logentries splunk syslog
Swarm: inactive
 Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc
 Default Runtime: runc
 Init Binary: docker-init
 containerd version: 05f951a3781f4f2c1911b05e61c160e9c30eaa8e
 runc version: 12644e614e25b05da6fd08a38ffa0cfe1903fdec
 init version: de40ad0
 Security Options:
  apparmor
  seccomp
   Profile: default
 Kernel Version: <span class="token number">4.15</span>.0-117-generic
 Operating System: Ubuntu <span class="token number">18.04</span>.5 LTS
 OSType: linux
 Architecture: x86_64
 CPUs: <span class="token number">2</span>
 Total Memory: <span class="token number">7</span>.65GiB
 Name: mhxw server
 ID: LUSA:YHYP:6LCZ:FUPS:XMG2:YSLR:73V7:724D:3HRD:VWFM:FXXF:NXWU
 Docker Root Dir: /var/lib/docker
 Debug Mode: <span class="token boolean">false</span>
 Registry: https://index.docker.io/v1/
 Labels:
 Experimental: <span class="token boolean">false</span>
 Insecure Registries:
  <span class="token number">127.0</span>.0.0/8
 Live Restore Enabled: <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="修改-Docker-的默认存储路径"><a href="#修改-Docker-的默认存储路径" class="headerlink" title="修改 Docker 的默认存储路径"></a>修改 Docker 的默认存储路径</h2><p>官方文档的修改办法是编辑 <code>/etc/docker/daemon.json</code> 文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/docker/daemon.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>默认情况下这个配置文件是没有的，这里实际也就是新建一个，然后写入以下内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span>
  <span class="token string">"data-root"</span><span class="token builtin class-name">:</span> <span class="token string">"/mhxw/docker"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>此文件还涉及默认源的设定，如果设定了国内源，那么实际就是在源地址下方加一行，写成：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span>
  <span class="token string">"registry-mirrors"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"http://hub-mirror.c.163.com"</span><span class="token punctuation">]</span>,
  <span class="token string">"data-root"</span><span class="token builtin class-name">:</span> <span class="token string">"/mhxw/docker"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>保存退出，然后重启 docker 服务：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>再次查看 docker 信息，可以看到目录已经变成了设定的<code>/mhxw/docker</code>:</p>
<h2 id="Docker-安装-MySQL8-0"><a href="#Docker-安装-MySQL8-0" class="headerlink" title="Docker 安装 MySQL8.0"></a>Docker 安装 MySQL8.0</h2><ul>
<li>docker 仓库拉取mysql8.0</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull mysql:8.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>查看本地仓库镜像是否下载成功</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>安装运行mysql8.0</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-p</span> 本地主机端口号:容器服务端口号 <span class="token parameter variable">--name</span> 容器名字 <span class="token punctuation">[</span>-e 配置信息修改<span class="token punctuation">]</span> <span class="token parameter variable">-d</span> 镜像名字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">44377</span>:3306 <span class="token parameter variable">--name</span> mysql8.0 <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>root <span class="token parameter variable">-d</span> mysql:8.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>docker</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Docker安装Prometheus+Grafana+AlertManager</title>
    <url>/2021-06-06-install-prometheus-grafana-alertmanager-by-docker/</url>
    <content><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>本篇文章是基于以下三篇的改良和升级，由宿主机安装改为Docker方式安装。</p>
<ul>
<li><a href="/2021/04/25/2021-4-25-install-prometheus-on-linux/">Prometheus+Grafana监控部署</a></li>
<li><a href="/2021/05/02/2021-5-2-prometheus-alertmanager/">Prometheus监控平台AlertManager配置告警</a></li>
<li><a href="/2021/06/06/2021-6-6-pushgateway/">Pushgateway 的安装和使用</a></li>
</ul>
<p>Prometheus是一款基于时序数据库的开源监控告警系统。</p>
<p>主要特性（功能）#</p>
<ul>
<li>多维数据模型（时序由 metric 名字和 k&#x2F;v 的labels构成）</li>
<li>灵活的查询语言（PromQL）</li>
<li>无依赖的分布式存储；单节点服务器都是自治的</li>
<li>采用 http 协议，使用pull模式拉取数据，简单易懂</li>
<li>监控目标，可以采用服务发现和静态配置方式</li>
<li>支持多种统计数据模型和界面展示。可以和Grafana结合展示。<span id="more"></span></li>
</ul>
<h2 id="二、安装-Prometheus"><a href="#二、安装-Prometheus" class="headerlink" title="二、安装 Prometheus"></a>二、安装 Prometheus</h2><p>1.首先创建一个配置文件 <code>prometheus.yml</code></p>
<p><a href="https://github.com/prometheus/prometheus/blob/main/documentation/examples/prometheus.yml">官方模板</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建数据盘目录</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /mhxw/monitor/prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>把编辑好的配置文件 <code>prometheus.yml</code> 放置到 <code>prometheus</code> 目录下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span><span class="token operator">=</span>prometheus <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">20602</span>:9090 <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /mhxw/monitor/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml <span class="token punctuation">\</span>
prom/prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>配置说明</p>
<ul>
<li>–config.file prometheus配置文件路径</li>
<li>–storage.tsdb.retention.time 保存时间</li>
<li>–storage.tsdb.path 数据存储路径</li>
<li>-v：冒号”:”前面的目录是宿主机目录，后面的目录是容器内目录。</li>
<li>-p：冒号”:”前面的目录是宿主机端口，后面的目录是容器内端口。</li>
</ul>
<blockquote>
<p>注意</p>
<p>有没有发现默认使用 static_configs 静态配置方式，虽然可以正确配置，但是每次配置都需要重启 Prometheus 服务，当我们需要分批次添加很多 Node 时，频繁重启服务就会造成监控的多次中断，这太不友好了。当然 Prometheus 也提供了多种服务发现方式</p>
</blockquote>
<ul>
<li>自动发现</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">- labels:
    name: two
  targets: <span class="token punctuation">[</span><span class="token string">"148.153.72.214:20406"</span>,<span class="token string">"148.153.72.214:20407"</span>,<span class="token string">"148.153.72.214:20408"</span>,<span class="token string">"148.153.72.214:20409"</span>,<span class="token string">"148.153.72.214:20410"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="三、安装-node-exporter"><a href="#三、安装-node-exporter" class="headerlink" title="三、安装 node-exporter"></a>三、安装 node-exporter</h2><p>编辑 <code>prometheus.yml</code> 将node_exporter加上。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">- job_name: <span class="token string">'node_exporter'</span>
  static_configs:
  - targets: <span class="token punctuation">[</span><span class="token string">"localhost:14202"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>安装并启动</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>
  <span class="token parameter variable">--net</span><span class="token operator">=</span><span class="token string">"host"</span> <span class="token punctuation">\</span>
  <span class="token parameter variable">--pid</span><span class="token operator">=</span><span class="token string">"host"</span> <span class="token punctuation">\</span>
  <span class="token parameter variable">--name</span><span class="token operator">=</span>node-exporter <span class="token punctuation">\</span>
  <span class="token parameter variable">-v</span> <span class="token string">"/:/host:ro,rslave"</span> <span class="token punctuation">\</span>
  prom/node-exporter <span class="token punctuation">\</span>
  <span class="token parameter variable">--path.rootfs</span> /host<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>重启docker prometheus，让刚才修改的配置生效</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> restart prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="四、安装-Grafana"><a href="#四、安装-Grafana" class="headerlink" title="四、安装 Grafana"></a>四、安装 Grafana</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">14206</span>:3000 <span class="token parameter variable">--name</span><span class="token operator">=</span>grafana grafana/grafana<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在浏览器输入 ip:端口 显示 grafana 则表示安装成功</p>
<h2 id="五、安装AlertManager"><a href="#五、安装AlertManager" class="headerlink" title="五、安装AlertManager"></a>五、安装AlertManager</h2><blockquote>
<p>注意</p>
<p>AlertManager 默认配置文件为<code>alertmanager.yml</code>,AlertManager容器内的配置文件为：<code>/etc/alertmanager/alertmanager.yml</code></p>
</blockquote>
<ul>
<li>启动 AlertManager</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">14207</span>:9093 <span class="token parameter variable">--name</span> alertmanager <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /mhxw/monitor/prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /mhxw/monitor/prometheus/:/etc/alertmanager/config/ <span class="token punctuation">\</span>
prom/alertmanager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>AlertManager 参考文件</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">global:
  resolve_timeout: 5m
  smtp_smarthost: <span class="token string">"smtp.qq.com:587"</span>
  smtp_from: <span class="token string">"xxxx@qq.com"</span>
  smtp_auth_username: <span class="token string">"xxxx@qq.com"</span>
  <span class="token comment">#邮箱专用授权码</span>
  smtp_auth_password: <span class="token string">"xxxx"</span>
  <span class="token comment">#关闭TLS授权</span>
  smtp_require_tls: <span class="token boolean">true</span>

<span class="token comment">#自定义告警模板</span>
templates:
  - <span class="token string">"/etc/alertmanager/config/alert-temp/*.tmpl"</span>

route:
  group_by: <span class="token punctuation">[</span><span class="token string">'swarm_status'</span>,<span class="token string">'node_status'</span><span class="token punctuation">]</span>
  group_wait: 30s
  group_interval: 20m
  repeat_interval: 1h
  receiver: <span class="token string">'swarm_receiver'</span>
receivers:
- name: <span class="token string">'swarm_receiver'</span>
  email_configs:
    - to: <span class="token string">'xxxx@qq.com'</span>
      send_resolved: <span class="token boolean">true</span>
inhibit_rules:
  - source_match:
      severity: <span class="token string">'critical'</span>
    target_match:
      severity: <span class="token string">'warning'</span>
    equal: <span class="token punctuation">[</span><span class="token string">'alertname'</span>, <span class="token string">'dev'</span>, <span class="token string">'instance'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>重新配置 Prometheus</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">alerting:
  alertmanagers:
  - static_configs:
    - targets: <span class="token punctuation">[</span><span class="token string">'172.31.10.69:14207'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>配置说明：</li>
</ul>
<p>告诉prometheus，放生告警时，将告警信息发送到Alertmanager，Alertmanager地址为 <a href="http://172.31.10.69:14207/">http://172.31.10.69:14207</a></p>
<ul>
<li>删除Prometheus之前容器，重新运行</li>
</ul>
<ol>
<li><p>先用<code>docker ps</code>查看prometheus容器ID</p>
</li>
<li><p>停掉容器 <code>docker stop ***</code></p>
</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> stop prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="3">
<li>删掉这个容器 <code>docker rm ***</code></li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">rm</span> prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>重新启动容器</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span><span class="token operator">=</span>prometheus <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">14204</span>:9090 <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /mhxw/monitor/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /mhxw/monitor/prometheus/zhangZhang.yml:/etc/prometheus/zhangZhang.yml <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /mhxw/monitor/prometheus/mhxw_node_exporter.yml:/etc/prometheus/mhxw_node_exporter.yml <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /mhxw/monitor/prometheus/laoCui.yml:/etc/prometheus/laoCui.yml <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /mhxw/monitor/prometheus/rules/alert-rules-node.yml:/etc/prometheus/rules/alert-rules-node.yml <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /mhxw/monitor/prometheus/rules/alert-rules-mhxw.yml:/etc/prometheus/rules/alert-rules-mhxw.yml <span class="token punctuation">\</span>
prom/prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span><span class="token operator">=</span>prometheus <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">14204</span>:9090 <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /mhxw/monitor/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /mhxw/monitor/prometheus/:/etc/prometheus/config/ <span class="token punctuation">\</span>
prom/prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://cloud.tencent.com/developer/article/1486483<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li><p>bee_export</p>
</li>
<li><p>prometheus</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span><span class="token operator">=</span>prometheus <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">20603</span>:9090 <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /mhxw/monitor/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /mhxw/monitor/prometheus/:/etc/prometheus/config/ <span class="token punctuation">\</span>
prom/prometheus

<span class="token function">docker</span> logs <span class="token parameter variable">-f</span> prometheus

<span class="token function">docker</span> stop prometheus

<span class="token function">docker</span> <span class="token function">rm</span> prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>alertmanager</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">20604</span>:9093 <span class="token parameter variable">--name</span> alertmanager <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /mhxw/prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /mhxw/prometheus/:/etc/alertmanager/config/ <span class="token punctuation">\</span>
prom/alertmanager

<span class="token function">docker</span> stop alertmanager

<span class="token function">docker</span> <span class="token function">rm</span> alertmanager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>bee_export</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">--restart</span> unless-stopped <span class="token punctuation">\</span>
  <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">20601</span>:20601 <span class="token punctuation">\</span>
	<span class="token parameter variable">--name</span><span class="token operator">=</span>bee_export <span class="token punctuation">\</span>
	--log-opt max-size<span class="token operator">=</span>20m <span class="token punctuation">\</span>
	--log-opt max-file<span class="token operator">=</span><span class="token number">3</span> <span class="token punctuation">\</span>
	<span class="token parameter variable">-v</span> /mhxw/monitor/bee_export/info.json:/usr/local/bin/info.json <span class="token punctuation">\</span>
	sgswarm/bee_export:0.0.6 <span class="token parameter variable">-path</span> /usr/local/bin/info.json

<span class="token function">docker</span> stop bee_export

<span class="token function">docker</span> <span class="token function">rm</span> bee_export<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="常见错误处理"><a href="#常见错误处理" class="headerlink" title="常见错误处理"></a>常见错误处理</h2><ul>
<li>问题一</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">level</span><span class="token operator">=</span>error <span class="token assign-left variable">ts</span><span class="token operator">=</span><span class="token number">2021</span>-06-25T02:55:06.818Z <span class="token assign-left variable">caller</span><span class="token operator">=</span>query_logger.go:87 <span class="token assign-left variable">component</span><span class="token operator">=</span>activeQueryTracker <span class="token assign-left variable">msg</span><span class="token operator">=</span><span class="token string">"Error opening query log file"</span> <span class="token assign-left variable">file</span><span class="token operator">=</span>/prometheus/queries.active <span class="token assign-left variable">err</span><span class="token operator">=</span><span class="token string">"open /prometheus/queries.active: permission denied"</span>
panic: Unable to create mmap-ed active query log

goroutine <span class="token number">1</span> <span class="token punctuation">[</span>running<span class="token punctuation">]</span>:
github.com/prometheus/prometheus/promql.NewActiveQueryTracker<span class="token punctuation">(</span>0x7ffde0177f57, 0xb, 0x14, 0x375eea0, 0xc000092c80, 0x375eea0<span class="token punctuation">)</span>
        /app/promql/query_logger.go:117 +0x4e8
main.main<span class="token punctuation">(</span><span class="token punctuation">)</span>
        /app/cmd/prometheus/main.go:462 +0x5990<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>启动命令造成</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-v</span> /mhxw/monitor/prometheus/data:/prometheus <span class="token punctuation">\</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>问题二</li>
</ul>
<p>docker启动时候，prometheus命令放在镜像名后面</p>
]]></content>
      <categories>
        <category>运维监控</category>
      </categories>
      <tags>
        <tag>grafana</tag>
        <tag>prometheus</tag>
        <tag>alertmanager</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux运维和Docker 相关使用</title>
    <url>/2021-06-06-docker/</url>
    <content><![CDATA[<h2 id="Docker-使用教程"><a href="#Docker-使用教程" class="headerlink" title="Docker 使用教程"></a>Docker 使用教程</h2><p>docker 停止机器</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> stop dfd5ea286723<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>docker 删除容器</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">rm</span> dfd5ea286723<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<span id="more"></span>
<p>docker 删除镜像</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> rmi f4fd1bb745b2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看docker日志</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> logs <span class="token parameter variable">-f</span> bc27c52f48eb9bbfc7146527f92b1de1b9665a7ccbedc59b23f7e3452b049707<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="Linux-使用教程"><a href="#Linux-使用教程" class="headerlink" title="Linux 使用教程"></a>Linux 使用教程</h2><p>查看服务器相关配置</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">htop</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="Tmux-使用教程"><a href="#Tmux-使用教程" class="headerlink" title="Tmux 使用教程"></a>Tmux 使用教程</h2><ul>
<li>安装</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> tmux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>新建一个指定名称的会话</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tmux new <span class="token parameter variable">-s</span> prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Linux相关</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Pushgateway 的安装和使用</title>
    <url>/2021-06-06-pushgateway/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Pushgateway是Prometheus下的一个组件，用来当做采集对象和Prometheus的代理，Prometheus会定时的从gateway上面pull数据。<br>由于服务部署在容器中，服务的ip会经常的变化，导致Prometheus无法直接拉取到每个target的数据。<br>问题：<br>多个服务的数据，推送到Pushgateway，如果push挂了，影响比较大</p>
<span id="more"></span>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>源码地址：</li>
</ul>
<p><a href="https://github.com/prometheus/pushgateway">https://github.com/prometheus/pushgateway</a></p>
<ul>
<li>解压</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> pushgateway-1.4.1.linux-amd64.tar.gz
<span class="token function">mv</span> pushgateway-1.4.1.linux-amd64 pushgateway<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>启动</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./pushgateway --web.listen-address<span class="token operator">=</span><span class="token string">":18091"</span> --web.telemetry-path<span class="token operator">=</span><span class="token string">"/metrics"</span> <span class="token parameter variable">--persistence.interval</span><span class="token operator">=</span>5m <span class="token parameter variable">--persistence.file</span><span class="token operator">=</span><span class="token string">"persistence-data"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>参数说明</p>
<ul>
<li>–web.listen-address：#指定服务端口</li>
<li>–web.telemetry-path：指定暴露出去的接口</li>
<li>–persistence.interval：持久化存储的间隔时间</li>
<li>–persistence.file：持久化存储的地址</li>
</ul>
<h3 id="重新配置Prometheus"><a href="#重新配置Prometheus" class="headerlink" title="重新配置Prometheus"></a>重新配置Prometheus</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">- job_name: <span class="token string">"pushgateway"</span>
  honor_labels: <span class="token boolean">true</span>
  honor_timestamps: <span class="token boolean">true</span>
  static_configs:
  - targets: <span class="token punctuation">[</span><span class="token string">"localhost:9091"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>运维监控</category>
      </categories>
      <tags>
        <tag>prometheus</tag>
        <tag>pushgateway</tag>
      </tags>
  </entry>
  <entry>
    <title>Install docker on ubuntu 20.04</title>
    <url>/2021-06-13-install-docker-on-ubuntu-20.04/</url>
    <content><![CDATA[<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="2021-5-16-install-docker-and-mysql-8-on-ubuntu.md">修改docker存储目录</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://blog.csdn.net/u010381752/article/details/114086343<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Cron 入门与使用</title>
    <url>/2021-06-20-cron/</url>
    <content><![CDATA[<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><ul>
<li>引入依赖包</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get <span class="token parameter variable">-u</span> github.com/robfig/cron/v3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<span id="more"></span>
<ul>
<li>案例演示</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">package main

<span class="token function">import</span> <span class="token punctuation">(</span>
  <span class="token string">"fmt"</span>
  <span class="token string">"time"</span>

  <span class="token string">"github.com/robfig/cron/v3"</span>
<span class="token punctuation">)</span>

func <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  c :<span class="token operator">=</span> cron.New<span class="token punctuation">(</span><span class="token punctuation">)</span>

  c.AddFunc<span class="token punctuation">(</span><span class="token string">"@every 1s"</span>, <span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt.Println<span class="token punctuation">(</span><span class="token string">"tick every 1 second"</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  c.Start<span class="token punctuation">(</span><span class="token punctuation">)</span>
  
  // 阻塞，或者使用其他延迟时间函数、
  select<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>使用非常简单，创建cron对象，这个对象用于管理定时任务。</p>
<p>调用cron对象的AddFunc()方法向管理器中添加定时任务。AddFunc()接受两个参数，参数 1 以字符串形式指定触发时间规则，参数 2 是一个无参的函数，每次触发时调用。@every 1s表示每秒触发一次，@every后加一个时间间隔，表示每隔多长时间触发一次。例如@every 1h表示每小时触发一次，@every 1m2s表示每隔 1 分 2 秒触发一次。time.ParseDuration()支持的格式都可以用在这里。</p>
<p>调用c.Start()启动定时循环。</p>
<p>注意一点，因为c.Start()启动一个新的 goroutine 做循环检测，我们在代码最后加了一行time.Sleep(time.Second * 5)防止主 goroutine 退出。</p>
<p>运行效果，每隔 1s 输出一行字符串：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ go run main.go
tick every <span class="token number">1</span> second
tick every <span class="token number">1</span> second
tick every <span class="token number">1</span> second
tick every <span class="token number">1</span> second
tick every <span class="token number">1</span> second<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="时间格式"><a href="#时间格式" class="headerlink" title="时间格式"></a>时间格式</h2><pre class="line-numbers language-none"><code class="language-none">每隔5秒执行一次：*&#x2F;5 * * * * ?

每隔1分钟执行一次：0 *&#x2F;1 * * * ?

每天23点执行一次：0 0 23 * * ?

每天凌晨1点执行一次：0 0 1 * * ?

每月1号凌晨1点执行一次：0 0 1 1 * ?

在26分、29分、33分执行一次：0 26,29,33 * * * ?

每天的0点、13点、18点、21点都执行一次：0 0 0,13,18,21 * * ?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="预定义时间规则"><a href="#预定义时间规则" class="headerlink" title="预定义时间规则"></a>预定义时间规则</h3><p>为了方便使用，cron预定义了一些时间规则：</p>
<ul>
<li>@yearly：也可以写作@annually，表示每年第一天的 0 点。等价于0 0 1 1 *；</li>
<li>@monthly：表示每月第一天的 0 点。等价于0 0 1 * *；</li>
<li>@weekly：表示每周第一天的 0 点，注意第一天为周日，即周六结束，周日开始的那个 0 点。等价于0 0 * * 0；</li>
<li>@daily：也可以写作@midnight，表示每天 0 点。等价于0 0 * * *；</li>
<li>@hourly：表示每小时的开始。等价于0 * * * *。</li>
</ul>
<p>例如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">func <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  c :<span class="token operator">=</span> cron.New<span class="token punctuation">(</span><span class="token punctuation">)</span>

  c.AddFunc<span class="token punctuation">(</span><span class="token string">"@hourly"</span>, <span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt.Println<span class="token punctuation">(</span><span class="token string">"Every hour"</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  c.AddFunc<span class="token punctuation">(</span><span class="token string">"@daily"</span>, <span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt.Println<span class="token punctuation">(</span><span class="token string">"Every day on midnight"</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  c.AddFunc<span class="token punctuation">(</span><span class="token string">"@weekly"</span>, <span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt.Println<span class="token punctuation">(</span><span class="token string">"Every week"</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  c.Start<span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
    time.Sleep<span class="token punctuation">(</span>time.Second<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://www.cnblogs.com/niuben/p/14615806.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>golang</tag>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>json-server 入门与使用</title>
    <url>/2021-06-20-json-server/</url>
    <content><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="安装-nodejs-和-npm"><a href="#安装-nodejs-和-npm" class="headerlink" title="安装 nodejs 和 npm"></a>安装 nodejs 和 npm</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> nodejs <span class="token function">npm</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>校验是否安装成功</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> <span class="token parameter variable">-v</span>
<span class="token function">npm</span> <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<span id="more"></span>
<h2 id="安装-JSON-Server"><a href="#安装-JSON-Server" class="headerlink" title="安装 JSON Server"></a>安装 JSON Server</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> json-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>创建一个<code>db.json</code>文件作为数据源</li>
</ul>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><ul>
<li>–port： 端口</li>
<li>–host： ip</li>
<li>–watch： 数据源</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">json-server <span class="token parameter variable">--watch</span> /mhxw/json/db.json <span class="token parameter variable">--port</span> <span class="token number">6666</span> <span class="token parameter variable">--host</span> <span class="token number">0.0</span>.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>至此，就启动好了，访问相关链接就可以看到模拟的数据了</p>
]]></content>
      <tags>
        <tag>json-server</tag>
      </tags>
  </entry>
  <entry>
    <title>查看磁盘使用情况</title>
    <url>/2021-06-20-view-disk-space/</url>
    <content><![CDATA[<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><ul>
<li>1、使用df命令，查看整体的磁盘使用情况</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">df</span> <span class="token parameter variable">-h</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<span id="more"></span>
<ul>
<li>2、使用du命令查看指定目录的使用情况</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">du</span> <span class="token parameter variable">-sh</span>  python3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>3、Docker清理日志脚本</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-lh</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">find</span> /swarm/docker/containers/ <span class="token parameter variable">-name</span> *-json.log<span class="token variable">)</span></span>

<span class="token function">sudo</span> <span class="token function">vim</span> clean_docker_log.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>

<span class="token builtin class-name">echo</span> <span class="token string">"======== start clean docker containers logs ========"</span>
<span class="token assign-left variable">logs</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">find</span> /swarm/docker/containers/ <span class="token parameter variable">-name</span> *-json.log<span class="token variable">)</span></span>

<span class="token keyword">for</span> <span class="token for-or-select variable">log</span> <span class="token keyword">in</span> <span class="token variable">$logs</span>

<span class="token keyword">do</span>

<span class="token builtin class-name">echo</span> <span class="token string">"clean logs : <span class="token variable">$log</span>"</span>

<span class="token function">cat</span> /dev/null <span class="token operator">></span> <span class="token variable">$log</span>

<span class="token keyword">done</span>

<span class="token builtin class-name">echo</span> <span class="token string">"======== end clean docker containers logs ========"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x clean_docker_log.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>参考文档</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://www.php.cn/faq/415665.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>Linux相关</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>将Docker镜像上传到阿里云</title>
    <url>/2021-06-27-upload-docker-images-to-aliyun/</url>
    <content><![CDATA[<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="1-进入阿里云镜像官网"><a href="#1-进入阿里云镜像官网" class="headerlink" title="1. 进入阿里云镜像官网"></a>1. 进入阿里云镜像官网</h3><p><a href="https://www.aliyun.com/product/acr">https://www.aliyun.com/product/acr</a></p>
<p><img src="/images/udta-1.png"></p>
<p>再点击“管理控制台”进入管理页面</p>
<span id="more"></span>
<h3 id="2-创建一个仓库"><a href="#2-创建一个仓库" class="headerlink" title="2. 创建一个仓库"></a>2. 创建一个仓库</h3><p><img src="/images/udta-2.png"></p>
<p><img src="/images/udta-3.png"></p>
<h3 id="3-按照指示推送镜像"><a href="#3-按照指示推送镜像" class="headerlink" title="3. 按照指示推送镜像"></a>3. 按照指示推送镜像</h3><p><img src="/images/udta-4.png"></p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://help.aliyun.com/document_detail/198212.html
https://blog.csdn.net/qq_41489540/article/details/114228545<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>在Ubuntu上安装CoreDNS</title>
    <url>/2021-07-04-coredns/</url>
    <content><![CDATA[<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="1-从-官网-载CoreDNS"><a href="#1-从-官网-载CoreDNS" class="headerlink" title="1. 从 官网 载CoreDNS"></a>1. 从 <a href="https://coredns.io/">官网</a> 载CoreDNS</h3><p>将二进制文件解压到 <code>/mhxw/dns</code>并使其可执行</p>
<span id="more"></span>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x /mhxw/dns/coredns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull coredns/coredns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /bhp/coredns
<span class="token function">nano</span> /bhp/coredns/dns/coredns/corefile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3><ul>
<li>内部hosts</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.:53 <span class="token punctuation">&#123;</span>
    hosts <span class="token punctuation">&#123;</span>
        <span class="token number">10.0</span>.0.1 my.host.com
        fallthrough
    <span class="token punctuation">&#125;</span>
    forward <span class="token builtin class-name">.</span> <span class="token number">114.114</span>.114.114:53
    log
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>外部hosts</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.:53 <span class="token punctuation">&#123;</span>
    hosts /etc/coredns/hostsfile <span class="token punctuation">&#123;</span>
        fallthrough
    <span class="token punctuation">&#125;</span>
    forward <span class="token builtin class-name">.</span> <span class="token number">8.8</span>.8.8:53
    log
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cat hostsfile</span>
<span class="token number">10.0</span>.0.1 my.host.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> coredns <span class="token punctuation">\</span>
<span class="token parameter variable">--net</span><span class="token operator">=</span>host <span class="token punctuation">\</span>
<span class="token parameter variable">-v</span> /bhp/dns/coredns:/etc/coredns/ <span class="token punctuation">\</span>
coredns/coredns:latest <span class="token punctuation">\</span>
<span class="token parameter variable">-conf</span> /etc/coredns/corefile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">dig</span> @127.0.0.1 <span class="token parameter variable">-p</span> <span class="token number">53</span> my.host.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>运维监控</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ubuntu</tag>
        <tag>dns</tag>
        <tag>coredns</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装Nginx</title>
    <url>/2021-07-11-docker-install-nginx/</url>
    <content><![CDATA[<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><h3 id="1-使用默认配置运行"><a href="#1-使用默认配置运行" class="headerlink" title="1. 使用默认配置运行"></a>1. 使用默认配置运行</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> nginx <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">-d</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<span id="more"></span>
<p>参数解释</p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Golang中正确使用基本身份认证（HTTP Basic Authentication）</title>
    <url>/2021-07-15-basic-authentication-in-go/</url>
    <content><![CDATA[<p>在Go1.4版本中引入了<a href="https://pkg.go.dev/net/http#Request.BasicAuth">HTTP基本身份认证模块</a> 。</p>
<span id="more"></span>

<h2 id="什么是基本认证？我应该在什么时候使用它？"><a href="#什么是基本认证？我应该在什么时候使用它？" class="headerlink" title="什么是基本认证？我应该在什么时候使用它？"></a>什么是基本认证？我应该在什么时候使用它？</h2><p>作为开发人员，您可能访问受保护的网址时，Web 浏览器显示以下弹框。</p>
<p><img src="/images/baig-1.jpg" alt="弹框截图"></p>
<p>当您在此提示输入用户名和密码时，Web 浏览器将向服务器发送一个包含<code>Authorization</code>标头的 HTTP 请求，类似于：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Authorization: Basic <span class="token assign-left variable">YWxpY2U6cGE1NXdvcmQ</span><span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Authorization: Basic base64encode<span class="token punctuation">(</span>username+<span class="token string">":"</span>+password<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>HTTP协议中的 <code>Authorization</code> 请求消息头含有服务器用于验证用户代理身份的凭证。格式是<code>Basic</code>字符串+空格+用户名:密码的Base64编码。在上述示例中，<code>YWxpY2U6cGE1NXdvcmQ=</code>&#x3D; 是用户名:密码的base64编码。</p>
<p>当服务器收到这个请求时，它会从<code>Authorization</code>中解析用户名和密码并检查它们是否有效。如果凭据无效，服务器返回<code>401 Unauthorized</code>响应，浏览器可以再次显示弹框。</p>
<p>基本身份验证可用于许多不同的场景，但它通常适合于对安全性要求不高的系统或设备中。</p>
<p>为了提高其安全性，您可以：</p>
<ul>
<li><p>只在 HTTPS 连接上使用它：如果您不使用 HTTPS，<code>Authorization</code>请求消息头可能会被攻击者拦截和解码，然后他们可以使用用户名和密码来访问您受保护的资源。</p>
</li>
<li><p>使用攻击者难以猜测或暴力破解的强密码。</p>
</li>
</ul>
<h2 id="保护-Web-应用程序"><a href="#保护-Web-应用程序" class="headerlink" title="保护 Web 应用程序"></a>保护 Web 应用程序</h2><p>保护程序最简单的方法的是创建一些中间件。我们需要做到以下几点：</p>
<ul>
<li><p>从<code>Authorization</code>请求消息头中解析用户名和密码（如果存在）。建议直接使用Go 1.4 中引入的方法：<code>r.BasicAuth()</code>。</p>
</li>
<li><p>将提供的用户名和密码与您期望的值进行比较。为了避免定时攻击的风险，你应该使用 Go 的<code>subtle.ConstantTimeCompare()</code>函数进行比较。</p>
</li>
</ul>
<blockquote>
<p>注意：</p>
<p>在Go中（和大多数语言一样），普通的&#x3D;&#x3D;比较运算符一旦发现两个字符串之间有差异，就会立即返回。因此，如果第一个字符是不同的，它将在只看一个字符后返回。从理论上讲，这为<a href="">定时攻击</a>提供了机会，攻击者可以向你的应用程序发出大量请求，并查看平均响应时间的差异。他们收到401响应所需的时间可以有效地告诉他们有多少字符是正确的，如果有足够的请求，他们可以建立一个完整的用户名和密码的画像。像网络抖动这样的事情使得这种特定的攻击很难实现，但远程定时攻击已经成为现实，而且在未来可能变得更加可行。考虑到这个因素我们可以通过使用subtle.ConstantTimeCompare()很容易地防范这种风险，这样做是有意义的。</p>
</blockquote>
<p>同样要注意的是，使用<code>subtle.ConstantTimeCompare()</code>可能会 <a href="https://github.com/golang/go/issues/18936">泄露有关用户名和密码长度的信息</a> 。为了防范这种情况，我们应该在它们比较之前使用散列函数加密（比如：SHA-256）用户名和密码。使用加密后的用户名和密码镜像比较来防止<code>subtle.ConstantTimeCompare()</code> 提前返回。</p>
<ul>
<li>如果用户名和密码不正确，或者请求不包含有效的<code>Authorization</code>消息头，那么中间件应该发送<code>401 Unauthorized</code>响应并设置 <a href="https://datatracker.ietf.org/doc/html/rfc7235#section-4.1">WWW-Authenticate</a> 消息头以通知客户端应该使用基本身份验证来获得访问权限。否则，中间件应该允许请求进行下一步。</li>
</ul>
<p>综上所述，实现中间件的案例如下所示：</p>
<pre class="line-numbers language-golang" data-language="golang"><code class="language-golang">func basicAuth(next http.HandlerFunc) http.HandlerFunc &#123;
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) &#123;
        &#x2F;&#x2F; Extract the username and password from the request 
        &#x2F;&#x2F; Authorization header. If no Authentication header is present 
        &#x2F;&#x2F; or the header value is invalid, then the &#39;ok&#39; return value 
        &#x2F;&#x2F; will be false.
		username, password, ok :&#x3D; r.BasicAuth()
		if ok &#123;
            &#x2F;&#x2F; Calculate SHA-256 hashes for the provided and expected
            &#x2F;&#x2F; usernames and passwords.
			usernameHash :&#x3D; sha256.Sum256([]byte(username))
			passwordHash :&#x3D; sha256.Sum256([]byte(password))
			expectedUsernameHash :&#x3D; sha256.Sum256([]byte(&quot;your expected username&quot;))
			expectedPasswordHash :&#x3D; sha256.Sum256([]byte(&quot;your expected password&quot;))

            &#x2F;&#x2F; 使用 subtle.ConstantTimeCompare() 进行校验
            &#x2F;&#x2F; the provided username and password hashes equal the  
            &#x2F;&#x2F; expected username and password hashes. ConstantTimeCompare
            &#x2F;&#x2F; 如果值相等，则返回1，否则返回0。
            &#x2F;&#x2F; Importantly, we should to do the work to evaluate both the 
            &#x2F;&#x2F; username and password before checking the return values to 
            &#x2F;&#x2F; 避免泄露信息。
			usernameMatch :&#x3D; (subtle.ConstantTimeCompare(usernameHash[:], expectedUsernameHash[:]) &#x3D;&#x3D; 1)
			passwordMatch :&#x3D; (subtle.ConstantTimeCompare(passwordHash[:], expectedPasswordHash[:]) &#x3D;&#x3D; 1)

            &#x2F;&#x2F; If the username and password are correct, then call
            &#x2F;&#x2F; the next handler in the chain. Make sure to return 
            &#x2F;&#x2F; afterwards, so that none of the code below is run.
			if usernameMatch &amp;&amp; passwordMatch &#123;
				next.ServeHTTP(w, r)
				return
			&#125;
		&#125;

        &#x2F;&#x2F; If the Authentication header is not present, is invalid, or the
        &#x2F;&#x2F; username or password is wrong, then set a WWW-Authenticate 
        &#x2F;&#x2F; header to inform the client that we expect them to use basic
        &#x2F;&#x2F; authentication and send a 401 Unauthorized response.
		w.Header().Set(&quot;WWW-Authenticate&quot;, &#96;Basic realm&#x3D;&quot;restricted&quot;, charset&#x3D;&quot;UTF-8&quot;&#96;)
		http.Error(w, &quot;Unauthorized&quot;, http.StatusUnauthorized)
	&#125;)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><p>至此，让我们编写一个小型但功能齐全的项目测试一下。</p>
<p>在您的计算机上创建一个新目录，添加一个<code>main.go</code>文件，初始化一个<code>mod</code>，并使用 <a href="https://github.com/FiloSottile/mkcert">mkcert</a> 工具创建一对本地信任的 TLS 证书。就像这样：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> basic-auth-example
$ <span class="token builtin class-name">cd</span> basic-auth-example
$ <span class="token function">touch</span> main.go
$ go mod init example.com/basic-auth-example
go: creating new go.mod: module example.com/basic-auth-example
$ mkcert localhost
Created a new certificate valid <span class="token keyword">for</span> the following names 📜
     - <span class="token string">"localhost"</span>
    
    The certificate is at <span class="token string">"./localhost.pem"</span> and the key at <span class="token string">"./localhost-key.pem"</span> ✅
    
    It will expire on <span class="token number">21</span> September <span class="token number">2023</span> 🗓
$ <span class="token function">ls</span>
go.mod  localhost-key.pem  localhost.pem  main.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>把以下代码复制到<code>mian.go</code>中</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">package main

<span class="token function">import</span> <span class="token punctuation">(</span>
	<span class="token string">"crypto/sha256"</span>
	<span class="token string">"crypto/subtle"</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"log"</span>
	<span class="token string">"net/http"</span>
	<span class="token string">"os"</span>
	<span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token builtin class-name">type</span> application struct <span class="token punctuation">&#123;</span>
	auth struct <span class="token punctuation">&#123;</span>
		username string
		password string
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

func <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	app :<span class="token operator">=</span> new<span class="token punctuation">(</span>application<span class="token punctuation">)</span>

	app.auth.username <span class="token operator">=</span> <span class="token string">"mhxw"</span>
	app.auth.password <span class="token operator">=</span> <span class="token string">"mhxw_password"</span>

	<span class="token keyword">if</span> app.auth.username <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>
		log.Fatal<span class="token punctuation">(</span><span class="token string">"basic auth username must be provided"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> app.auth.password <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>
		log.Fatal<span class="token punctuation">(</span><span class="token string">"basic auth password must be provided"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	mux :<span class="token operator">=</span> http.NewServeMux<span class="token punctuation">(</span><span class="token punctuation">)</span>
	mux.HandleFunc<span class="token punctuation">(</span><span class="token string">"/unprotected"</span>, app.unprotectedHandler<span class="token punctuation">)</span>
	mux.HandleFunc<span class="token punctuation">(</span><span class="token string">"/protected"</span>, app.basicAuth<span class="token punctuation">(</span>app.protectedHandler<span class="token punctuation">))</span>

	srv :<span class="token operator">=</span> <span class="token operator">&amp;</span>http.Server<span class="token punctuation">&#123;</span>
		Addr:         <span class="token string">":4000"</span>,
		Handler:      mux,
		IdleTimeout:  time.Minute,
		ReadTimeout:  <span class="token number">10</span> * time.Second,
		WriteTimeout: <span class="token number">30</span> * time.Second,
	<span class="token punctuation">&#125;</span>

	log.Printf<span class="token punctuation">(</span><span class="token string">"starting server on %s"</span>, srv.Addr<span class="token punctuation">)</span>
	err :<span class="token operator">=</span> srv.ListenAndServeTLS<span class="token punctuation">(</span><span class="token string">"./localhost.pem"</span>, <span class="token string">"./localhost-key.pem"</span><span class="token punctuation">)</span>
	log.Fatal<span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

func <span class="token punctuation">(</span>app *application<span class="token punctuation">)</span> protectedHandler<span class="token punctuation">(</span>w http.ResponseWriter, r *http.Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt.Fprintln<span class="token punctuation">(</span>w, <span class="token string">"This is the protected handler"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

func <span class="token punctuation">(</span>app *application<span class="token punctuation">)</span> unprotectedHandler<span class="token punctuation">(</span>w http.ResponseWriter, r *http.Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt.Fprintln<span class="token punctuation">(</span>w, <span class="token string">"This is the unprotected handler"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

func <span class="token punctuation">(</span>app *application<span class="token punctuation">)</span> basicAuth<span class="token punctuation">(</span>next http.HandlerFunc<span class="token punctuation">)</span> http.HandlerFunc <span class="token punctuation">&#123;</span>
	<span class="token builtin class-name">return</span> func<span class="token punctuation">(</span>w http.ResponseWriter, r *http.Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		username, password, ok :<span class="token operator">=</span> r.BasicAuth<span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> ok <span class="token punctuation">&#123;</span>
			usernameHash :<span class="token operator">=</span> sha256.Sum256<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>byte<span class="token punctuation">(</span>username<span class="token punctuation">))</span>
			passwordHash :<span class="token operator">=</span> sha256.Sum256<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>byte<span class="token punctuation">(</span>password<span class="token punctuation">))</span>
			expectedUsernameHash :<span class="token operator">=</span> sha256.Sum256<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>byte<span class="token punctuation">(</span>app.auth.username<span class="token punctuation">))</span>
			expectedPasswordHash :<span class="token operator">=</span> sha256.Sum256<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>byte<span class="token punctuation">(</span>app.auth.password<span class="token punctuation">))</span>

			usernameMatch :<span class="token operator">=</span> subtle.ConstantTimeCompare<span class="token punctuation">(</span>usernameHash<span class="token punctuation">[</span>:<span class="token punctuation">]</span>, expectedUsernameHash<span class="token punctuation">[</span>:<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>
			passwordMatch :<span class="token operator">=</span> subtle.ConstantTimeCompare<span class="token punctuation">(</span>passwordHash<span class="token punctuation">[</span>:<span class="token punctuation">]</span>, expectedPasswordHash<span class="token punctuation">[</span>:<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>

			<span class="token keyword">if</span> usernameMatch <span class="token operator">&amp;&amp;</span> passwordMatch <span class="token punctuation">&#123;</span>
				next.ServeHTTP<span class="token punctuation">(</span>w, r<span class="token punctuation">)</span>
				<span class="token builtin class-name">return</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>

		w.Header<span class="token punctuation">(</span><span class="token punctuation">)</span>.Set<span class="token punctuation">(</span><span class="token string">"WWW-Authenticate"</span>, <span class="token variable"><span class="token variable">`</span>Basic <span class="token assign-left variable">realm</span><span class="token operator">=</span><span class="token string">"restricted"</span>, <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token variable">`</span></span><span class="token punctuation">)</span>
		http.Error<span class="token punctuation">(</span>w, <span class="token string">"Unauthorized"</span>, http.StatusUnauthorized<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行以上案例，您可以在浏览器访问网址：<code>https://localhost:4000/protected</code> ，您可以看到浏览器弹出的基本身份认证提示。</p>
<p>或者，您可以发送一些<code>curl</code>请求来验证<code>基本身份认证</code>是否正常工作</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> <span class="token parameter variable">-i</span> https://localhost:4000/unprotected
HTTP/2 <span class="token number">200</span> 
content-type: text/plain<span class="token punctuation">;</span> <span class="token assign-left variable">charset</span><span class="token operator">=</span>utf-8
content-length: <span class="token number">32</span>
date: Sun, <span class="token number">20</span> Jun <span class="token number">2021</span> <span class="token number">14</span>:09:56 GMT

This is the unprotected handler

$ <span class="token function">curl</span> <span class="token parameter variable">-i</span> https://localhost:4000/protected
HTTP/2 <span class="token number">401</span> 
content-type: text/plain<span class="token punctuation">;</span> <span class="token assign-left variable">charset</span><span class="token operator">=</span>utf-8
www-authenticate: Basic <span class="token assign-left variable">realm</span><span class="token operator">=</span><span class="token string">"restricted"</span>, <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">"UTF-8"</span>
x-content-type-options: nosniff
content-length: <span class="token number">13</span>
date: Sun, <span class="token number">20</span> Jun <span class="token number">2021</span> <span class="token number">14</span>:09:59 GMT

Unauthorized

$ <span class="token function">curl</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-u</span> alice:p8fnxeqj5a7zbrqp https://localhost:4000/protected
HTTP/2 <span class="token number">200</span> 
content-type: text/plain<span class="token punctuation">;</span> <span class="token assign-left variable">charset</span><span class="token operator">=</span>utf-8
content-length: <span class="token number">30</span>
date: Sun, <span class="token number">20</span> Jun <span class="token number">2021</span> <span class="token number">14</span>:10:14 GMT

This is the protected handler

$ <span class="token function">curl</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-u</span> alice:wrongPa55word https://localhost:4000/protected
HTTP/2 <span class="token number">401</span> 
content-type: text/plain<span class="token punctuation">;</span> <span class="token assign-left variable">charset</span><span class="token operator">=</span>utf-8
www-authenticate: Basic <span class="token assign-left variable">realm</span><span class="token operator">=</span><span class="token string">"restricted"</span>, <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">"UTF-8"</span>
x-content-type-options: nosniff
content-length: <span class="token number">13</span>
date: Sun, <span class="token number">20</span> Jun <span class="token number">2021</span> <span class="token number">14</span>:15:30 GMT

Unauthorized<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="向受保护的HTTP资源发出请求"><a href="#向受保护的HTTP资源发出请求" class="headerlink" title="向受保护的HTTP资源发出请求"></a>向受保护的HTTP资源发出请求</h2><p>当您需要访问受保护的资源时，Go可以让您变得非常简单。您需要做的是在执行请求之前调用<a href="https://pkg.go.dev/net/http#Request.SetBasicAuth">r.SetBasicAuth()</a> 方法。如以下案例</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">package main

<span class="token function">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"io"</span>
    <span class="token string">"log"</span>
    <span class="token string">"net/http"</span>
    <span class="token string">"time"</span>
<span class="token punctuation">)</span>

func <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    client :<span class="token operator">=</span> http.Client<span class="token punctuation">&#123;</span>Timeout: <span class="token number">5</span> * time.Second<span class="token punctuation">&#125;</span>

    req, err :<span class="token operator">=</span> http.NewRequest<span class="token punctuation">(</span>http.MethodGet, <span class="token string">"https://localhost:4000/protected"</span>, http.NoBody<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> nil <span class="token punctuation">&#123;</span>
        log.Fatal<span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    req.SetBasicAuth<span class="token punctuation">(</span><span class="token string">"alice"</span>, <span class="token string">"p8fnxeqj5a7zbrqp"</span><span class="token punctuation">)</span>

    res, err :<span class="token operator">=</span> client.Do<span class="token punctuation">(</span>req<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> nil <span class="token punctuation">&#123;</span>
        log.Fatal<span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    defer res.Body.Close<span class="token punctuation">(</span><span class="token punctuation">)</span>

    resBody, err :<span class="token operator">=</span> io.ReadAll<span class="token punctuation">(</span>res.Body<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> nil <span class="token punctuation">&#123;</span>
        log.Fatal<span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    fmt.Printf<span class="token punctuation">(</span><span class="token string">"Status: %d<span class="token entity" title="\n">\n</span>"</span>, res.StatusCode<span class="token punctuation">)</span>
    fmt.Printf<span class="token punctuation">(</span><span class="token string">"Body: %s<span class="token entity" title="\n">\n</span>"</span>, string<span class="token punctuation">(</span>resBody<span class="token punctuation">))</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://mhxw.life
https://www.alexedwards.net/blog/basic-authentication-in-go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>basic-auth</tag>
        <tag>技术教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下安装docker和docker-compose</title>
    <url>/2021-09-05-install-docker-and-docker-compose-on-docker/</url>
    <content><![CDATA[<h3 id="一、安装docker"><a href="#一、安装docker" class="headerlink" title="一、安装docker"></a>一、安装docker</h3><ul>
<li>使用国内 daocloud 一键安装命令：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-sSL</span> https://get.daocloud.io/docker <span class="token operator">|</span> <span class="token function">sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>校验版本</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<span id="more"></span>
<h3 id="二、安装docker-compose"><a href="#二、安装docker-compose" class="headerlink" title="二、安装docker-compose"></a>二、安装docker-compose</h3><p>进入github仓库查看想要安装的版本</p>
<pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>国外服务器可采用github源</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">`</span></span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>国内使用DaoCloud源</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> https://get.daocloud.io/docker/compose/releases/download/1.29.2/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">`</span></span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>设置权限</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>检验是否安装成功</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>docker</tag>
        <tag>docker-compose</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 EtherScan、BscScan、PolygonScan 浏览器验证合约？</title>
    <url>/2021-09-18-how-to-verify-a-contract-on-etherscan-bscscan-polygonscan/</url>
    <content><![CDATA[<p>在浏览器上验证合约有多种方式，例如Hardhat或者Truffle方式。</p>
<span id="more"></span>

<h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><h3 id="Unable-to-generate-Contract-ByteCode-and-ABI-无法生成合约字节码和ABI"><a href="#Unable-to-generate-Contract-ByteCode-and-ABI-无法生成合约字节码和ABI" class="headerlink" title="Unable to generate Contract ByteCode and ABI 无法生成合约字节码和ABI"></a>Unable to generate Contract ByteCode and ABI 无法生成合约字节码和ABI</h3><p>这是一个通用的错误，并没有提供任何原因的指示。</p>
<p>当你遇到这个错误时，请逐一检查以下内容，确保它与你用来部署的内容完全一致：合约源代码、编译器版本、编译器优化和运行数、构造函数参数、库的地址。</p>
<h3 id="Definition-of-base-has-to-precede-definition-of-derived-contract"><a href="#Definition-of-base-has-to-precede-definition-of-derived-contract" class="headerlink" title="Definition of base has to precede definition of derived contract"></a>Definition of base has to precede definition of derived contract</h3><p>出现此情况你应该检查合约的顺序，父合约在前面，子合约在后面</p>
<p>以下是错误的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">contract Ownable is Context <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
contract Context <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>正确的顺序应该是：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">contract Context <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
contract Ownable is Context <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>智能合约</category>
      </categories>
      <tags>
        <tag>EtherScan</tag>
        <tag>BscScan</tag>
        <tag>PolygonScan</tag>
      </tags>
  </entry>
  <entry>
    <title>在 BscScan 上使用 Truffle 验证合约？</title>
    <url>/2021-09-19-truffle-verify/</url>
    <content><![CDATA[<h2 id="验证合约"><a href="#验证合约" class="headerlink" title="验证合约"></a>验证合约</h2><h4 id="1-首先在bscScan网站获取-API-密钥"><a href="#1-首先在bscScan网站获取-API-密钥" class="headerlink" title="1. 首先在bscScan网站获取 API 密钥"></a>1. 首先在bscScan网站获取 API 密钥</h4><p><a href="https://bscscan.com/myapikey">https://bscscan.com/myapikey</a></p>
<h4 id="2-安装插件"><a href="#2-安装插件" class="headerlink" title="2.安装插件"></a>2.安装插件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> truffle-plugin-verify
<span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> truffle-plugin-verify<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<span id="more"></span>

<h4 id="3-配置插件-truffle-config-js"><a href="#3-配置插件-truffle-config-js" class="headerlink" title="3. 配置插件 truffle-config.js"></a>3. 配置插件 truffle-config.js</h4><p>在js中添加以下内容：</p>
<pre class="line-numbers language-none"><code class="language-none">plugins: [
  &#39;truffle-plugin-verify&#39;
],
api_keys: &#123;
  bscscan: BSCSCANAPIKEY
&#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="4-将生成的API-key-粘贴到对应位置"><a href="#4-将生成的API-key-粘贴到对应位置" class="headerlink" title="4.将生成的API key 粘贴到对应位置"></a>4.将生成的API key 粘贴到对应位置</h4><h4 id="5-部署合约"><a href="#5-部署合约" class="headerlink" title="5. 部署合约"></a>5. 部署合约</h4><pre class="line-numbers language-none"><code class="language-none">truffle compile
truffle migrate --network testnet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="6-验证合约"><a href="#6-验证合约" class="headerlink" title="6.验证合约"></a>6.验证合约</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">truffle run verify <span class="token punctuation">&#123;</span>contract-name<span class="token punctuation">&#125;</span>@<span class="token punctuation">&#123;</span>deployed-address<span class="token punctuation">&#125;</span> <span class="token parameter variable">--network</span> testnet<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="参考案例"><a href="#参考案例" class="headerlink" title="参考案例"></a>参考案例</h2><p><a href="https://github.com/huangsuyu/verify-example">https://github.com/huangsuyu/verify-example</a></p>
]]></content>
      <categories>
        <category>智能合约</category>
      </categories>
      <tags>
        <tag>EtherScan</tag>
        <tag>BscScan</tag>
        <tag>PolygonScan</tag>
        <tag>Truffle</tag>
      </tags>
  </entry>
  <entry>
    <title>合约安全规范和漏洞防范</title>
    <url>/2021-09-26-contract-security-specifications/</url>
    <content><![CDATA[<h2 id="重放攻击"><a href="#重放攻击" class="headerlink" title="重放攻击"></a>重放攻击</h2><p>在区块链世界中，恶意代码数不胜数。如果你的合约包含了跨合约调用，就要特别当心，要确认外部调用是否可信，尤其当其逻辑不为你所掌控的时候。</p>
<p>如果缺乏防人之心，那些“居心叵测”的外部代码就可能将你的合约破坏殆尽。比如，外部调用可通过恶意回调，使代码被反复执行，从而破坏合约状态，这种攻击手法就是著名的Reentrance Attack（重放攻击）。</p>
<span id="more"></span>

<h4 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h4><ul>
<li><a href="https://docs.soliditylang.org/en/latest/style-guide.html">https://docs.soliditylang.org/en/latest/style-guide.html</a></li>
</ul>
<h4 id="安全防范"><a href="#安全防范" class="headerlink" title="安全防范"></a>安全防范</h4><ul>
<li><p><a href="https://docs.soliditylang.org/en/latest/security-considerations.html">https://docs.soliditylang.org/en/latest/security-considerations.html</a></p>
</li>
<li><p><a href="https://solidity-cn.readthedocs.io/zh/develop/security-considerations.html">https://solidity-cn.readthedocs.io/zh/develop/security-considerations.html</a></p>
</li>
</ul>
<h4 id="合约攻击预防"><a href="#合约攻击预防" class="headerlink" title="合约攻击预防"></a>合约攻击预防</h4><ul>
<li><a href="https://ethernaut.openzeppelin.com/">https://ethernaut.openzeppelin.com/</a></li>
</ul>
]]></content>
      <categories>
        <category>智能合约</category>
      </categories>
  </entry>
  <entry>
    <title>Build and push a container image to Docker Hub</title>
    <url>/2021-2-20-build-and-push-a-container-image-to-docker-hub/</url>
    <content><![CDATA[<h2 id="Docker制作自己的镜像并上传Dockerhub"><a href="#Docker制作自己的镜像并上传Dockerhub" class="headerlink" title="Docker制作自己的镜像并上传Dockerhub"></a>Docker制作自己的镜像并上传Dockerhub</h2><ol>
<li><p>首先注册自己的DockerHub账号，注册地址：<a href="https://hub.docker.com/">https://hub.docker.com</a></p>
</li>
<li><p>在Linux服务器登录自己的账号：docker login –username&#x3D;qiaoyeye</p>
</li>
<li><p>制作镜像</p>
</li>
<li><p>新建Dockerfile文件</p>
</li>
<li><p>制作镜像</p>
</li>
</ol>
<span id="more"></span>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> build <span class="token parameter variable">-t</span> <span class="token operator">&lt;</span>docker用户名<span class="token operator">></span>/<span class="token operator">&lt;</span>docker仓库名<span class="token operator">></span>:0.0.1 <span class="token parameter variable">-f</span> Dockerfile <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="6">
<li>查看镜像</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="7">
<li>上传镜像到hub仓库</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> login <span class="token parameter variable">-u</span> <span class="token operator">&lt;</span>docker用户名<span class="token operator">></span>
<span class="token function">sudo</span> <span class="token function">docker</span> push <span class="token operator">&lt;</span>docker用户名<span class="token operator">></span>/<span class="token operator">&lt;</span>docker仓库名<span class="token operator">></span>:0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="8">
<li><p>登录docker-hub查看相关信息</p>
</li>
<li><p>删除dockerhub上的镜像标签</p>
</li>
</ol>
<p><a href="https://stackoverflow.com/questions/30680703/remove-an-image-tag-from-docker-hub">https://stackoverflow.com/questions/30680703/remove-an-image-tag-from-docker-hub</a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://blog.csdn.net/qq_41417660/article/details/107351354<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>技术运营</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在EVM上部署靓号地址 (How to Deploy Vanity Addresses on EVM)</title>
    <url>/2024-11-23-how-to-deploy-vanity-addresses-on-evm/</url>
    <content><![CDATA[<blockquote>
<p>本篇仅对普通合约(非代理合约进行)进行讲解。</p>
</blockquote>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>以太坊的靓号地址是具有特定模式的钱包地址或合约地址，通常包含可识别的字符或以一系列零开头。这些地址可以增加唯一性和美观性，但生成它们需要特定工具以及对以太坊 CREATE2 操作码的了解。</p>
<p>本文将解释如何使用 <a href="https://github.com/0age/create2crunch">create2crunch</a> 工具部署靓号地址。这是一个基于 Rust 的程序，用于寻找能够在以太坊虚拟机（EVM）链上生成高效靓号地址的盐值。</p>
<span id="more"></span>

<h2 id="什么是-CREATE2？"><a href="#什么是-CREATE2？" class="headerlink" title="什么是 CREATE2？"></a>什么是 CREATE2？</h2><p>CREATE2 是以太坊中的一个操作码，允许将合约部署到可预测的地址。与原始的 CREATE 操作码不同，CREATE2 根据以下信息计算合约地址：</p>
<ol>
<li><p>Deployer Address (Factory address)<br>部署者地址（工厂合约地址）</p>
</li>
<li><p>Salt (A user-defined unique value)<br>盐值（用户定义的唯一值）</p>
</li>
<li><p>Keccak-256 Hash of the contract’s initialization code<br>合约初始化代码的 Keccak-256 哈希值</p>
</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">keccak256<span class="token punctuation">(</span>0xFF ++ deployerAddress ++ salt ++ keccak256<span class="token punctuation">(</span>initCode<span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这种可预测性使其成为生成靓号地址的理想选择，因为在部署合约之前就可以确定目标地址。</p>
<h2 id="安装和配置-create2crunch"><a href="#安装和配置-create2crunch" class="headerlink" title="安装和配置 create2crunch"></a>安装和配置 create2crunch</h2><h3 id="步骤1：克隆仓库"><a href="#步骤1：克隆仓库" class="headerlink" title="步骤1：克隆仓库"></a>步骤1：克隆仓库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/0age/create2crunch
<span class="token builtin class-name">cd</span> create2crunch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="步骤2：安装前置依赖"><a href="#步骤2：安装前置依赖" class="headerlink" title="步骤2：安装前置依赖"></a>步骤2：安装前置依赖</h3><p>确保已安装 Rust。如果没有，使用 Rustup 安装：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">--proto</span> <span class="token string">'=https'</span> <span class="token parameter variable">--tlsv1.2</span> <span class="token parameter variable">-sSf</span> https://sh.rustup.rs <span class="token operator">|</span> <span class="token function">sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>安装完成后，进入仓库目录并构建程序：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> build <span class="token parameter variable">--release</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="步骤3：定义关键参数"><a href="#步骤3：定义关键参数" class="headerlink" title="步骤3：定义关键参数"></a>步骤3：定义关键参数</h3><p>在运行程序前，需定义以下变量：</p>
<ol>
<li>Factory Address: The address of the factory or contract that will execute CREATE2. For example:<br>工厂地址：将执行 CREATE2 的工厂合约地址。例如：</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">FACTORY</span><span class="token operator">=</span><span class="token string">"0x0000000000ffe8b47b3e2130213b802212439497"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li>Caller Address: Your deployer address or the address authorized by the factory to deploy contracts:<br>调用者地址：你的部署地址，或工厂授权的地址：</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">CALLER</span><span class="token operator">=</span><span class="token string">"0xYourDeployerAddressHere"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="3">
<li>Init Code Hash: The Keccak-256 hash of your contract’s initialization code. You can calculate this hash using any Keccak-256 hashing tool or a script:<br>初始化代码哈希值：你的合约初始化代码的 Keccak-256 哈希值。可使用任意 Keccak-256 哈希工具或脚本计算：</li>
</ol>
<p>比如使用golang</p>
<pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">func TestGenInitCode(t *testing.T) &#123;
    bytecode :&#x3D; &quot;your_bytecode_here&quot; &#x2F;&#x2F; 可以从foundry的out文件夹下的合约abi中找到bytecode字段获取，如下图
    decode, err :&#x3D; hexutil.Decode(bytecode)
    if err !&#x3D; nil &#123;
        t.Error(err)
        return
    &#125;
    initCodeHash :&#x3D; crypto.Keccak256Hash(decode)
    t.Log(initCodeHash)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/images/2024-11-23-01.png" alt="bytecode字段"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">INIT_CODE_HASH</span><span class="token operator">=</span><span class="token string">"0xYourContractInitCodeHashHere"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="步骤4：运行-create2crunch"><a href="#步骤4：运行-create2crunch" class="headerlink" title="步骤4：运行 create2crunch"></a>步骤4：运行 create2crunch</h3><p>使用上述参数运行程序：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> run <span class="token parameter variable">--release</span> <span class="token variable">$FACTORY</span> <span class="token variable">$CALLER</span> <span class="token variable">$INIT_CODE_HASH</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>该工具将搜索可生成靓号地址的盐值。结果（包括盐值、生成的地址及其稀有性评分）将保存到 efficient_addresses.txt 文件中。</p>
<h2 id="验证结果"><a href="#验证结果" class="headerlink" title="验证结果"></a>验证结果</h2><p>获得结果后，必须验证盐值并确保生成的地址符合预期。如果工厂合约提供了通过盐值模拟地址生成的 view 方法，务必在部署前使用它确认靓号地址。</p>
]]></content>
      <categories>
        <category>EVM</category>
      </categories>
  </entry>
  <entry>
    <title>如何部署靓号 EVM 地址[全面指南] (How to Deploy Vanity EVM Addresses [Comprehensive Guide])</title>
    <url>/2024-11-24-how-to-deploy-vanity-evm-addresses-comprehensive-guide/</url>
    <content><![CDATA[<p>在以太坊虚拟机（EVM）中，合约地址的生成基于部署者地址和交易数据的哈希，因此可以通过一些技巧生成具有特定特点的“靓号”地址。这种技术被广泛应用于个性化品牌展示、降低用户错误操作的可能性，甚至是提高项目的营销吸引力。</p>
<span id="more"></span>

<h2 id="靓号地址生成机制"><a href="#靓号地址生成机制" class="headerlink" title="靓号地址生成机制"></a>靓号地址生成机制</h2><p>   在 EVM 中，合约地址的生成取决于以下两种机制：</p>
<ol>
<li>普通部署：</li>
</ol>
<ul>
<li>使用 CREATE 指令，生成的地址为：  <pre class="line-numbers language-code" data-language="code"><code class="language-code">keccak256(rlp([sender, nonce]))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>sender：部署者地址</li>
<li>nonce：部署者的交易计数</li>
</ul>
</li>
</ul>
<ol start="2">
<li>确定性部署：</li>
</ol>
<ul>
<li>使用 CREATE2 指令，生成的地址为：  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">keccak256<span class="token punctuation">(</span>0xff ++ sender ++ salt ++ keccak256<span class="token punctuation">(</span>bytecode<span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>sender：部署者地址（工厂合约地址）</li>
<li>salt：任意 32 字节数据，用于影响地址生成</li>
<li>bytecode：合约的初始化字节码</li>
</ul>
<p>通过 <code>CREATE2</code> 的 <code>salt</code> 和 <code>bytecode</code>，我们可以更精细地控制合约地址。</p>
<h2 id="使用-UUPS-模式生成靓号"><a href="#使用-UUPS-模式生成靓号" class="headerlink" title="使用 UUPS 模式生成靓号"></a>使用 UUPS 模式生成靓号</h2><blockquote>
<p>zora之前使用<a href="https://etherscan.deth.net/address/0xf68e8da655bedeb3cfbdae7871ca82d603523447">DeterministicUUPSProxyDeployer</a>合约进行UUPS部署，后来改成通过<a href="https://etherscan.deth.net/address/0x813f62e6b808aac8c36868898f84a3e944378d83">DeterministicDeployerAndCaller</a>部署。<br>本小节将以 DeterministicUUPSProxyDeployer 为例进行讲解，而下一小节中，关于透明代理和普通合约代理的内容，将以 DeterministicDeployerAndCaller 为例进行说明。</p>
</blockquote>
<p>在以太坊中，通过 CREATE2 的确定性部署机制，可以为 UUPS 合约生成“靓号”地址。为此，可以借助 Zora 官方提供的 DeterministicUUPSProxyDeployer 合约实现高效部署。</p>
<p>本节将结合 OpenZeppelin 的 UUPS 代理合约与 Zora 的 DeterministicUUPSProxyDeployer 合约，逐步讲解如何生成靓号地址。在操作前，请确保熟悉上述合约的代码逻辑。</p>
<p>以openzeppelin 的uups代理合约为例，在部署代理合约时候，构造函数需要传入参数。构造函数的参数会拼接在合约初始化代码后面，这个后面会用到。</p>
<ul>
<li>DeterministicUUPSProxyDeployer</li>
</ul>
<p><a href="https://github.com/ourzora/zora-protocol/blob/748be1ab013b658924248af76dc39aafa4a2faf8/packages/shared-contracts/src/deployment/DeterministicUUPSProxyDeployer.sol">https://github.com/ourzora/zora-protocol/blob/748be1ab013b658924248af76dc39aafa4a2faf8/packages/shared-contracts/src/deployment/DeterministicUUPSProxyDeployer.sol</a></p>
<ul>
<li>UUPS</li>
</ul>
<p><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v5.2/contracts/proxy/ERC1967/ERC1967Proxy.sol#L26">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v5.2/contracts/proxy/ERC1967/ERC1967Proxy.sol#L26</a></p>
<p>实操你可以查看此交易</p>
<p><a href="https://explorer.zora.energy/tx/0xbb5023241d778352ae5963c977382b8eeae91afc9ef0ca4c543b2e12a2fe4738">https://explorer.zora.energy/tx/0xbb5023241d778352ae5963c977382b8eeae91afc9ef0ca4c543b2e12a2fe4738</a><br><a href="https://explorer.zora.energy/tx/0x9157f50c80a93ae135267644e6fd4ae9b5b558fce2f86557445fe0aeda535d09">https://explorer.zora.energy/tx/0x9157f50c80a93ae135267644e6fd4ae9b5b558fce2f86557445fe0aeda535d09</a></p>
<p>以 <a href="https://explorer.zora.energy/address/0x77777779acd6a96C0c57272112921A0b833c38fD?tab=contract">ZoraMintsManager</a> 的 UUPS 代理合约 为例，代理合约的构造函数如下：</p>
<pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> _logic<span class="token punctuation">)</span> <span class="token function">ERC1967Proxy</span><span class="token punctuation">(</span>_logic<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>该构造函数在部署时需要传入两个关键参数：</p>
<ul>
<li><code>_logic</code>：实现合约的地址。</li>
</ul>
<p>在 EVM 中，合约的构造函数参数会被拼接到初始化代码（<code>creation code</code>）的末尾，这一点对于生成靓号地址尤为重要。</p>
<h3 id="1-调用safeCreate2AndUpgradeToAndCall函数"><a href="#1-调用safeCreate2AndUpgradeToAndCall函数" class="headerlink" title="1. 调用safeCreate2AndUpgradeToAndCall函数"></a>1. 调用safeCreate2AndUpgradeToAndCall函数</h3><p>开发者通过调用DeterministicUUPSProxyDeployer合约的safeCreate2AndUpgradeToAndCall函数进行部署。</p>
<pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">/// Creates a contract using create2, and then calls an initialization function on it.</span>
<span class="token comment">/// First 20 bytes of salt must match the msg.sender</span>
<span class="token comment">/// @param proxySalt Salt to create the contract with</span>
<span class="token comment">/// @param proxyCode contract creation code</span>
<span class="token comment">/// @param initialImplementation address to upgrade to</span>
<span class="token comment">/// @param postUpgradeCall what to call on the contract after upgrading</span>
<span class="token comment">/// @param _expectedAddress expected address of the created contract</span>
<span class="token keyword">function</span> <span class="token function">safeCreate2AndUpgradeToAndCall</span><span class="token punctuation">(</span>
    <span class="token builtin">bytes32</span> proxySalt<span class="token punctuation">,</span>
    <span class="token builtin">bytes</span> <span class="token keyword">memory</span> proxyCode<span class="token punctuation">,</span>
    <span class="token builtin">address</span> initialImplementation<span class="token punctuation">,</span>
    <span class="token builtin">bytes</span> <span class="token keyword">memory</span> postUpgradeCall<span class="token punctuation">,</span>
    <span class="token builtin">address</span> _expectedAddress
<span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>
    <span class="token function">_requireContainsCaller</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> proxySalt<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">_getOrCreateProxyShim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token builtin">bytes</span> <span class="token keyword">memory</span> _proxyCreationCode <span class="token operator">=</span> <span class="token function">proxyCreationCode</span><span class="token punctuation">(</span>proxyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// create the proxy</span>
    <span class="token builtin">address</span> proxyAddress <span class="token operator">=</span> Create2<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> proxySalt<span class="token punctuation">,</span> _proxyCreationCode<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>proxyAddress <span class="token operator">!=</span> _expectedAddress<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">revert</span> <span class="token function">FactoryProxyAddressMismatch</span><span class="token punctuation">(</span>_expectedAddress<span class="token punctuation">,</span> proxyAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">UUPSUpgradeable</span><span class="token punctuation">(</span>proxyAddress<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">upgradeToAndCall</span><span class="token punctuation">(</span>initialImplementation<span class="token punctuation">,</span> postUpgradeCall<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>里面涉及传参数有：</p>
<ul>
<li>proxySalt：<ul>
<li>CREATE2 的盐值，用于影响合约地址。</li>
<li>需提前通过工具生成合适的盐值以匹配靓号条件。</li>
</ul>
</li>
<li>proxyCode：<ul>
<li>代理合约的初始化代码（creation code），不包含构造函数参数。</li>
<li>这是代理的核心逻辑字节码，通常为编译后的代理合约代码</li>
</ul>
</li>
<li>initialImplementation：已经部署的实现合约地址。</li>
<li>postUpgradeCall：部署代理合约后需要进行更新实现合约地址以及初始化的数据。</li>
<li>_expectedAddress：开发者期望的代理合约地址。</li>
</ul>
<h3 id="2-requireContainsCaller-msg-sender-proxySalt"><a href="#2-requireContainsCaller-msg-sender-proxySalt" class="headerlink" title="2. _requireContainsCaller(msg.sender, proxySalt);"></a>2. <code>_requireContainsCaller(msg.sender, proxySalt);</code></h3><p>这行代码的逻辑是要求 proxySalt 的前 20 字节必须包含调用者（<code>msg.sender</code>）的地址。这样可以确保部署时的 <code>proxySalt</code> 和调用者绑定，防止其他人冒用该 <code>proxySalt</code> 来生成合约。</p>
<pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">_requireContainsCaller</span><span class="token punctuation">(</span><span class="token builtin">address</span> signer<span class="token punctuation">,</span> <span class="token builtin">bytes32</span> salt<span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">pure</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// prevent contract submissions from being stolen from tx.pool by requiring</span>
    <span class="token comment">// that the first 20 bytes of the submitted salt match msg.sender.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token builtin">bytes20</span><span class="token punctuation">(</span>salt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> signer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">revert</span> <span class="token function">InvalidSalt</span><span class="token punctuation">(</span>signer<span class="token punctuation">,</span> salt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-getOrCreateProxyShim"><a href="#3-getOrCreateProxyShim" class="headerlink" title="3. _getOrCreateProxyShim();"></a>3. <code>_getOrCreateProxyShim();</code></h3><p>这行代码通过 <code>CREATE2</code> 获取或创建一个 <code>ProxyShim</code> 合约。<code>ProxyShim</code> 是一个轻量级 UUPS 实现合约，用作代理合约的占位实现地址。在多链部署中，使用固定的 <code>ProxyShim</code> 地址可以确保代理地址一致，后续通过升级机制替换为实际实现合约。</p>
<pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">_getOrCreateProxyShim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span>ProxyShim proxyShim<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// check if initial implementation has been created</span>
    <span class="token comment">// get create 2 address for initial implementation</span>
    <span class="token builtin">address</span> _proxyShimAddress <span class="token operator">=</span> <span class="token function">proxyShimAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>_proxyShimAddress<span class="token punctuation">.</span>code<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        proxyShim <span class="token operator">=</span> <span class="token function">ProxyShim</span><span class="token punctuation">(</span>_proxyShimAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// create initial implementation at determinstic address</span>
        proxyShim <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyShim</span><span class="token punctuation">&#123;</span>salt<span class="token punctuation">:</span> INITIAL_IMPLEMENTATION_SALT<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">contract</span> <span class="token class-name">ProxyShim</span> <span class="token keyword">is</span> UUPSUpgradeable <span class="token punctuation">&#123;</span>
    <span class="token builtin">address</span> immutable canUpgrade<span class="token punctuation">;</span>

    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// defaults to msg.sender being address(this)</span>
        canUpgrade <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">function</span> <span class="token function">_authorizeUpgrade</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token keyword">view</span> override <span class="token punctuation">&#123;</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> canUpgrade<span class="token punctuation">,</span> <span class="token string">"not authorized"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-bytes-memory-proxyCreationCode-proxyCreationCode-proxyCode"><a href="#4-bytes-memory-proxyCreationCode-proxyCreationCode-proxyCode" class="headerlink" title="4. bytes memory _proxyCreationCode &#x3D; proxyCreationCode(proxyCode);"></a>4. bytes memory _proxyCreationCode &#x3D; proxyCreationCode(proxyCode);</h3><p>这行代码的作用是将代理合约的初始化代码（proxyCode）与其构造函数参数拼接，生成完整的合约部署代码的<code>creation bytecode</code>。</p>
<blockquote>
<p>如果代理合约是 OpenZeppelin 提供的标准 UUPS 代理合约，其构造函数的参数和初始化逻辑通常是这样的：<br>如果构造函数需要两个参数（逻辑合约地址和初始化数据），完整的构造函数调用数据（即 data 参数）通常通过 abi.encode 编码：<br>bytes memory data &#x3D; abi.encode(_logic, _data);</p>
</blockquote>
<pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">/// Initialization code for the proxy, including the constructor args</span>
<span class="token keyword">function</span> <span class="token function">proxyCreationCode</span><span class="token punctuation">(</span><span class="token builtin">bytes</span> <span class="token keyword">memory</span> transparentProxyCode<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bytes</span> <span class="token keyword">memory</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span>transparentProxyCode<span class="token punctuation">,</span> <span class="token function">proxyConstructorArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// Constructor args when creating the proxy</span>
<span class="token keyword">function</span> <span class="token function">proxyConstructorArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bytes</span> <span class="token keyword">memory</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> abi<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token function">proxyShimAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token builtin">bytes32</span> <span class="token keyword">constant</span> INITIAL_IMPLEMENTATION_SALT <span class="token operator">=</span> <span class="token builtin">bytes32</span><span class="token punctuation">(</span><span class="token number">0x0000000000000000000000000000000000000000000000000000000000000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/// Address of the proxy shim contract that is used to upgrade the factory proxy</span>
<span class="token keyword">function</span> <span class="token function">proxyShimAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> Create2<span class="token punctuation">.</span><span class="token function">computeAddress</span><span class="token punctuation">(</span>INITIAL_IMPLEMENTATION_SALT<span class="token punctuation">,</span> <span class="token function">keccak256</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>ProxyShim<span class="token punctuation">)</span><span class="token punctuation">.</span>creationCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-通过create2方式创建代理合约地址"><a href="#5-通过create2方式创建代理合约地址" class="headerlink" title="5. 通过create2方式创建代理合约地址"></a>5. 通过create2方式创建代理合约地址</h3><p>这段代码通过 CREATE2 指令部署代理合约，随后验证生成的合约地址是否与预期地址 _expectedAddress 一致。</p>
<pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// create the proxy</span>
<span class="token builtin">address</span> proxyAddress <span class="token operator">=</span> Create2<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> proxySalt<span class="token punctuation">,</span> _proxyCreationCode<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>proxyAddress <span class="token operator">!=</span> _expectedAddress<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">revert</span> <span class="token function">FactoryProxyAddressMismatch</span><span class="token punctuation">(</span>_expectedAddress<span class="token punctuation">,</span> proxyAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="6-执行upgradeToAndCall"><a href="#6-执行upgradeToAndCall" class="headerlink" title="6. 执行upgradeToAndCall"></a>6. 执行upgradeToAndCall</h3><p>这段代码的目的是设置代理合约的实现合约地址，并通过调用逻辑合约中的初始化函数完成必要的初始化操作。</p>
<pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token function">UUPSUpgradeable</span><span class="token punctuation">(</span>proxyAddress<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">upgradeToAndCall</span><span class="token punctuation">(</span>initialImplementation<span class="token punctuation">,</span> postUpgradeCall<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/images/2024-11-24-01.png" alt="实操你可以查看此交易"></p>
<h2 id="使用透明代理模式生成靓号"><a href="#使用透明代理模式生成靓号" class="headerlink" title="使用透明代理模式生成靓号"></a>使用透明代理模式生成靓号</h2><p>可以采用zora官方部署的<a href="https://etherscan.deth.net/address/0x813f62e6b808aac8c36868898f84a3e944378d83"><code>DeterministicDeployerAndCaller</code></a>合约。</p>
<blockquote>
<p>DeterministicDeployerAndCaller 合约支持UUPS、透明代理、普通合约等其他类型合约部署。</p>
</blockquote>
<p><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v5.2/contracts/proxy/transparent/TransparentUpgradeableProxy.sol#L79">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v5.2/contracts/proxy/transparent/TransparentUpgradeableProxy.sol#L79</a></p>
<h3 id="1-调用safeCreate2AndCall函数"><a href="#1-调用safeCreate2AndCall函数" class="headerlink" title="1. 调用safeCreate2AndCall函数"></a>1. 调用safeCreate2AndCall函数</h3><p>开发者通过调用<code>DeterministicDeployerAndCaller</code>合约的<code>safeCreate2AndCall</code>或者<code>permitSafeCreate2AndCall</code>函数进行部署。</p>
<pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">/// Creates a contract using create2, and then calls an initialization function on it.</span>
<span class="token comment">/// First 20 bytes of salt must match the msg.sender</span>
<span class="token comment">/// @param salt Salt to create the contract with</span>
<span class="token comment">/// @param code contract creation code</span>
<span class="token comment">/// @param postCreateCall what to call on the contract after deploying it</span>
<span class="token comment">/// @param _expectedAddress expected address of the created contract</span>
<span class="token keyword">function</span> <span class="token function">safeCreate2AndCall</span><span class="token punctuation">(</span><span class="token builtin">bytes32</span> salt<span class="token punctuation">,</span> <span class="token builtin">bytes</span> <span class="token keyword">memory</span> code<span class="token punctuation">,</span> <span class="token builtin">bytes</span> <span class="token keyword">memory</span> postCreateCall<span class="token punctuation">,</span> <span class="token builtin">address</span> _expectedAddress<span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">_requireContainsCaller</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> salt<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">_safeCreate2AndCall</span><span class="token punctuation">(</span>salt<span class="token punctuation">,</span> code<span class="token punctuation">,</span> postCreateCall<span class="token punctuation">,</span> _expectedAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">permitSafeCreate2AndCall</span><span class="token punctuation">(</span>
    <span class="token builtin">bytes</span> <span class="token keyword">memory</span> signature<span class="token punctuation">,</span>
    <span class="token builtin">bytes32</span> salt<span class="token punctuation">,</span>
    <span class="token builtin">bytes</span> <span class="token keyword">memory</span> code<span class="token punctuation">,</span>
    <span class="token builtin">bytes</span> <span class="token keyword">memory</span> postCreateCall<span class="token punctuation">,</span>
    <span class="token builtin">address</span> _expectedAddress
<span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">address</span> signer <span class="token operator">=</span> ECDSA<span class="token punctuation">.</span><span class="token function">recover</span><span class="token punctuation">(</span><span class="token function">hashDigest</span><span class="token punctuation">(</span>salt<span class="token punctuation">,</span> code<span class="token punctuation">,</span> postCreateCall<span class="token punctuation">)</span><span class="token punctuation">,</span> signature<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">_requireContainsCaller</span><span class="token punctuation">(</span>signer<span class="token punctuation">,</span> salt<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">_safeCreate2AndCall</span><span class="token punctuation">(</span>salt<span class="token punctuation">,</span> code<span class="token punctuation">,</span> postCreateCall<span class="token punctuation">,</span> _expectedAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>里面涉及传参数有：</p>
<ul>
<li>signature: 用户采用permit方式进行部署，即链下采用eip712 方式对信息进行签名，链上验证有效性。</li>
<li>salt：<ul>
<li>CREATE2 的盐值，用于影响合约地址。</li>
<li>需提前通过工具生成合适的盐值以匹配靓号条件。</li>
</ul>
</li>
<li>code：<ul>
<li>代理合约的初始化代码（creation code）。如果构造函数有参数，则初始化代码中已包含这些参数（若要实现多链地址统一，构造函数参数必须保持一致）。</li>
<li>这是代理的核心逻辑字节码，通常为编译后的代理合约代码</li>
</ul>
</li>
<li>postCreateCall：部署代理合约后需要进行更新实现合约地址以及初始化的数据。</li>
<li>_expectedAddress：开发者期望的代理合约地址。</li>
</ul>
<h3 id="2-requireContainsCaller-msg-sender-proxySalt-1"><a href="#2-requireContainsCaller-msg-sender-proxySalt-1" class="headerlink" title="2. _requireContainsCaller(msg.sender, proxySalt);"></a>2. <code>_requireContainsCaller(msg.sender, proxySalt);</code></h3><p>这行代码的逻辑是要求 proxySalt 的前 20 字节必须包含调用者（<code>msg.sender</code>）的地址。这样可以确保部署时的 <code>proxySalt</code> 和调用者绑定，防止其他人冒用该 <code>proxySalt</code> 来生成合约。</p>
<pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">_requireContainsCaller</span><span class="token punctuation">(</span><span class="token builtin">address</span> signer<span class="token punctuation">,</span> <span class="token builtin">bytes32</span> salt<span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">pure</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// prevent contract submissions from being stolen from tx.pool by requiring</span>
    <span class="token comment">// that the first 20 bytes of the submitted salt match msg.sender.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token builtin">bytes20</span><span class="token punctuation">(</span>salt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> signer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">revert</span> <span class="token function">InvalidSalt</span><span class="token punctuation">(</span>signer<span class="token punctuation">,</span> salt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-safeCreate2AndCall"><a href="#3-safeCreate2AndCall" class="headerlink" title="3. _safeCreate2AndCall"></a>3. <code>_safeCreate2AndCall</code></h3><ul>
<li>计算 CREATE2 地址</li>
<li>地址验证</li>
<li>通过 CREATE2 部署合约</li>
<li>调用初始化逻辑 ()</li>
</ul>
<pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">_safeCreate2AndCall</span><span class="token punctuation">(</span><span class="token builtin">bytes32</span> salt<span class="token punctuation">,</span> <span class="token builtin">bytes</span> <span class="token keyword">memory</span> code<span class="token punctuation">,</span> <span class="token builtin">bytes</span> <span class="token keyword">memory</span> postCreateCall<span class="token punctuation">,</span> <span class="token builtin">address</span> _expectedAddress<span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">address</span> deterministicAddress <span class="token operator">=</span> Create2<span class="token punctuation">.</span><span class="token function">computeAddress</span><span class="token punctuation">(</span>salt<span class="token punctuation">,</span> <span class="token function">keccak256</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_expectedAddress <span class="token operator">!=</span> deterministicAddress<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">revert</span> <span class="token function">FactoryProxyAddressMismatch</span><span class="token punctuation">(</span>_expectedAddress<span class="token punctuation">,</span> deterministicAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// create the proxy</span>
    <span class="token builtin">address</span> proxyAddress <span class="token operator">=</span> Create2<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> salt<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span><span class="token builtin">bool</span> success<span class="token punctuation">,</span> <span class="token builtin">bytes</span> <span class="token keyword">memory</span> returnData<span class="token punctuation">)</span> <span class="token operator">=</span> proxyAddress<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>postCreateCall<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">revert</span> <span class="token function">CallFailed</span><span class="token punctuation">(</span>returnData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> proxyAddress<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="部署普通合约生成靓号"><a href="#部署普通合约生成靓号" class="headerlink" title="部署普通合约生成靓号"></a>部署普通合约生成靓号</h2><p>可以采用zora官方部署的<a href="https://etherscan.deth.net/address/0x813f62e6b808aac8c36868898f84a3e944378d83"><code>DeterministicDeployerAndCaller</code></a>合约。</p>
<ul>
<li>实操可看此交易</li>
</ul>
<p><a href="https://explorer.zora.energy/tx/0xc6052fda04d0a80c66700e1d774873f63f89f73198411371d894419b47b17c87">https://explorer.zora.energy/tx/0xc6052fda04d0a80c66700e1d774873f63f89f73198411371d894419b47b17c87</a></p>
<h3 id="1-call-safeCreate2AndCall-or-permitSafeCreate2AndCall"><a href="#1-call-safeCreate2AndCall-or-permitSafeCreate2AndCall" class="headerlink" title="1. call safeCreate2AndCall or permitSafeCreate2AndCall"></a>1. call safeCreate2AndCall or permitSafeCreate2AndCall</h3><p>开发者通过调用<code>DeterministicDeployerAndCaller</code>合约的<code>safeCreate2AndCall</code>或者<code>permitSafeCreate2AndCall</code>函数进行部署。</p>
<p>里面涉及传参数有：</p>
<ul>
<li>signature: 用户采用permit方式进行部署，即链下采用eip712 方式对信息进行签名，链上验证有效性。</li>
<li>salt：<ul>
<li>CREATE2 的盐值，用于影响合约地址。</li>
<li>需提前通过工具生成合适的盐值以匹配靓号条件。</li>
</ul>
</li>
<li>code：<ul>
<li>合约的初始化代码（creation code）。如果构造函数有参数，则初始化代码中已包含这些参数（若要实现多链地址统一，构造函数参数必须保持一致）。</li>
<li>这是代理的核心逻辑字节码，通常为编译后的代理合约代码</li>
</ul>
</li>
<li>postCreateCall：部署代理合约后需要进行更新实现合约地址以及初始化的数据。</li>
<li>_expectedAddress：开发者期望的代理合约地址。</li>
</ul>
<h3 id="2-requireContainsCaller-msg-sender-proxySalt-2"><a href="#2-requireContainsCaller-msg-sender-proxySalt-2" class="headerlink" title="2. _requireContainsCaller(msg.sender, proxySalt);"></a>2. <code>_requireContainsCaller(msg.sender, proxySalt);</code></h3><p>这行代码的逻辑是要求 proxySalt 的前 20 字节必须包含调用者（<code>msg.sender</code>）的地址。这样可以确保部署时的 <code>proxySalt</code> 和调用者绑定，防止其他人冒用该 <code>proxySalt</code> 来生成合约。</p>
<pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">_requireContainsCaller</span><span class="token punctuation">(</span><span class="token builtin">address</span> signer<span class="token punctuation">,</span> <span class="token builtin">bytes32</span> salt<span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">pure</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// prevent contract submissions from being stolen from tx.pool by requiring</span>
    <span class="token comment">// that the first 20 bytes of the submitted salt match msg.sender.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token builtin">bytes20</span><span class="token punctuation">(</span>salt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> signer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">revert</span> <span class="token function">InvalidSalt</span><span class="token punctuation">(</span>signer<span class="token punctuation">,</span> salt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-safeCreate2AndCall-1"><a href="#3-safeCreate2AndCall-1" class="headerlink" title="3. _safeCreate2AndCall"></a>3. <code>_safeCreate2AndCall</code></h3><ul>
<li>计算 CREATE2 地址</li>
<li>地址验证</li>
<li>通过 CREATE2 部署合约</li>
<li>调用初始化逻辑</li>
</ul>
<pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">_safeCreate2AndCall</span><span class="token punctuation">(</span><span class="token builtin">bytes32</span> salt<span class="token punctuation">,</span> <span class="token builtin">bytes</span> <span class="token keyword">memory</span> code<span class="token punctuation">,</span> <span class="token builtin">bytes</span> <span class="token keyword">memory</span> postCreateCall<span class="token punctuation">,</span> <span class="token builtin">address</span> _expectedAddress<span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">address</span> deterministicAddress <span class="token operator">=</span> Create2<span class="token punctuation">.</span><span class="token function">computeAddress</span><span class="token punctuation">(</span>salt<span class="token punctuation">,</span> <span class="token function">keccak256</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_expectedAddress <span class="token operator">!=</span> deterministicAddress<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">revert</span> <span class="token function">FactoryProxyAddressMismatch</span><span class="token punctuation">(</span>_expectedAddress<span class="token punctuation">,</span> deterministicAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// create the proxy</span>
    <span class="token builtin">address</span> proxyAddress <span class="token operator">=</span> Create2<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> salt<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span><span class="token builtin">bool</span> success<span class="token punctuation">,</span> <span class="token builtin">bytes</span> <span class="token keyword">memory</span> returnData<span class="token punctuation">)</span> <span class="token operator">=</span> proxyAddress<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>postCreateCall<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">revert</span> <span class="token function">CallFailed</span><span class="token punctuation">(</span>returnData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> proxyAddress<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>EVM</category>
      </categories>
  </entry>
</search>
